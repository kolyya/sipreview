!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,l=o.flat?function(e){return o.flat.call(e)}:function(e){return o.concat.apply([],e)},u=o.push,f=o.indexOf,c={},d=c.toString,h=c.hasOwnProperty,p=h.toString,m=p.call(Object),g={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},y=function(e){return null!=e&&e===e.window},_=n.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var r,i,o=(n=n||_).createElement("script");if(o.text=e,t)for(r in b)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?c[d.call(e)]||"object":typeof e}var E=function(e,t){return new E.fn.init(e,t)};function T(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!v(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}E.fn=E.prototype={jquery:"3.5.1",constructor:E,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=E.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return E.each(this,e)},map:function(e){return this.pushStack(E.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(E.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(E.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:o.sort,splice:o.splice},E.extend=E.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,l=arguments.length,u=!1;for("boolean"==typeof a&&(u=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(u&&r&&(E.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[t],o=i&&!Array.isArray(n)?[]:i||E.isPlainObject(n)?n:{},i=!1,a[t]=E.extend(u,o,r)):void 0!==r&&(a[t]=r));return a},E.extend({expando:"jQuery"+("3.5.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e))&&(!(t=a(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&p.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(T(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(T(Object(e))?E.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:f.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,a=!n;i<o;i++)!t(e[i],i)!==a&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,a=[];if(T(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&a.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&a.push(i);return l(a)},guid:1,support:g}),"function"==typeof Symbol&&(E.fn[Symbol.iterator]=o[Symbol.iterator]),E.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){c["[object "+t+"]"]=t.toLowerCase()}));var k=
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
function(e){var t,n,r,i,o,a,s,l,u,f,c,d,h,p,m,g,v,y,_,b="sizzle"+1*new Date,w=e.document,x=0,E=0,T=le(),k=le(),C=le(),S=le(),A=function(e,t){return e===t&&(c=!0),0},D={}.hasOwnProperty,I=[],N=I.pop,O=I.push,R=I.push,j=I.slice,L=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",B="[\\x20\\t\\r\\n\\f]",z="(?:\\\\[\\da-fA-F]{1,6}"+B+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\["+B+"*("+z+")(?:"+B+"*([*^$|!~]?=)"+B+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+z+"))|)"+B+"*\\]",U=":("+z+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",M=new RegExp(B+"+","g"),H=new RegExp("^"+B+"+|((?:^|[^\\\\])(?:\\\\.)*)"+B+"+$","g"),q=new RegExp("^"+B+"*,"+B+"*"),W=new RegExp("^"+B+"*([>+~]|"+B+")"+B+"*"),Y=new RegExp(B+"|>"),Z=new RegExp(U),$=new RegExp("^"+z+"$"),Q={ID:new RegExp("^#("+z+")"),CLASS:new RegExp("^\\.("+z+")"),TAG:new RegExp("^("+z+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+U),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+B+"*(even|odd|(([+-]|)(\\d*)n|)"+B+"*(?:([+-]|)"+B+"*(\\d+)|))"+B+"*\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+B+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+B+"*((?:-\\d)?\\d*)"+B+"*\\)|)(?=[^-]|$)","i")},X=/HTML$/i,V=/^(?:input|select|textarea|button)$/i,G=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,J=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+B+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){d()},ae=be((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{R.apply(I=j.call(w.childNodes),w.childNodes),I[w.childNodes.length].nodeType}catch(e){R={apply:I.length?function(e,t){O.apply(e,j.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function se(e,t,r,i){var o,s,u,f,c,p,v,y=t&&t.ownerDocument,w=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==w&&9!==w&&11!==w)return r;if(!i&&(d(t),t=t||h,m)){if(11!==w&&(c=J.exec(e)))if(o=c[1]){if(9===w){if(!(u=t.getElementById(o)))return r;if(u.id===o)return r.push(u),r}else if(y&&(u=y.getElementById(o))&&_(t,u)&&u.id===o)return r.push(u),r}else{if(c[2])return R.apply(r,t.getElementsByTagName(e)),r;if((o=c[3])&&n.getElementsByClassName&&t.getElementsByClassName)return R.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!g||!g.test(e))&&(1!==w||"object"!==t.nodeName.toLowerCase())){if(v=e,y=t,1===w&&(Y.test(e)||W.test(e))){for((y=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((f=t.getAttribute("id"))?f=f.replace(re,ie):t.setAttribute("id",f=b)),s=(p=a(e)).length;s--;)p[s]=(f?"#"+f:":scope")+" "+_e(p[s]);v=p.join(",")}try{return R.apply(r,y.querySelectorAll(v)),r}catch(t){S(e,!0)}finally{f===b&&t.removeAttribute("id")}}}return l(e.replace(H,"$1"),t,r,i)}function le(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ue(e){return e[b]=!0,e}function fe(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ce(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ge(e){return ue((function(t){return t=+t,ue((function(n,r){for(var i,o=e([],n.length,t),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},o=se.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!X.test(t||n&&n.nodeName||"HTML")},d=se.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!=h&&9===a.nodeType&&a.documentElement?(p=(h=a).documentElement,m=!o(h),w!=h&&(i=h.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.scope=fe((function(e){return p.appendChild(e).appendChild(h.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=fe((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=fe((function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=K.test(h.getElementsByClassName),n.getById=fe((function(e){return p.appendChild(e).id=b,!h.getElementsByName||!h.getElementsByName(b).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=K.test(h.querySelectorAll))&&(fe((function(e){var t;p.appendChild(e).innerHTML="<a id='"+b+"'></a><select id='"+b+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+B+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+B+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+b+"-]").length||g.push("~="),(t=h.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||g.push("\\["+B+"*name"+B+"*="+B+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||g.push(".#.+[+~]"),e.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),fe((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+B+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),p.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=K.test(y=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&fe((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",U)})),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=K.test(p.compareDocumentPosition),_=t||K.test(p.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},A=t?function(e,t){if(e===t)return c=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==h||e.ownerDocument==w&&_(w,e)?-1:t==h||t.ownerDocument==w&&_(w,t)?1:f?L(f,e)-L(f,t):0:4&r?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e==h?-1:t==h?1:i?-1:o?1:f?L(f,e)-L(f,t):0;if(i===o)return de(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?de(a[r],s[r]):a[r]==w?-1:s[r]==w?1:0},h):h},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(d(e),n.matchesSelector&&m&&!S[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){S(t,!0)}return se(t,h,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!=h&&d(e),_(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=h&&d(e);var i=r.attrHandle[t.toLowerCase()],o=i&&D.call(r.attrHandle,t.toLowerCase())?i(e,t,!m):void 0;return void 0!==o?o:n.attributes||!m?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},se.escape=function(e){return(e+"").replace(re,ie)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,r=[],i=0,o=0;if(c=!n.detectDuplicates,f=!n.sortStable&&e.slice(0),e.sort(A),c){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return f=null,e},i=se.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=se.selectors={cacheLength:50,createPseudo:ue,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&Z.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+B+")"+e+"("+B+"|$)"))&&T(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=se.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(M," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var u,f,c,d,h,p,m=o!==a?"nextSibling":"previousSibling",g=t.parentNode,v=s&&t.nodeName.toLowerCase(),y=!l&&!s,_=!1;if(g){if(o){for(;m;){for(d=t;d=d[m];)if(s?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;p=m="only"===e&&!p&&"nextSibling"}return!0}if(p=[a?g.firstChild:g.lastChild],a&&y){for(_=(h=(u=(f=(c=(d=g)[b]||(d[b]={}))[d.uniqueID]||(c[d.uniqueID]={}))[e]||[])[0]===x&&u[1])&&u[2],d=h&&g.childNodes[h];d=++h&&d&&d[m]||(_=h=0)||p.pop();)if(1===d.nodeType&&++_&&d===t){f[e]=[x,h,_];break}}else if(y&&(_=h=(u=(f=(c=(d=t)[b]||(d[b]={}))[d.uniqueID]||(c[d.uniqueID]={}))[e]||[])[0]===x&&u[1]),!1===_)for(;(d=++h&&d&&d[m]||(_=h=0)||p.pop())&&((s?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++_||(y&&((f=(c=d[b]||(d[b]={}))[d.uniqueID]||(c[d.uniqueID]={}))[e]=[x,_]),d!==t)););return(_-=i)===r||_%r==0&&_/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ue((function(e,n){for(var r,o=i(e,t),a=o.length;a--;)e[r=L(e,o[a])]=!(n[r]=o[a])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ue((function(e){var t=[],n=[],r=s(e.replace(H,"$1"));return r[b]?ue((function(e,t,n,i){for(var o,a=r(e,null,i,[]),s=e.length;s--;)(o=a[s])&&(e[s]=!(t[s]=o))})):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}})),has:ue((function(e){return function(t){return se(e,t).length>0}})),contains:ue((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ue((function(e){return $.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===p},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return G.test(e.nodeName)},input:function(e){return V.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ge((function(){return[0]})),last:ge((function(e,t){return[t-1]})),eq:ge((function(e,t,n){return[n<0?n+t:n]})),even:ge((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ge((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ge((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:ge((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ye(){}function _e(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function be(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=E++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,l){var u,f,c,d=[x,s];if(l){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(f=(c=t[b]||(t[b]={}))[t.uniqueID]||(c[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=f[o])&&u[0]===x&&u[1]===s)return d[2]=u[2];if(f[o]=d,d[2]=e(t,n,l))return!0}return!1}}function we(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function xe(e,t,n,r,i){for(var o,a=[],s=0,l=e.length,u=null!=t;s<l;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),u&&t.push(s)));return a}function Ee(e,t,n,r,i,o){return r&&!r[b]&&(r=Ee(r)),i&&!i[b]&&(i=Ee(i,o)),ue((function(o,a,s,l){var u,f,c,d=[],h=[],p=a.length,m=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)se(e,t[r],n);return n}(t||"*",s.nodeType?[s]:s,[]),g=!e||!o&&t?m:xe(m,d,e,s,l),v=n?i||(o?e:p||r)?[]:a:g;if(n&&n(g,v,s,l),r)for(u=xe(v,h),r(u,[],s,l),f=u.length;f--;)(c=u[f])&&(v[h[f]]=!(g[h[f]]=c));if(o){if(i||e){if(i){for(u=[],f=v.length;f--;)(c=v[f])&&u.push(g[f]=c);i(null,v=[],u,l)}for(f=v.length;f--;)(c=v[f])&&(u=i?L(o,c):d[f])>-1&&(o[u]=!(a[u]=c))}}else v=xe(v===a?v.splice(p,v.length):v),i?i(null,a,v,l):R.apply(a,v)}))}function Te(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],l=a?1:0,f=be((function(e){return e===t}),s,!0),c=be((function(e){return L(t,e)>-1}),s,!0),d=[function(e,n,r){var i=!a&&(r||n!==u)||((t=n).nodeType?f(e,n,r):c(e,n,r));return t=null,i}];l<o;l++)if(n=r.relative[e[l].type])d=[be(we(d),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[b]){for(i=++l;i<o&&!r.relative[e[i].type];i++);return Ee(l>1&&we(d),l>1&&_e(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(H,"$1"),n,l<i&&Te(e.slice(l,i)),i<o&&Te(e=e.slice(i)),i<o&&_e(e))}d.push(n)}return we(d)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=se.tokenize=function(e,t){var n,i,o,a,s,l,u,f=k[e+" "];if(f)return t?0:f.slice(0);for(s=e,l=[],u=r.preFilter;s;){for(a in n&&!(i=q.exec(s))||(i&&(s=s.slice(i[0].length)||s),l.push(o=[])),n=!1,(i=W.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(H," ")}),s=s.slice(n.length)),r.filter)!(i=Q[a].exec(s))||u[a]&&!(i=u[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?se.error(e):k(e,l).slice(0)},s=se.compile=function(e,t){var n,i=[],o=[],s=C[e+" "];if(!s){for(t||(t=a(e)),n=t.length;n--;)(s=Te(t[n]))[b]?i.push(s):o.push(s);(s=C(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,l,f){var c,p,g,v=0,y="0",_=o&&[],b=[],w=u,E=o||i&&r.find.TAG("*",f),T=x+=null==w?1:Math.random()||.1,k=E.length;for(f&&(u=a==h||a||f);y!==k&&null!=(c=E[y]);y++){if(i&&c){for(p=0,a||c.ownerDocument==h||(d(c),s=!m);g=e[p++];)if(g(c,a||h,s)){l.push(c);break}f&&(x=T)}n&&((c=!g&&c)&&v--,o&&_.push(c))}if(v+=y,n&&y!==v){for(p=0;g=t[p++];)g(_,b,a,s);if(o){if(v>0)for(;y--;)_[y]||b[y]||(b[y]=N.call(l));b=xe(b)}R.apply(l,b),f&&!o&&b.length>0&&v+t.length>1&&se.uniqueSort(l)}return f&&(x=T,u=w),_};return n?ue(o):o}(o,i))).selector=e}return s},l=se.select=function(e,t,n,i){var o,l,u,f,c,d="function"==typeof e&&e,h=!i&&a(e=d.selector||e);if(n=n||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(u=l[0]).type&&9===t.nodeType&&m&&r.relative[l[1].type]){if(!(t=(r.find.ID(u.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=Q.needsContext.test(e)?0:l.length;o--&&(u=l[o],!r.relative[f=u.type]);)if((c=r.find[f])&&(i=c(u.matches[0].replace(te,ne),ee.test(l[0].type)&&ve(t.parentNode)||t))){if(l.splice(o,1),!(e=i.length&&_e(l)))return R.apply(n,i),n;break}}return(d||s(e,h))(i,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=b.split("").sort(A).join("")===b,n.detectDuplicates=!!c,d(),n.sortDetached=fe((function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))})),fe((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ce("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&fe((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ce("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),fe((function(e){return null==e.getAttribute("disabled")}))||ce(P,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),se}(n);E.find=k,E.expr=k.selectors,E.expr[":"]=E.expr.pseudos,E.uniqueSort=E.unique=k.uniqueSort,E.text=k.getText,E.isXMLDoc=k.isXML,E.contains=k.contains,E.escapeSelector=k.escape;var C=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&E(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},A=E.expr.match.needsContext;function D(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var I=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function N(e,t,n){return v(t)?E.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?E.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?E.grep(e,(function(e){return f.call(t,e)>-1!==n})):E.filter(t,e,n)}E.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?E.find.matchesSelector(r,e)?[r]:[]:E.find.matches(e,E.grep(t,(function(e){return 1===e.nodeType})))},E.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(E(e).filter((function(){for(t=0;t<r;t++)if(E.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)E.find(e,i[t],n);return r>1?E.uniqueSort(n):n},filter:function(e){return this.pushStack(N(this,e||[],!1))},not:function(e){return this.pushStack(N(this,e||[],!0))},is:function(e){return!!N(this,"string"==typeof e&&A.test(e)?E(e):e||[],!1).length}});var O,R=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(E.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||O,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:R.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof E?t[0]:t,E.merge(this,E.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:_,!0)),I.test(r[1])&&E.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=_.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(E):E.makeArray(e,this)}).prototype=E.fn,O=E(_);var j=/^(?:parents|prev(?:Until|All))/,L={children:!0,contents:!0,next:!0,prev:!0};function P(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}E.fn.extend({has:function(e){var t=E(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(E.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&E(e);if(!A.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&E.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?E.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?f.call(E(e),this[0]):f.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(E.uniqueSort(E.merge(this.get(),E(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),E.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,n){return C(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,n){return C(e,"nextSibling",n)},prevUntil:function(e,t,n){return C(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(D(e,"template")&&(e=e.content||e),E.merge([],e.childNodes))}},(function(e,t){E.fn[e]=function(n,r){var i=E.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=E.filter(r,i)),this.length>1&&(L[e]||E.uniqueSort(i),j.test(e)&&i.reverse()),this.pushStack(i)}}));var B=/[^\x20\t\r\n\f]+/g;function z(e){return e}function F(e){throw e}function U(e,t,n,r){var i;try{e&&v(i=e.promise)?i.call(e).done(t).fail(n):e&&v(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}E.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return E.each(e.match(B)||[],(function(e,n){t[n]=!0})),t}(e):E.extend({},e);var t,n,r,i,o=[],a=[],s=-1,l=function(){for(i=i||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},u={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){E.each(n,(function(n,r){v(r)?e.unique&&u.has(r)||o.push(r):r&&r.length&&"string"!==x(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return E.each(arguments,(function(e,t){for(var n;(n=E.inArray(t,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(e){return e?E.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||l()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},E.extend({Deferred:function(e){var t=[["notify","progress",E.Callbacks("memory"),E.Callbacks("memory"),2],["resolve","done",E.Callbacks("once memory"),E.Callbacks("once memory"),0,"resolved"],["reject","fail",E.Callbacks("once memory"),E.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return E.Deferred((function(n){E.each(t,(function(t,r){var i=v(e[r[4]])&&e[r[4]];o[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,i){var o=0;function a(e,t,r,i){return function(){var s=this,l=arguments,u=function(){var n,u;if(!(e<o)){if((n=r.apply(s,l))===t.promise())throw new TypeError("Thenable self-resolution");u=n&&("object"==typeof n||"function"==typeof n)&&n.then,v(u)?i?u.call(n,a(o,t,z,i),a(o,t,F,i)):(o++,u.call(n,a(o,t,z,i),a(o,t,F,i),a(o,t,z,t.notifyWith))):(r!==z&&(s=void 0,l=[n]),(i||t.resolveWith)(s,l))}},f=i?u:function(){try{u()}catch(n){E.Deferred.exceptionHook&&E.Deferred.exceptionHook(n,f.stackTrace),e+1>=o&&(r!==F&&(s=void 0,l=[n]),t.rejectWith(s,l))}};e?f():(E.Deferred.getStackHook&&(f.stackTrace=E.Deferred.getStackHook()),n.setTimeout(f))}}return E.Deferred((function(n){t[0][3].add(a(0,n,v(i)?i:z,n.notifyWith)),t[1][3].add(a(0,n,v(e)?e:z)),t[2][3].add(a(0,n,v(r)?r:F))})).promise()},promise:function(e){return null!=e?E.extend(e,i):i}},o={};return E.each(t,(function(e,n){var a=n[2],s=n[5];i[n[1]]=a.add,s&&a.add((function(){r=s}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=a.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=s.call(arguments),o=E.Deferred(),a=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?s.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(U(e,o.done(a(n)).resolve,o.reject,!t),"pending"===o.state()||v(i[n]&&i[n].then)))return o.then();for(;n--;)U(i[n],a(n),o.reject);return o.promise()}});var M=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;E.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&M.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},E.readyException=function(e){n.setTimeout((function(){throw e}))};var H=E.Deferred();function q(){_.removeEventListener("DOMContentLoaded",q),n.removeEventListener("load",q),E.ready()}E.fn.ready=function(e){return H.then(e).catch((function(e){E.readyException(e)})),this},E.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--E.readyWait:E.isReady)||(E.isReady=!0,!0!==e&&--E.readyWait>0||H.resolveWith(_,[E]))}}),E.ready.then=H.then,"complete"===_.readyState||"loading"!==_.readyState&&!_.documentElement.doScroll?n.setTimeout(E.ready):(_.addEventListener("DOMContentLoaded",q),n.addEventListener("load",q));var W=function(e,t,n,r,i,o,a){var s=0,l=e.length,u=null==n;if("object"===x(n))for(s in i=!0,n)W(e,t,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,v(r)||(a=!0),u&&(a?(t.call(e,r),t=null):(u=t,t=function(e,t,n){return u.call(E(e),n)})),t))for(;s<l;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:u?t.call(e):l?t(e[0],n):o},Y=/^-ms-/,Z=/-([a-z])/g;function $(e,t){return t.toUpperCase()}function Q(e){return e.replace(Y,"ms-").replace(Z,$)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function V(){this.expando=E.expando+V.uid++}V.uid=1,V.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[Q(t)]=n;else for(r in t)i[Q(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Q(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Q):(t=Q(t))in r?[t]:t.match(B)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||E.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!E.isEmptyObject(t)}};var G=new V,K=new V,J=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ee=/[A-Z]/g;function te(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:J.test(e)?JSON.parse(e):e)}(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}E.extend({hasData:function(e){return K.hasData(e)||G.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return G.access(e,t,n)},_removeData:function(e,t){G.remove(e,t)}}),E.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!G.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=Q(r.slice(5)),te(o,r,i[r]));G.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){K.set(this,e)})):W(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=K.get(o,e))||void 0!==(n=te(o,e))?n:void 0;this.each((function(){K.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){K.remove(this,e)}))}}),E.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=G.get(e,t),n&&(!r||Array.isArray(n)?r=G.access(e,t,E.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=E.queue(e,t),r=n.length,i=n.shift(),o=E._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,(function(){E.dequeue(e,t)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return G.get(e,n)||G.access(e,n,{empty:E.Callbacks("once memory").add((function(){G.remove(e,[t+"queue",n])}))})}}),E.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?E.queue(this[0],e):void 0===t?this:this.each((function(){var n=E.queue(this,e,t);E._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&E.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){E.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=E.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=G.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var ne=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ne+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],oe=_.documentElement,ae=function(e){return E.contains(e.ownerDocument,e)},se={composed:!0};oe.getRootNode&&(ae=function(e){return E.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var le=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===E.css(e,"display")};function ue(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return E.css(e,t,"")},l=s(),u=n&&n[3]||(E.cssNumber[t]?"":"px"),f=e.nodeType&&(E.cssNumber[t]||"px"!==u&&+l)&&re.exec(E.css(e,t));if(f&&f[3]!==u){for(l/=2,u=u||f[3],f=+l||1;a--;)E.style(e,t,f+u),(1-o)*(1-(o=s()/l||.5))<=0&&(a=0),f/=o;f*=2,E.style(e,t,f+u),n=n||[]}return n&&(f=+f||+l||0,i=n[1]?f+(n[1]+1)*n[2]:+n[2],r&&(r.unit=u,r.start=f,r.end=i)),i}var fe={};function ce(e){var t,n=e.ownerDocument,r=e.nodeName,i=fe[r];return i||(t=n.body.appendChild(n.createElement(r)),i=E.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),fe[r]=i,i)}function de(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=G.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&le(r)&&(i[o]=ce(r))):"none"!==n&&(i[o]="none",G.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}E.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){le(this)?E(this).show():E(this).hide()}))}});var he,pe,me=/^(?:checkbox|radio)$/i,ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ve=/^$|^module$|\/(?:java|ecma)script/i;he=_.createDocumentFragment().appendChild(_.createElement("div")),(pe=_.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),he.appendChild(pe),g.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",g.option=!!he.lastChild;var ye={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function _e(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&D(e,t)?E.merge([e],n):n}function be(e,t){for(var n=0,r=e.length;n<r;n++)G.set(e[n],"globalEval",!t||G.get(t[n],"globalEval"))}ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td,g.option||(ye.optgroup=ye.option=[1,"<select multiple='multiple'>","</select>"]);var we=/<|&#?\w+;/;function xe(e,t,n,r,i){for(var o,a,s,l,u,f,c=t.createDocumentFragment(),d=[],h=0,p=e.length;h<p;h++)if((o=e[h])||0===o)if("object"===x(o))E.merge(d,o.nodeType?[o]:o);else if(we.test(o)){for(a=a||c.appendChild(t.createElement("div")),s=(ge.exec(o)||["",""])[1].toLowerCase(),l=ye[s]||ye._default,a.innerHTML=l[1]+E.htmlPrefilter(o)+l[2],f=l[0];f--;)a=a.lastChild;E.merge(d,a.childNodes),(a=c.firstChild).textContent=""}else d.push(t.createTextNode(o));for(c.textContent="",h=0;o=d[h++];)if(r&&E.inArray(o,r)>-1)i&&i.push(o);else if(u=ae(o),a=_e(c.appendChild(o),"script"),u&&be(a),n)for(f=0;o=a[f++];)ve.test(o.type||"")&&n.push(o);return c}var Ee=/^key/,Te=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ke=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function Se(){return!1}function Ae(e,t){return e===function(){try{return _.activeElement}catch(e){}}()==("focus"===t)}function De(e,t,n,r,i,o){var a,s;if("object"==typeof t){for(s in"string"!=typeof n&&(r=r||n,n=void 0),t)De(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Se;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return E().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=E.guid++)),e.each((function(){E.event.add(this,t,i,r,n)}))}function Ie(e,t,n){n?(G.set(e,t,!1),E.event.add(e,t,{namespace:!1,handler:function(e){var r,i,o=G.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(E.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=s.call(arguments),G.set(this,t,o),r=n(this,t),this[t](),o!==(i=G.get(this,t))||r?G.set(this,t,!1):i={},o!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else o.length&&(G.set(this,t,{value:E.event.trigger(E.extend(o[0],E.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===G.get(e,t)&&E.event.add(e,t,Ce)}E.event={global:{},add:function(e,t,n,r,i){var o,a,s,l,u,f,c,d,h,p,m,g=G.get(e);if(X(e))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&E.find.matchesSelector(oe,i),n.guid||(n.guid=E.guid++),(l=g.events)||(l=g.events=Object.create(null)),(a=g.handle)||(a=g.handle=function(t){return void 0!==E&&E.event.triggered!==t.type?E.event.dispatch.apply(e,arguments):void 0}),u=(t=(t||"").match(B)||[""]).length;u--;)h=m=(s=ke.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),h&&(c=E.event.special[h]||{},h=(i?c.delegateType:c.bindType)||h,c=E.event.special[h]||{},f=E.extend({type:h,origType:m,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&E.expr.match.needsContext.test(i),namespace:p.join(".")},o),(d=l[h])||((d=l[h]=[]).delegateCount=0,c.setup&&!1!==c.setup.call(e,r,p,a)||e.addEventListener&&e.addEventListener(h,a)),c.add&&(c.add.call(e,f),f.handler.guid||(f.handler.guid=n.guid)),i?d.splice(d.delegateCount++,0,f):d.push(f),E.event.global[h]=!0)},remove:function(e,t,n,r,i){var o,a,s,l,u,f,c,d,h,p,m,g=G.hasData(e)&&G.get(e);if(g&&(l=g.events)){for(u=(t=(t||"").match(B)||[""]).length;u--;)if(h=m=(s=ke.exec(t[u])||[])[1],p=(s[2]||"").split(".").sort(),h){for(c=E.event.special[h]||{},d=l[h=(r?c.delegateType:c.bindType)||h]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=d.length;o--;)f=d[o],!i&&m!==f.origType||n&&n.guid!==f.guid||s&&!s.test(f.namespace)||r&&r!==f.selector&&("**"!==r||!f.selector)||(d.splice(o,1),f.selector&&d.delegateCount--,c.remove&&c.remove.call(e,f));a&&!d.length&&(c.teardown&&!1!==c.teardown.call(e,p,g.handle)||E.removeEvent(e,h,g.handle),delete l[h])}else for(h in l)E.event.remove(e,h+t[u],n,r,!0);E.isEmptyObject(l)&&G.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,a,s=new Array(arguments.length),l=E.event.fix(e),u=(G.get(this,"events")||Object.create(null))[l.type]||[],f=E.event.special[l.type]||{};for(s[0]=l,t=1;t<arguments.length;t++)s[t]=arguments[t];if(l.delegateTarget=this,!f.preDispatch||!1!==f.preDispatch.call(this,l)){for(a=E.event.handlers.call(this,l,u),t=0;(i=a[t++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==o.namespace&&!l.rnamespace.test(o.namespace)||(l.handleObj=o,l.data=o.data,void 0!==(r=((E.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(l.result=r)&&(l.preventDefault(),l.stopPropagation()));return f.postDispatch&&f.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,r,i,o,a,s=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||!0!==u.disabled)){for(o=[],a={},n=0;n<l;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?E(i,this).index(u)>-1:E.find(i,this,null,[u]).length),a[i]&&o.push(r);o.length&&s.push({elem:u,handlers:o})}return u=this,l<t.length&&s.push({elem:u,handlers:t.slice(l)}),s},addProp:function(e,t){Object.defineProperty(E.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[E.expando]?e:new E.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return me.test(t.type)&&t.click&&D(t,"input")&&Ie(t,"click",Ce),!1},trigger:function(e){var t=this||e;return me.test(t.type)&&t.click&&D(t,"input")&&Ie(t,"click"),!0},_default:function(e){var t=e.target;return me.test(t.type)&&t.click&&D(t,"input")&&G.get(t,"click")||D(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},E.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},E.Event=function(e,t){if(!(this instanceof E.Event))return new E.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:Se,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&E.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[E.expando]=!0},E.Event.prototype={constructor:E.Event,isDefaultPrevented:Se,isPropagationStopped:Se,isImmediatePropagationStopped:Se,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},E.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ee.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},E.event.addProp),E.each({focus:"focusin",blur:"focusout"},(function(e,t){E.event.special[e]={setup:function(){return Ie(this,e,Ae),!1},trigger:function(){return Ie(this,e),!0},delegateType:t}})),E.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){E.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||E.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),E.fn.extend({on:function(e,t,n,r){return De(this,e,t,n,r)},one:function(e,t,n,r){return De(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,E(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Se),this.each((function(){E.event.remove(this,e,n,t)}))}});var Ne=/<script|<style|<link/i,Oe=/checked\s*(?:[^=]|=\s*.checked.)/i,Re=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function je(e,t){return D(e,"table")&&D(11!==t.nodeType?t:t.firstChild,"tr")&&E(e).children("tbody")[0]||e}function Le(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Pe(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Be(e,t){var n,r,i,o,a,s;if(1===t.nodeType){if(G.hasData(e)&&(s=G.get(e).events))for(i in G.remove(t,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)E.event.add(t,i,s[i][n]);K.hasData(e)&&(o=K.access(e),a=E.extend({},o),K.set(t,a))}}function ze(e,t){var n=t.nodeName.toLowerCase();"input"===n&&me.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Fe(e,t,n,r){t=l(t);var i,o,a,s,u,f,c=0,d=e.length,h=d-1,p=t[0],m=v(p);if(m||d>1&&"string"==typeof p&&!g.checkClone&&Oe.test(p))return e.each((function(i){var o=e.eq(i);m&&(t[0]=p.call(this,i,o.html())),Fe(o,t,n,r)}));if(d&&(o=(i=xe(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=E.map(_e(i,"script"),Le)).length;c<d;c++)u=i,c!==h&&(u=E.clone(u,!0,!0),s&&E.merge(a,_e(u,"script"))),n.call(e[c],u,c);if(s)for(f=a[a.length-1].ownerDocument,E.map(a,Pe),c=0;c<s;c++)u=a[c],ve.test(u.type||"")&&!G.access(u,"globalEval")&&E.contains(f,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?E._evalUrl&&!u.noModule&&E._evalUrl(u.src,{nonce:u.nonce||u.getAttribute("nonce")},f):w(u.textContent.replace(Re,""),u,f))}return e}function Ue(e,t,n){for(var r,i=t?E.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||E.cleanData(_e(r)),r.parentNode&&(n&&ae(r)&&be(_e(r,"script")),r.parentNode.removeChild(r));return e}E.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),l=ae(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||E.isXMLDoc(e)))for(a=_e(s),r=0,i=(o=_e(e)).length;r<i;r++)ze(o[r],a[r]);if(t)if(n)for(o=o||_e(e),a=a||_e(s),r=0,i=o.length;r<i;r++)Be(o[r],a[r]);else Be(e,s);return(a=_e(s,"script")).length>0&&be(a,!l&&_e(e,"script")),s},cleanData:function(e){for(var t,n,r,i=E.event.special,o=0;void 0!==(n=e[o]);o++)if(X(n)){if(t=n[G.expando]){if(t.events)for(r in t.events)i[r]?E.event.remove(n,r):E.removeEvent(n,r,t.handle);n[G.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),E.fn.extend({detach:function(e){return Ue(this,e,!0)},remove:function(e){return Ue(this,e)},text:function(e){return W(this,(function(e){return void 0===e?E.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Fe(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||je(this,e).appendChild(e)}))},prepend:function(){return Fe(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=je(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Fe(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(E.cleanData(_e(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return E.clone(this,e,t)}))},html:function(e){return W(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ne.test(e)&&!ye[(ge.exec(e)||["",""])[1].toLowerCase()]){e=E.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(E.cleanData(_e(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Fe(this,arguments,(function(t){var n=this.parentNode;E.inArray(this,e)<0&&(E.cleanData(_e(this)),n&&n.replaceChild(t,this))}),e)}}),E.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){E.fn[e]=function(e){for(var n,r=[],i=E(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),E(i[a])[t](n),u.apply(r,n.get());return this.pushStack(r)}}));var Me=new RegExp("^("+ne+")(?!px)[a-z%]+$","i"),He=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},qe=function(e,t,n){var r,i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in r=n.call(e),t)e.style[i]=o[i];return r},We=new RegExp(ie.join("|"),"i");function Ye(e,t,n){var r,i,o,a,s=e.style;return(n=n||He(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||ae(e)||(a=E.style(e,t)),!g.pixelBoxStyles()&&Me.test(a)&&We.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function Ze(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(f){u.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",f.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",oe.appendChild(u).appendChild(f);var e=n.getComputedStyle(f);r="1%"!==e.top,l=12===t(e.marginLeft),f.style.right="60%",a=36===t(e.right),i=36===t(e.width),f.style.position="absolute",o=12===t(f.offsetWidth/3),oe.removeChild(u),f=null}}function t(e){return Math.round(parseFloat(e))}var r,i,o,a,s,l,u=_.createElement("div"),f=_.createElement("div");f.style&&(f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===f.style.backgroundClip,E.extend(g,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o},reliableTrDimensions:function(){var e,t,r,i;return null==s&&(e=_.createElement("table"),t=_.createElement("tr"),r=_.createElement("div"),e.style.cssText="position:absolute;left:-11111px",t.style.height="1px",r.style.height="9px",oe.appendChild(e).appendChild(t).appendChild(r),i=n.getComputedStyle(t),s=parseInt(i.height)>3,oe.removeChild(e)),s}}))}();var $e=["Webkit","Moz","ms"],Qe=_.createElement("div").style,Xe={};function Ve(e){var t=E.cssProps[e]||Xe[e];return t||(e in Qe?e:Xe[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=$e.length;n--;)if((e=$e[n]+t)in Qe)return e}(e)||e)}var Ge=/^(none|table(?!-c[ea]).+)/,Ke=/^--/,Je={position:"absolute",visibility:"hidden",display:"block"},et={letterSpacing:"0",fontWeight:"400"};function tt(e,t,n){var r=re.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function nt(e,t,n,r,i,o){var a="width"===t?1:0,s=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=E.css(e,n+ie[a],!0,i)),r?("content"===n&&(l-=E.css(e,"padding"+ie[a],!0,i)),"margin"!==n&&(l-=E.css(e,"border"+ie[a]+"Width",!0,i))):(l+=E.css(e,"padding"+ie[a],!0,i),"padding"!==n?l+=E.css(e,"border"+ie[a]+"Width",!0,i):s+=E.css(e,"border"+ie[a]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-s-.5))||0),l}function rt(e,t,n){var r=He(e),i=(!g.boxSizingReliable()||n)&&"border-box"===E.css(e,"boxSizing",!1,r),o=i,a=Ye(e,t,r),s="offset"+t[0].toUpperCase()+t.slice(1);if(Me.test(a)){if(!n)return a;a="auto"}return(!g.boxSizingReliable()&&i||!g.reliableTrDimensions()&&D(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===E.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===E.css(e,"boxSizing",!1,r),(o=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+nt(e,t,n||(i?"border":"content"),o,r,a)+"px"}function it(e,t,n,r,i){return new it.prototype.init(e,t,n,r,i)}E.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ye(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=Q(t),l=Ke.test(t),u=e.style;if(l||(t=Ve(s)),a=E.cssHooks[t]||E.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:u[t];"string"===(o=typeof n)&&(i=re.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(E.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(u[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l?u.setProperty(t,n):u[t]=n))}},css:function(e,t,n,r){var i,o,a,s=Q(t);return Ke.test(t)||(t=Ve(s)),(a=E.cssHooks[t]||E.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Ye(e,t,r)),"normal"===i&&t in et&&(i=et[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),E.each(["height","width"],(function(e,t){E.cssHooks[t]={get:function(e,n,r){if(n)return!Ge.test(E.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?rt(e,t,r):qe(e,Je,(function(){return rt(e,t,r)}))},set:function(e,n,r){var i,o=He(e),a=!g.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===E.css(e,"boxSizing",!1,o),l=r?nt(e,t,r,s,o):0;return s&&a&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-nt(e,t,"border",!1,o)-.5)),l&&(i=re.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=E.css(e,t)),tt(0,n,l)}}})),E.cssHooks.marginLeft=Ze(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ye(e,"marginLeft"))||e.getBoundingClientRect().left-qe(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),E.each({margin:"",padding:"",border:"Width"},(function(e,t){E.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+ie[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(E.cssHooks[e+t].set=tt)})),E.fn.extend({css:function(e,t){return W(this,(function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=He(e),i=t.length;a<i;a++)o[t[a]]=E.css(e,t[a],!1,r);return o}return void 0!==n?E.style(e,t,n):E.css(e,t)}),e,t,arguments.length>1)}}),E.Tween=it,it.prototype={constructor:it,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||E.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(E.cssNumber[n]?"":"px")},cur:function(){var e=it.propHooks[this.prop];return e&&e.get?e.get(this):it.propHooks._default.get(this)},run:function(e){var t,n=it.propHooks[this.prop];return this.options.duration?this.pos=t=E.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):it.propHooks._default.set(this),this}},it.prototype.init.prototype=it.prototype,it.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=E.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){E.fx.step[e.prop]?E.fx.step[e.prop](e):1!==e.elem.nodeType||!E.cssHooks[e.prop]&&null==e.elem.style[Ve(e.prop)]?e.elem[e.prop]=e.now:E.style(e.elem,e.prop,e.now+e.unit)}}},it.propHooks.scrollTop=it.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},E.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},E.fx=it.prototype.init,E.fx.step={};var ot,at,st=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ut(){at&&(!1===_.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(ut):n.setTimeout(ut,E.fx.interval),E.fx.tick())}function ft(){return n.setTimeout((function(){ot=void 0})),ot=Date.now()}function ct(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=ie[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function dt(e,t,n){for(var r,i=(ht.tweeners[t]||[]).concat(ht.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ht(e,t,n){var r,i,o=0,a=ht.prefilters.length,s=E.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var t=ot||ft(),n=Math.max(0,u.startTime+u.duration-t),r=1-(n/u.duration||0),o=0,a=u.tweens.length;o<a;o++)u.tweens[o].run(r);return s.notifyWith(e,[u,r,n]),r<1&&a?n:(a||s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u]),!1)},u=s.promise({elem:e,props:E.extend({},t),opts:E.extend(!0,{specialEasing:{},easing:E.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||ft(),duration:n.duration,tweens:[],createTween:function(t,n){var r=E.Tween(e,u.opts,t,n,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(r),r},stop:function(t){var n=0,r=t?u.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)u.tweens[n].run(1);return t?(s.notifyWith(e,[u,1,0]),s.resolveWith(e,[u,t])):s.rejectWith(e,[u,t]),this}}),f=u.props;for(!function(e,t){var n,r,i,o,a;for(n in e)if(i=t[r=Q(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=E.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(f,u.opts.specialEasing);o<a;o++)if(r=ht.prefilters[o].call(u,e,f,u.opts))return v(r.stop)&&(E._queueHooks(u.elem,u.opts.queue).stop=r.stop.bind(r)),r;return E.map(f,dt,u),v(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),E.fx.timer(E.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}E.Animation=E.extend(ht,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(B);for(var n,r=0,i=e.length;r<i;r++)n=e[r],ht.tweeners[n]=ht.tweeners[n]||[],ht.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,a,s,l,u,f,c="width"in t||"height"in t,d=this,h={},p=e.style,m=e.nodeType&&le(e),g=G.get(e,"fxshow");for(r in n.queue||(null==(a=E._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always((function(){d.always((function(){a.unqueued--,E.queue(e,"fx").length||a.empty.fire()}))}))),t)if(i=t[r],st.test(i)){if(delete t[r],o=o||"toggle"===i,i===(m?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;m=!0}h[r]=g&&g[r]||E.style(e,r)}if((l=!E.isEmptyObject(t))||!E.isEmptyObject(h))for(r in c&&1===e.nodeType&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],null==(u=g&&g.display)&&(u=G.get(e,"display")),"none"===(f=E.css(e,"display"))&&(u?f=u:(de([e],!0),u=e.style.display||u,f=E.css(e,"display"),de([e]))),("inline"===f||"inline-block"===f&&null!=u)&&"none"===E.css(e,"float")&&(l||(d.done((function(){p.display=u})),null==u&&(f=p.display,u="none"===f?"":f)),p.display="inline-block")),n.overflow&&(p.overflow="hidden",d.always((function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}))),l=!1,h)l||(g?"hidden"in g&&(m=g.hidden):g=G.access(e,"fxshow",{display:u}),o&&(g.hidden=!m),m&&de([e],!0),d.done((function(){for(r in m||de([e]),G.remove(e,"fxshow"),h)E.style(e,r,h[r])}))),l=dt(m?g[r]:0,r,d),r in g||(g[r]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?ht.prefilters.unshift(e):ht.prefilters.push(e)}}),E.speed=function(e,t,n){var r=e&&"object"==typeof e?E.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return E.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in E.fx.speeds?r.duration=E.fx.speeds[r.duration]:r.duration=E.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&E.dequeue(this,r.queue)},r},E.fn.extend({fadeTo:function(e,t,n,r){return this.filter(le).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=E.isEmptyObject(e),o=E.speed(t,n,r),a=function(){var t=ht(this,E.extend({},e),o);(i||G.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",o=E.timers,a=G.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&lt.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||E.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=G.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=E.timers,a=r?r.length:0;for(n.finish=!0,E.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),E.each(["toggle","show","hide"],(function(e,t){var n=E.fn[t];E.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,r,i)}})),E.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){E.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),E.timers=[],E.fx.tick=function(){var e,t=0,n=E.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||E.fx.stop(),ot=void 0},E.fx.timer=function(e){E.timers.push(e),E.fx.start()},E.fx.interval=13,E.fx.start=function(){at||(at=!0,ut())},E.fx.stop=function(){at=null},E.fx.speeds={slow:600,fast:200,_default:400},E.fn.delay=function(e,t){return e=E.fx&&E.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}}))},function(){var e=_.createElement("input"),t=_.createElement("select").appendChild(_.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=_.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var pt,mt=E.expr.attrHandle;E.fn.extend({attr:function(e,t){return W(this,E.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){E.removeAttr(this,e)}))}}),E.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?E.prop(e,t,n):(1===o&&E.isXMLDoc(e)||(i=E.attrHooks[t.toLowerCase()]||(E.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void E.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=E.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&D(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(B);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?E.removeAttr(e,n):e.setAttribute(n,n),n}},E.each(E.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=mt[t]||E.find.attr;mt[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=mt[a],mt[a]=i,i=null!=n(e,t,r)?a:null,mt[a]=o),i}}));var gt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function yt(e){return(e.match(B)||[]).join(" ")}function _t(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(B)||[]}E.fn.extend({prop:function(e,t){return W(this,E.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[E.propFix[e]||e]}))}}),E.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&E.isXMLDoc(e)||(t=E.propFix[t]||t,i=E.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=E.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(E.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),E.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){E.propFix[this.toLowerCase()]=this})),E.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,l=0;if(v(e))return this.each((function(t){E(this).addClass(e.call(this,t,_t(this)))}));if((t=bt(e)).length)for(;n=this[l++];)if(i=_t(n),r=1===n.nodeType&&" "+yt(i)+" "){for(a=0;o=t[a++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=yt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,l=0;if(v(e))return this.each((function(t){E(this).removeClass(e.call(this,t,_t(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[l++];)if(i=_t(n),r=1===n.nodeType&&" "+yt(i)+" "){for(a=0;o=t[a++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(s=yt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){E(this).toggleClass(e.call(this,n,_t(this),t),t)})):this.each((function(){var t,i,o,a;if(r)for(i=0,o=E(this),a=bt(e);t=a[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=_t(this))&&G.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":G.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+yt(_t(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;E.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=v(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,E(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=E.map(i,(function(e){return null==e?"":e+""}))),(t=E.valHooks[this.type]||E.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=E.valHooks[i.type]||E.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(wt,""):null==n?"":n:void 0}}),E.extend({valHooks:{option:{get:function(e){var t=E.find.attr(e,"value");return null!=t?t:yt(E.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],l=a?o+1:i.length;for(r=o<0?l:a?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!D(n.parentNode,"optgroup"))){if(t=E(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,i=e.options,o=E.makeArray(t),a=i.length;a--;)((r=i[a]).selected=E.inArray(E.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),E.each(["radio","checkbox"],(function(){E.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=E.inArray(E(e).val(),t)>-1}},g.checkOn||(E.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),g.focusin="onfocusin"in n;var xt=/^(?:focusinfocus|focusoutblur)$/,Et=function(e){e.stopPropagation()};E.extend(E.event,{trigger:function(e,t,r,i){var o,a,s,l,u,f,c,d,p=[r||_],m=h.call(e,"type")?e.type:e,g=h.call(e,"namespace")?e.namespace.split("."):[];if(a=d=s=r=r||_,3!==r.nodeType&&8!==r.nodeType&&!xt.test(m+E.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),u=m.indexOf(":")<0&&"on"+m,(e=e[E.expando]?e:new E.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:E.makeArray(t,[e]),c=E.event.special[m]||{},i||!c.trigger||!1!==c.trigger.apply(r,t))){if(!i&&!c.noBubble&&!y(r)){for(l=c.delegateType||m,xt.test(l+m)||(a=a.parentNode);a;a=a.parentNode)p.push(a),s=a;s===(r.ownerDocument||_)&&p.push(s.defaultView||s.parentWindow||n)}for(o=0;(a=p[o++])&&!e.isPropagationStopped();)d=a,e.type=o>1?l:c.bindType||m,(f=(G.get(a,"events")||Object.create(null))[e.type]&&G.get(a,"handle"))&&f.apply(a,t),(f=u&&a[u])&&f.apply&&X(a)&&(e.result=f.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(p.pop(),t)||!X(r)||u&&v(r[m])&&!y(r)&&((s=r[u])&&(r[u]=null),E.event.triggered=m,e.isPropagationStopped()&&d.addEventListener(m,Et),r[m](),e.isPropagationStopped()&&d.removeEventListener(m,Et),E.event.triggered=void 0,s&&(r[u]=s)),e.result}},simulate:function(e,t,n){var r=E.extend(new E.Event,n,{type:e,isSimulated:!0});E.event.trigger(r,null,t)}}),E.fn.extend({trigger:function(e,t){return this.each((function(){E.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return E.event.trigger(e,t,n,!0)}}),g.focusin||E.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){E.event.simulate(t,e.target,E.event.fix(e))};E.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,i=G.access(r,t);i||r.addEventListener(e,n,!0),G.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=G.access(r,t)-1;i?G.access(r,t,i):(r.removeEventListener(e,n,!0),G.remove(r,t))}}}));var Tt=n.location,kt={guid:Date.now()},Ct=/\?/;E.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||E.error("Invalid XML: "+e),t};var St=/\[\]$/,At=/\r?\n/g,Dt=/^(?:submit|button|image|reset|file)$/i,It=/^(?:input|select|textarea|keygen)/i;function Nt(e,t,n,r){var i;if(Array.isArray(t))E.each(t,(function(t,i){n||St.test(e)?r(e,i):Nt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==x(t))r(e,t);else for(i in t)Nt(e+"["+i+"]",t[i],n,r)}E.param=function(e,t){var n,r=[],i=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!E.isPlainObject(e))E.each(e,(function(){i(this.name,this.value)}));else for(n in e)Nt(n,e[n],t,i);return r.join("&")},E.fn.extend({serialize:function(){return E.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=E.prop(this,"elements");return e?E.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!E(this).is(":disabled")&&It.test(this.nodeName)&&!Dt.test(e)&&(this.checked||!me.test(e))})).map((function(e,t){var n=E(this).val();return null==n?null:Array.isArray(n)?E.map(n,(function(e){return{name:t.name,value:e.replace(At,"\r\n")}})):{name:t.name,value:n.replace(At,"\r\n")}})).get()}});var Ot=/%20/g,Rt=/#.*$/,jt=/([?&])_=[^&]*/,Lt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Pt=/^(?:GET|HEAD)$/,Bt=/^\/\//,zt={},Ft={},Ut="*/".concat("*"),Mt=_.createElement("a");function Ht(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(B)||[];if(v(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function qt(e,t,n,r){var i={},o=e===Ft;function a(s){var l;return i[s]=!0,E.each(e[s]||[],(function(e,s){var u=s(t,n,r);return"string"!=typeof u||o||i[u]?o?!(l=u):void 0:(t.dataTypes.unshift(u),a(u),!1)})),l}return a(t.dataTypes[0])||!i["*"]&&a("*")}function Wt(e,t){var n,r,i=E.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&E.extend(!0,e,r),e}Mt.href=Tt.href,E.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Tt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Tt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ut,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":E.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,E.ajaxSettings),t):Wt(E.ajaxSettings,e)},ajaxPrefilter:Ht(zt),ajaxTransport:Ht(Ft),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,a,s,l,u,f,c,d,h=E.ajaxSetup({},t),p=h.context||h,m=h.context&&(p.nodeType||p.jquery)?E(p):E.event,g=E.Deferred(),v=E.Callbacks("once memory"),y=h.statusCode||{},b={},w={},x="canceled",T={readyState:0,getResponseHeader:function(e){var t;if(u){if(!a)for(a={};t=Lt.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(e,t){return null==u&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)T.always(e[T.status]);else for(t in e)y[t]=[y[t],e[t]];return this},abort:function(e){var t=e||x;return r&&r.abort(t),k(0,t),this}};if(g.promise(T),h.url=((e||h.url||Tt.href)+"").replace(Bt,Tt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(B)||[""],null==h.crossDomain){l=_.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Mt.protocol+"//"+Mt.host!=l.protocol+"//"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=E.param(h.data,h.traditional)),qt(zt,h,t,T),u)return T;for(c in(f=E.event&&h.global)&&0==E.active++&&E.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Pt.test(h.type),i=h.url.replace(Rt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Ot,"+")):(d=h.url.slice(i.length),h.data&&(h.processData||"string"==typeof h.data)&&(i+=(Ct.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(jt,"$1"),d=(Ct.test(i)?"&":"?")+"_="+kt.guid+++d),h.url=i+d),h.ifModified&&(E.lastModified[i]&&T.setRequestHeader("If-Modified-Since",E.lastModified[i]),E.etag[i]&&T.setRequestHeader("If-None-Match",E.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&T.setRequestHeader("Content-Type",h.contentType),T.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Ut+"; q=0.01":""):h.accepts["*"]),h.headers)T.setRequestHeader(c,h.headers[c]);if(h.beforeSend&&(!1===h.beforeSend.call(p,T,h)||u))return T.abort();if(x="abort",v.add(h.complete),T.done(h.success),T.fail(h.error),r=qt(Ft,h,t,T)){if(T.readyState=1,f&&m.trigger("ajaxSend",[T,h]),u)return T;h.async&&h.timeout>0&&(s=n.setTimeout((function(){T.abort("timeout")}),h.timeout));try{u=!1,r.send(b,k)}catch(e){if(u)throw e;k(-1,e)}}else k(-1,"No Transport");function k(e,t,a,l){var c,d,_,b,w,x=t;u||(u=!0,s&&n.clearTimeout(s),r=void 0,o=l||"",T.readyState=e>0?4:0,c=e>=200&&e<300||304===e,a&&(b=function(e,t,n){for(var r,i,o,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==l[0]&&l.unshift(o),n[o]}(h,T,a)),!c&&E.inArray("script",h.dataTypes)>-1&&(h.converters["text script"]=function(){}),b=function(e,t,n,r){var i,o,a,s,l,u={},f=e.dataTypes.slice();if(f[1])for(a in e.converters)u[a.toLowerCase()]=e.converters[a];for(o=f.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=f.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(a=u[l+" "+o]||u["* "+o]))for(i in u)if((s=i.split(" "))[1]===o&&(a=u[l+" "+s[0]]||u["* "+s[0]])){!0===a?a=u[i]:!0!==u[i]&&(o=s[0],f.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(h,b,T,c),c?(h.ifModified&&((w=T.getResponseHeader("Last-Modified"))&&(E.lastModified[i]=w),(w=T.getResponseHeader("etag"))&&(E.etag[i]=w)),204===e||"HEAD"===h.type?x="nocontent":304===e?x="notmodified":(x=b.state,d=b.data,c=!(_=b.error))):(_=x,!e&&x||(x="error",e<0&&(e=0))),T.status=e,T.statusText=(t||x)+"",c?g.resolveWith(p,[d,x,T]):g.rejectWith(p,[T,x,_]),T.statusCode(y),y=void 0,f&&m.trigger(c?"ajaxSuccess":"ajaxError",[T,h,c?d:_]),v.fireWith(p,[T,x]),f&&(m.trigger("ajaxComplete",[T,h]),--E.active||E.event.trigger("ajaxStop")))}return T},getJSON:function(e,t,n){return E.get(e,t,n,"json")},getScript:function(e,t){return E.get(e,void 0,t,"script")}}),E.each(["get","post"],(function(e,t){E[t]=function(e,n,r,i){return v(n)&&(i=i||r,r=n,n=void 0),E.ajax(E.extend({url:e,type:t,dataType:i,data:n,success:r},E.isPlainObject(e)&&e))}})),E.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),E._evalUrl=function(e,t,n){return E.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){E.globalEval(e,t,n)}})},E.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=E(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){E(this).wrapInner(e.call(this,t))})):this.each((function(){var t=E(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){E(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){E(this).replaceWith(this.childNodes)})),this}}),E.expr.pseudos.hidden=function(e){return!E.expr.pseudos.visible(e)},E.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},E.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Yt={0:200,1223:204},Zt=E.ajaxSettings.xhr();g.cors=!!Zt&&"withCredentials"in Zt,g.ajax=Zt=!!Zt,E.ajaxTransport((function(e){var t,r;if(g.cors||Zt&&!e.crossDomain)return{send:function(i,o){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);t=function(e){return function(){t&&(t=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Yt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),r=s.onerror=s.ontimeout=t("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),E.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),E.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return E.globalEval(e),e}}}),E.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),E.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=E("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),_.head.appendChild(t[0])},abort:function(){n&&n()}}}));var $t,Qt=[],Xt=/(=)\?(?=&|$)|\?\?/;E.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Qt.pop()||E.expando+"_"+kt.guid++;return this[e]=!0,e}}),E.ajaxPrefilter("json jsonp",(function(e,t,r){var i,o,a,s=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(s||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(Xt,"$1"+i):!1!==e.jsonp&&(e.url+=(Ct.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return a||E.error(i+" was not called"),a[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){a=arguments},r.always((function(){void 0===o?E(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Qt.push(i)),a&&v(o)&&o(a[0]),a=o=void 0})),"script"})),g.createHTMLDocument=(($t=_.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===$t.childNodes.length),E.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((r=(t=_.implementation.createHTMLDocument("")).createElement("base")).href=_.location.href,t.head.appendChild(r)):t=_),o=!n&&[],(i=I.exec(e))?[t.createElement(i[1])]:(i=xe([e],t,o),o&&o.length&&E(o).remove(),E.merge([],i.childNodes)));var r,i,o},E.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=yt(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&E.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){o=arguments,a.html(r?E("<div>").append(E.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},E.expr.pseudos.animated=function(e){return E.grep(E.timers,(function(t){return e===t.elem})).length},E.offset={setOffset:function(e,t,n){var r,i,o,a,s,l,u=E.css(e,"position"),f=E(e),c={};"static"===u&&(e.style.position="relative"),s=f.offset(),o=E.css(e,"top"),l=E.css(e,"left"),("absolute"===u||"fixed"===u)&&(o+l).indexOf("auto")>-1?(a=(r=f.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(l)||0),v(t)&&(t=t.call(e,n,E.extend({},s))),null!=t.top&&(c.top=t.top-s.top+a),null!=t.left&&(c.left=t.left-s.left+i),"using"in t?t.using.call(e,c):("number"==typeof c.top&&(c.top+="px"),"number"==typeof c.left&&(c.left+="px"),f.css(c))}},E.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){E.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===E.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===E.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=E(e).offset()).top+=E.css(e,"borderTopWidth",!0),i.left+=E.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-E.css(r,"marginTop",!0),left:t.left-i.left-E.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===E.css(e,"position");)e=e.offsetParent;return e||oe}))}}),E.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;E.fn[e]=function(r){return W(this,(function(e,r,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i}),e,r,arguments.length)}})),E.each(["top","left"],(function(e,t){E.cssHooks[t]=Ze(g.pixelPosition,(function(e,n){if(n)return n=Ye(e,t),Me.test(n)?E(e).position()[t]+"px":n}))})),E.each({Height:"height",Width:"width"},(function(e,t){E.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){E.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return W(this,(function(t,n,i){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?E.css(t,n,s):E.style(t,n,i,s)}),t,a?i:void 0,a)}}))})),E.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){E.fn[t]=function(e){return this.on(t,e)}})),E.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),E.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){E.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Vt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;E.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=s.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(s.call(arguments)))}).guid=e.guid=e.guid||E.guid++,i},E.holdReady=function(e){e?E.readyWait++:E.ready(!0)},E.isArray=Array.isArray,E.parseJSON=JSON.parse,E.nodeName=D,E.isFunction=v,E.isWindow=y,E.camelCase=Q,E.type=x,E.now=Date.now,E.isNumeric=function(e){var t=E.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},E.trim=function(e){return null==e?"":(e+"").replace(Vt,"")},void 0===(r=function(){return E}.apply(t,[]))||(e.exports=r);var Gt=n.jQuery,Kt=n.$;return E.noConflict=function(e){return n.$===E&&(n.$=Kt),e&&n.jQuery===E&&(n.jQuery=Gt),E},void 0===i&&(n.jQuery=n.$=E),E}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(1));n(3);const o=r(n(5));n(15),i.default((function(){new o.default}))},function(e,t,n){
/*!
  * Bootstrap v4.5.3 (https://getbootstrap.com/)
  * Copyright 2011-2020 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
  */
!function(e,t,n){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var i=r(t),o=r(n);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),e}function l(){return(l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function u(e){var t=this,n=!1;return i.default(this).one(f.TRANSITION_END,(function(){n=!0})),setTimeout((function(){n||f.triggerTransitionEnd(t)}),e),this}var f={TRANSITION_END:"bsTransitionEnd",getUID:function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},getSelectorFromElement:function(e){var t=e.getAttribute("data-target");if(!t||"#"===t){var n=e.getAttribute("href");t=n&&"#"!==n?n.trim():""}try{return document.querySelector(t)?t:null}catch(e){return null}},getTransitionDurationFromElement:function(e){if(!e)return 0;var t=i.default(e).css("transition-duration"),n=i.default(e).css("transition-delay"),r=parseFloat(t),o=parseFloat(n);return r||o?(t=t.split(",")[0],n=n.split(",")[0],1e3*(parseFloat(t)+parseFloat(n))):0},reflow:function(e){return e.offsetHeight},triggerTransitionEnd:function(e){i.default(e).trigger("transitionend")},supportsTransitionEnd:function(){return Boolean("transitionend")},isElement:function(e){return(e[0]||e).nodeType},typeCheckConfig:function(e,t,n){for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r)){var i=n[r],o=t[r],a=o&&f.isElement(o)?"element":null==(s=o)?""+s:{}.toString.call(s).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(i).test(a))throw new Error(e.toUpperCase()+': Option "'+r+'" provided type "'+a+'" but expected type "'+i+'".')}var s},findShadowRoot:function(e){if(!document.documentElement.attachShadow)return null;if("function"==typeof e.getRootNode){var t=e.getRootNode();return t instanceof ShadowRoot?t:null}return e instanceof ShadowRoot?e:e.parentNode?f.findShadowRoot(e.parentNode):null},jQueryDetection:function(){if(void 0===i.default)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var e=i.default.fn.jquery.split(" ")[0].split(".");if(e[0]<2&&e[1]<9||1===e[0]&&9===e[1]&&e[2]<1||e[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")}};f.jQueryDetection(),i.default.fn.emulateTransitionEnd=u,i.default.event.special[f.TRANSITION_END]={bindType:"transitionend",delegateType:"transitionend",handle:function(e){if(i.default(e.target).is(this))return e.handleObj.handler.apply(this,arguments)}};var c="alert",d=i.default.fn[c],h=function(){function e(e){this._element=e}var t=e.prototype;return t.close=function(e){var t=this._element;e&&(t=this._getRootElement(e)),this._triggerCloseEvent(t).isDefaultPrevented()||this._removeElement(t)},t.dispose=function(){i.default.removeData(this._element,"bs.alert"),this._element=null},t._getRootElement=function(e){var t=f.getSelectorFromElement(e),n=!1;return t&&(n=document.querySelector(t)),n||(n=i.default(e).closest(".alert")[0]),n},t._triggerCloseEvent=function(e){var t=i.default.Event("close.bs.alert");return i.default(e).trigger(t),t},t._removeElement=function(e){var t=this;if(i.default(e).removeClass("show"),i.default(e).hasClass("fade")){var n=f.getTransitionDurationFromElement(e);i.default(e).one(f.TRANSITION_END,(function(n){return t._destroyElement(e,n)})).emulateTransitionEnd(n)}else this._destroyElement(e)},t._destroyElement=function(e){i.default(e).detach().trigger("closed.bs.alert").remove()},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this),r=n.data("bs.alert");r||(r=new e(this),n.data("bs.alert",r)),"close"===t&&r[t](this)}))},e._handleDismiss=function(e){return function(t){t&&t.preventDefault(),e.close(this)}},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}}]),e}();i.default(document).on("click.bs.alert.data-api",'[data-dismiss="alert"]',h._handleDismiss(new h)),i.default.fn[c]=h._jQueryInterface,i.default.fn[c].Constructor=h,i.default.fn[c].noConflict=function(){return i.default.fn[c]=d,h._jQueryInterface};var p=i.default.fn.button,m=function(){function e(e){this._element=e,this.shouldAvoidTriggerChange=!1}var t=e.prototype;return t.toggle=function(){var e=!0,t=!0,n=i.default(this._element).closest('[data-toggle="buttons"]')[0];if(n){var r=this._element.querySelector('input:not([type="hidden"])');if(r){if("radio"===r.type)if(r.checked&&this._element.classList.contains("active"))e=!1;else{var o=n.querySelector(".active");o&&i.default(o).removeClass("active")}e&&("checkbox"!==r.type&&"radio"!==r.type||(r.checked=!this._element.classList.contains("active")),this.shouldAvoidTriggerChange||i.default(r).trigger("change")),r.focus(),t=!1}}this._element.hasAttribute("disabled")||this._element.classList.contains("disabled")||(t&&this._element.setAttribute("aria-pressed",!this._element.classList.contains("active")),e&&i.default(this._element).toggleClass("active"))},t.dispose=function(){i.default.removeData(this._element,"bs.button"),this._element=null},e._jQueryInterface=function(t,n){return this.each((function(){var r=i.default(this),o=r.data("bs.button");o||(o=new e(this),r.data("bs.button",o)),o.shouldAvoidTriggerChange=n,"toggle"===t&&o[t]()}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}}]),e}();i.default(document).on("click.bs.button.data-api",'[data-toggle^="button"]',(function(e){var t=e.target,n=t;if(i.default(t).hasClass("btn")||(t=i.default(t).closest(".btn")[0]),!t||t.hasAttribute("disabled")||t.classList.contains("disabled"))e.preventDefault();else{var r=t.querySelector('input:not([type="hidden"])');if(r&&(r.hasAttribute("disabled")||r.classList.contains("disabled")))return void e.preventDefault();"INPUT"!==n.tagName&&"LABEL"===t.tagName||m._jQueryInterface.call(i.default(t),"toggle","INPUT"===n.tagName)}})).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',(function(e){var t=i.default(e.target).closest(".btn")[0];i.default(t).toggleClass("focus",/^focus(in)?$/.test(e.type))})),i.default(window).on("load.bs.button.data-api",(function(){for(var e=[].slice.call(document.querySelectorAll('[data-toggle="buttons"] .btn')),t=0,n=e.length;t<n;t++){var r=e[t],i=r.querySelector('input:not([type="hidden"])');i.checked||i.hasAttribute("checked")?r.classList.add("active"):r.classList.remove("active")}for(var o=0,a=(e=[].slice.call(document.querySelectorAll('[data-toggle="button"]'))).length;o<a;o++){var s=e[o];"true"===s.getAttribute("aria-pressed")?s.classList.add("active"):s.classList.remove("active")}})),i.default.fn.button=m._jQueryInterface,i.default.fn.button.Constructor=m,i.default.fn.button.noConflict=function(){return i.default.fn.button=p,m._jQueryInterface};var g="carousel",v=".bs.carousel",y=i.default.fn[g],_={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},b={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},w={TOUCH:"touch",PEN:"pen"},x=function(){function e(e,t){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this.touchStartX=0,this.touchDeltaX=0,this._config=this._getConfig(t),this._element=e,this._indicatorsElement=this._element.querySelector(".carousel-indicators"),this._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,this._pointerEvent=Boolean(window.PointerEvent||window.MSPointerEvent),this._addEventListeners()}var t=e.prototype;return t.next=function(){this._isSliding||this._slide("next")},t.nextWhenVisible=function(){var e=i.default(this._element);!document.hidden&&e.is(":visible")&&"hidden"!==e.css("visibility")&&this.next()},t.prev=function(){this._isSliding||this._slide("prev")},t.pause=function(e){e||(this._isPaused=!0),this._element.querySelector(".carousel-item-next, .carousel-item-prev")&&(f.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},t.cycle=function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},t.to=function(e){var t=this;this._activeElement=this._element.querySelector(".active.carousel-item");var n=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)i.default(this._element).one("slid.bs.carousel",(function(){return t.to(e)}));else{if(n===e)return this.pause(),void this.cycle();var r=e>n?"next":"prev";this._slide(r,this._items[e])}},t.dispose=function(){i.default(this._element).off(v),i.default.removeData(this._element,"bs.carousel"),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},t._getConfig=function(e){return e=l({},_,e),f.typeCheckConfig(g,e,b),e},t._handleSwipe=function(){var e=Math.abs(this.touchDeltaX);if(!(e<=40)){var t=e/this.touchDeltaX;this.touchDeltaX=0,t>0&&this.prev(),t<0&&this.next()}},t._addEventListeners=function(){var e=this;this._config.keyboard&&i.default(this._element).on("keydown.bs.carousel",(function(t){return e._keydown(t)})),"hover"===this._config.pause&&i.default(this._element).on("mouseenter.bs.carousel",(function(t){return e.pause(t)})).on("mouseleave.bs.carousel",(function(t){return e.cycle(t)})),this._config.touch&&this._addTouchEventListeners()},t._addTouchEventListeners=function(){var e=this;if(this._touchSupported){var t=function(t){e._pointerEvent&&w[t.originalEvent.pointerType.toUpperCase()]?e.touchStartX=t.originalEvent.clientX:e._pointerEvent||(e.touchStartX=t.originalEvent.touches[0].clientX)},n=function(t){e._pointerEvent&&w[t.originalEvent.pointerType.toUpperCase()]&&(e.touchDeltaX=t.originalEvent.clientX-e.touchStartX),e._handleSwipe(),"hover"===e._config.pause&&(e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout((function(t){return e.cycle(t)}),500+e._config.interval))};i.default(this._element.querySelectorAll(".carousel-item img")).on("dragstart.bs.carousel",(function(e){return e.preventDefault()})),this._pointerEvent?(i.default(this._element).on("pointerdown.bs.carousel",(function(e){return t(e)})),i.default(this._element).on("pointerup.bs.carousel",(function(e){return n(e)})),this._element.classList.add("pointer-event")):(i.default(this._element).on("touchstart.bs.carousel",(function(e){return t(e)})),i.default(this._element).on("touchmove.bs.carousel",(function(t){return function(t){t.originalEvent.touches&&t.originalEvent.touches.length>1?e.touchDeltaX=0:e.touchDeltaX=t.originalEvent.touches[0].clientX-e.touchStartX}(t)})),i.default(this._element).on("touchend.bs.carousel",(function(e){return n(e)})))}},t._keydown=function(e){if(!/input|textarea/i.test(e.target.tagName))switch(e.which){case 37:e.preventDefault(),this.prev();break;case 39:e.preventDefault(),this.next()}},t._getItemIndex=function(e){return this._items=e&&e.parentNode?[].slice.call(e.parentNode.querySelectorAll(".carousel-item")):[],this._items.indexOf(e)},t._getItemByDirection=function(e,t){var n="next"===e,r="prev"===e,i=this._getItemIndex(t),o=this._items.length-1;if((r&&0===i||n&&i===o)&&!this._config.wrap)return t;var a=(i+("prev"===e?-1:1))%this._items.length;return-1===a?this._items[this._items.length-1]:this._items[a]},t._triggerSlideEvent=function(e,t){var n=this._getItemIndex(e),r=this._getItemIndex(this._element.querySelector(".active.carousel-item")),o=i.default.Event("slide.bs.carousel",{relatedTarget:e,direction:t,from:r,to:n});return i.default(this._element).trigger(o),o},t._setActiveIndicatorElement=function(e){if(this._indicatorsElement){var t=[].slice.call(this._indicatorsElement.querySelectorAll(".active"));i.default(t).removeClass("active");var n=this._indicatorsElement.children[this._getItemIndex(e)];n&&i.default(n).addClass("active")}},t._slide=function(e,t){var n,r,o,a=this,s=this._element.querySelector(".active.carousel-item"),l=this._getItemIndex(s),u=t||s&&this._getItemByDirection(e,s),c=this._getItemIndex(u),d=Boolean(this._interval);if("next"===e?(n="carousel-item-left",r="carousel-item-next",o="left"):(n="carousel-item-right",r="carousel-item-prev",o="right"),u&&i.default(u).hasClass("active"))this._isSliding=!1;else if(!this._triggerSlideEvent(u,o).isDefaultPrevented()&&s&&u){this._isSliding=!0,d&&this.pause(),this._setActiveIndicatorElement(u);var h=i.default.Event("slid.bs.carousel",{relatedTarget:u,direction:o,from:l,to:c});if(i.default(this._element).hasClass("slide")){i.default(u).addClass(r),f.reflow(u),i.default(s).addClass(n),i.default(u).addClass(n);var p=parseInt(u.getAttribute("data-interval"),10);p?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=p):this._config.interval=this._config.defaultInterval||this._config.interval;var m=f.getTransitionDurationFromElement(s);i.default(s).one(f.TRANSITION_END,(function(){i.default(u).removeClass(n+" "+r).addClass("active"),i.default(s).removeClass("active "+r+" "+n),a._isSliding=!1,setTimeout((function(){return i.default(a._element).trigger(h)}),0)})).emulateTransitionEnd(m)}else i.default(s).removeClass("active"),i.default(u).addClass("active"),this._isSliding=!1,i.default(this._element).trigger(h);d&&this.cycle()}},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this).data("bs.carousel"),r=l({},_,i.default(this).data());"object"==typeof t&&(r=l({},r,t));var o="string"==typeof t?t:r.slide;if(n||(n=new e(this,r),i.default(this).data("bs.carousel",n)),"number"==typeof t)n.to(t);else if("string"==typeof o){if(void 0===n[o])throw new TypeError('No method named "'+o+'"');n[o]()}else r.interval&&r.ride&&(n.pause(),n.cycle())}))},e._dataApiClickHandler=function(t){var n=f.getSelectorFromElement(this);if(n){var r=i.default(n)[0];if(r&&i.default(r).hasClass("carousel")){var o=l({},i.default(r).data(),i.default(this).data()),a=this.getAttribute("data-slide-to");a&&(o.interval=!1),e._jQueryInterface.call(i.default(r),o),a&&i.default(r).data("bs.carousel").to(a),t.preventDefault()}}},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return _}}]),e}();i.default(document).on("click.bs.carousel.data-api","[data-slide], [data-slide-to]",x._dataApiClickHandler),i.default(window).on("load.bs.carousel.data-api",(function(){for(var e=[].slice.call(document.querySelectorAll('[data-ride="carousel"]')),t=0,n=e.length;t<n;t++){var r=i.default(e[t]);x._jQueryInterface.call(r,r.data())}})),i.default.fn[g]=x._jQueryInterface,i.default.fn[g].Constructor=x,i.default.fn[g].noConflict=function(){return i.default.fn[g]=y,x._jQueryInterface};var E="collapse",T=i.default.fn[E],k={toggle:!0,parent:""},C={toggle:"boolean",parent:"(string|element)"},S=function(){function e(e,t){this._isTransitioning=!1,this._element=e,this._config=this._getConfig(t),this._triggerArray=[].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#'+e.id+'"],[data-toggle="collapse"][data-target="#'+e.id+'"]'));for(var n=[].slice.call(document.querySelectorAll('[data-toggle="collapse"]')),r=0,i=n.length;r<i;r++){var o=n[r],a=f.getSelectorFromElement(o),s=[].slice.call(document.querySelectorAll(a)).filter((function(t){return t===e}));null!==a&&s.length>0&&(this._selector=a,this._triggerArray.push(o))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var t=e.prototype;return t.toggle=function(){i.default(this._element).hasClass("show")?this.hide():this.show()},t.show=function(){var t,n,r=this;if(!(this._isTransitioning||i.default(this._element).hasClass("show")||(this._parent&&0===(t=[].slice.call(this._parent.querySelectorAll(".show, .collapsing")).filter((function(e){return"string"==typeof r._config.parent?e.getAttribute("data-parent")===r._config.parent:e.classList.contains("collapse")}))).length&&(t=null),t&&(n=i.default(t).not(this._selector).data("bs.collapse"))&&n._isTransitioning))){var o=i.default.Event("show.bs.collapse");if(i.default(this._element).trigger(o),!o.isDefaultPrevented()){t&&(e._jQueryInterface.call(i.default(t).not(this._selector),"hide"),n||i.default(t).data("bs.collapse",null));var a=this._getDimension();i.default(this._element).removeClass("collapse").addClass("collapsing"),this._element.style[a]=0,this._triggerArray.length&&i.default(this._triggerArray).removeClass("collapsed").attr("aria-expanded",!0),this.setTransitioning(!0);var s="scroll"+(a[0].toUpperCase()+a.slice(1)),l=f.getTransitionDurationFromElement(this._element);i.default(this._element).one(f.TRANSITION_END,(function(){i.default(r._element).removeClass("collapsing").addClass("collapse show"),r._element.style[a]="",r.setTransitioning(!1),i.default(r._element).trigger("shown.bs.collapse")})).emulateTransitionEnd(l),this._element.style[a]=this._element[s]+"px"}}},t.hide=function(){var e=this;if(!this._isTransitioning&&i.default(this._element).hasClass("show")){var t=i.default.Event("hide.bs.collapse");if(i.default(this._element).trigger(t),!t.isDefaultPrevented()){var n=this._getDimension();this._element.style[n]=this._element.getBoundingClientRect()[n]+"px",f.reflow(this._element),i.default(this._element).addClass("collapsing").removeClass("collapse show");var r=this._triggerArray.length;if(r>0)for(var o=0;o<r;o++){var a=this._triggerArray[o],s=f.getSelectorFromElement(a);null!==s&&(i.default([].slice.call(document.querySelectorAll(s))).hasClass("show")||i.default(a).addClass("collapsed").attr("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[n]="";var l=f.getTransitionDurationFromElement(this._element);i.default(this._element).one(f.TRANSITION_END,(function(){e.setTransitioning(!1),i.default(e._element).removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")})).emulateTransitionEnd(l)}}},t.setTransitioning=function(e){this._isTransitioning=e},t.dispose=function(){i.default.removeData(this._element,"bs.collapse"),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},t._getConfig=function(e){return(e=l({},k,e)).toggle=Boolean(e.toggle),f.typeCheckConfig(E,e,C),e},t._getDimension=function(){return i.default(this._element).hasClass("width")?"width":"height"},t._getParent=function(){var t,n=this;f.isElement(this._config.parent)?(t=this._config.parent,void 0!==this._config.parent.jquery&&(t=this._config.parent[0])):t=document.querySelector(this._config.parent);var r='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',o=[].slice.call(t.querySelectorAll(r));return i.default(o).each((function(t,r){n._addAriaAndCollapsedClass(e._getTargetFromElement(r),[r])})),t},t._addAriaAndCollapsedClass=function(e,t){var n=i.default(e).hasClass("show");t.length&&i.default(t).toggleClass("collapsed",!n).attr("aria-expanded",n)},e._getTargetFromElement=function(e){var t=f.getSelectorFromElement(e);return t?document.querySelector(t):null},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this),r=n.data("bs.collapse"),o=l({},k,n.data(),"object"==typeof t&&t?t:{});if(!r&&o.toggle&&"string"==typeof t&&/show|hide/.test(t)&&(o.toggle=!1),r||(r=new e(this,o),n.data("bs.collapse",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return k}}]),e}();i.default(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',(function(e){"A"===e.currentTarget.tagName&&e.preventDefault();var t=i.default(this),n=f.getSelectorFromElement(this),r=[].slice.call(document.querySelectorAll(n));i.default(r).each((function(){var e=i.default(this),n=e.data("bs.collapse")?"toggle":t.data();S._jQueryInterface.call(e,n)}))})),i.default.fn[E]=S._jQueryInterface,i.default.fn[E].Constructor=S,i.default.fn[E].noConflict=function(){return i.default.fn[E]=T,S._jQueryInterface};var A="dropdown",D=i.default.fn[A],I=new RegExp("38|40|27"),N={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic",popperConfig:null},O={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string",popperConfig:"(null|object)"},R=function(){function e(e,t){this._element=e,this._popper=null,this._config=this._getConfig(t),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var t=e.prototype;return t.toggle=function(){if(!this._element.disabled&&!i.default(this._element).hasClass("disabled")){var t=i.default(this._menu).hasClass("show");e._clearMenus(),t||this.show(!0)}},t.show=function(t){if(void 0===t&&(t=!1),!(this._element.disabled||i.default(this._element).hasClass("disabled")||i.default(this._menu).hasClass("show"))){var n={relatedTarget:this._element},r=i.default.Event("show.bs.dropdown",n),a=e._getParentFromElement(this._element);if(i.default(a).trigger(r),!r.isDefaultPrevented()){if(!this._inNavbar&&t){if(void 0===o.default)throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");var s=this._element;"parent"===this._config.reference?s=a:f.isElement(this._config.reference)&&(s=this._config.reference,void 0!==this._config.reference.jquery&&(s=this._config.reference[0])),"scrollParent"!==this._config.boundary&&i.default(a).addClass("position-static"),this._popper=new o.default(s,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===i.default(a).closest(".navbar-nav").length&&i.default(document.body).children().on("mouseover",null,i.default.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),i.default(this._menu).toggleClass("show"),i.default(a).toggleClass("show").trigger(i.default.Event("shown.bs.dropdown",n))}}},t.hide=function(){if(!this._element.disabled&&!i.default(this._element).hasClass("disabled")&&i.default(this._menu).hasClass("show")){var t={relatedTarget:this._element},n=i.default.Event("hide.bs.dropdown",t),r=e._getParentFromElement(this._element);i.default(r).trigger(n),n.isDefaultPrevented()||(this._popper&&this._popper.destroy(),i.default(this._menu).toggleClass("show"),i.default(r).toggleClass("show").trigger(i.default.Event("hidden.bs.dropdown",t)))}},t.dispose=function(){i.default.removeData(this._element,"bs.dropdown"),i.default(this._element).off(".bs.dropdown"),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},t.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},t._addEventListeners=function(){var e=this;i.default(this._element).on("click.bs.dropdown",(function(t){t.preventDefault(),t.stopPropagation(),e.toggle()}))},t._getConfig=function(e){return e=l({},this.constructor.Default,i.default(this._element).data(),e),f.typeCheckConfig(A,e,this.constructor.DefaultType),e},t._getMenuElement=function(){if(!this._menu){var t=e._getParentFromElement(this._element);t&&(this._menu=t.querySelector(".dropdown-menu"))}return this._menu},t._getPlacement=function(){var e=i.default(this._element.parentNode),t="bottom-start";return e.hasClass("dropup")?t=i.default(this._menu).hasClass("dropdown-menu-right")?"top-end":"top-start":e.hasClass("dropright")?t="right-start":e.hasClass("dropleft")?t="left-start":i.default(this._menu).hasClass("dropdown-menu-right")&&(t="bottom-end"),t},t._detectNavbar=function(){return i.default(this._element).closest(".navbar").length>0},t._getOffset=function(){var e=this,t={};return"function"==typeof this._config.offset?t.fn=function(t){return t.offsets=l({},t.offsets,e._config.offset(t.offsets,e._element)||{}),t}:t.offset=this._config.offset,t},t._getPopperConfig=function(){var e={placement:this._getPlacement(),modifiers:{offset:this._getOffset(),flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),l({},e,this._config.popperConfig)},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this).data("bs.dropdown");if(n||(n=new e(this,"object"==typeof t?t:null),i.default(this).data("bs.dropdown",n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},e._clearMenus=function(t){if(!t||3!==t.which&&("keyup"!==t.type||9===t.which))for(var n=[].slice.call(document.querySelectorAll('[data-toggle="dropdown"]')),r=0,o=n.length;r<o;r++){var a=e._getParentFromElement(n[r]),s=i.default(n[r]).data("bs.dropdown"),l={relatedTarget:n[r]};if(t&&"click"===t.type&&(l.clickEvent=t),s){var u=s._menu;if(i.default(a).hasClass("show")&&!(t&&("click"===t.type&&/input|textarea/i.test(t.target.tagName)||"keyup"===t.type&&9===t.which)&&i.default.contains(a,t.target))){var f=i.default.Event("hide.bs.dropdown",l);i.default(a).trigger(f),f.isDefaultPrevented()||("ontouchstart"in document.documentElement&&i.default(document.body).children().off("mouseover",null,i.default.noop),n[r].setAttribute("aria-expanded","false"),s._popper&&s._popper.destroy(),i.default(u).removeClass("show"),i.default(a).removeClass("show").trigger(i.default.Event("hidden.bs.dropdown",l)))}}}},e._getParentFromElement=function(e){var t,n=f.getSelectorFromElement(e);return n&&(t=document.querySelector(n)),t||e.parentNode},e._dataApiKeydownHandler=function(t){if(!(/input|textarea/i.test(t.target.tagName)?32===t.which||27!==t.which&&(40!==t.which&&38!==t.which||i.default(t.target).closest(".dropdown-menu").length):!I.test(t.which))&&!this.disabled&&!i.default(this).hasClass("disabled")){var n=e._getParentFromElement(this),r=i.default(n).hasClass("show");if(r||27!==t.which){if(t.preventDefault(),t.stopPropagation(),!r||27===t.which||32===t.which)return 27===t.which&&i.default(n.querySelector('[data-toggle="dropdown"]')).trigger("focus"),void i.default(this).trigger("click");var o=[].slice.call(n.querySelectorAll(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)")).filter((function(e){return i.default(e).is(":visible")}));if(0!==o.length){var a=o.indexOf(t.target);38===t.which&&a>0&&a--,40===t.which&&a<o.length-1&&a++,a<0&&(a=0),o[a].focus()}}}},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return N}},{key:"DefaultType",get:function(){return O}}]),e}();i.default(document).on("keydown.bs.dropdown.data-api",'[data-toggle="dropdown"]',R._dataApiKeydownHandler).on("keydown.bs.dropdown.data-api",".dropdown-menu",R._dataApiKeydownHandler).on("click.bs.dropdown.data-api keyup.bs.dropdown.data-api",R._clearMenus).on("click.bs.dropdown.data-api",'[data-toggle="dropdown"]',(function(e){e.preventDefault(),e.stopPropagation(),R._jQueryInterface.call(i.default(this),"toggle")})).on("click.bs.dropdown.data-api",".dropdown form",(function(e){e.stopPropagation()})),i.default.fn[A]=R._jQueryInterface,i.default.fn[A].Constructor=R,i.default.fn[A].noConflict=function(){return i.default.fn[A]=D,R._jQueryInterface};var j=i.default.fn.modal,L={backdrop:!0,keyboard:!0,focus:!0,show:!0},P={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},B=function(){function e(e,t){this._config=this._getConfig(t),this._element=e,this._dialog=e.querySelector(".modal-dialog"),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._isTransitioning=!1,this._scrollbarWidth=0}var t=e.prototype;return t.toggle=function(e){return this._isShown?this.hide():this.show(e)},t.show=function(e){var t=this;if(!this._isShown&&!this._isTransitioning){i.default(this._element).hasClass("fade")&&(this._isTransitioning=!0);var n=i.default.Event("show.bs.modal",{relatedTarget:e});i.default(this._element).trigger(n),this._isShown||n.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),i.default(this._element).on("click.dismiss.bs.modal",'[data-dismiss="modal"]',(function(e){return t.hide(e)})),i.default(this._dialog).on("mousedown.dismiss.bs.modal",(function(){i.default(t._element).one("mouseup.dismiss.bs.modal",(function(e){i.default(e.target).is(t._element)&&(t._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return t._showElement(e)})))}},t.hide=function(e){var t=this;if(e&&e.preventDefault(),this._isShown&&!this._isTransitioning){var n=i.default.Event("hide.bs.modal");if(i.default(this._element).trigger(n),this._isShown&&!n.isDefaultPrevented()){this._isShown=!1;var r=i.default(this._element).hasClass("fade");if(r&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),i.default(document).off("focusin.bs.modal"),i.default(this._element).removeClass("show"),i.default(this._element).off("click.dismiss.bs.modal"),i.default(this._dialog).off("mousedown.dismiss.bs.modal"),r){var o=f.getTransitionDurationFromElement(this._element);i.default(this._element).one(f.TRANSITION_END,(function(e){return t._hideModal(e)})).emulateTransitionEnd(o)}else this._hideModal()}}},t.dispose=function(){[window,this._element,this._dialog].forEach((function(e){return i.default(e).off(".bs.modal")})),i.default(document).off("focusin.bs.modal"),i.default.removeData(this._element,"bs.modal"),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._isTransitioning=null,this._scrollbarWidth=null},t.handleUpdate=function(){this._adjustDialog()},t._getConfig=function(e){return e=l({},L,e),f.typeCheckConfig("modal",e,P),e},t._triggerBackdropTransition=function(){var e=this;if("static"===this._config.backdrop){var t=i.default.Event("hidePrevented.bs.modal");if(i.default(this._element).trigger(t),t.isDefaultPrevented())return;var n=this._element.scrollHeight>document.documentElement.clientHeight;n||(this._element.style.overflowY="hidden"),this._element.classList.add("modal-static");var r=f.getTransitionDurationFromElement(this._dialog);i.default(this._element).off(f.TRANSITION_END),i.default(this._element).one(f.TRANSITION_END,(function(){e._element.classList.remove("modal-static"),n||i.default(e._element).one(f.TRANSITION_END,(function(){e._element.style.overflowY=""})).emulateTransitionEnd(e._element,r)})).emulateTransitionEnd(r),this._element.focus()}else this.hide()},t._showElement=function(e){var t=this,n=i.default(this._element).hasClass("fade"),r=this._dialog?this._dialog.querySelector(".modal-body"):null;this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),i.default(this._dialog).hasClass("modal-dialog-scrollable")&&r?r.scrollTop=0:this._element.scrollTop=0,n&&f.reflow(this._element),i.default(this._element).addClass("show"),this._config.focus&&this._enforceFocus();var o=i.default.Event("shown.bs.modal",{relatedTarget:e}),a=function(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,i.default(t._element).trigger(o)};if(n){var s=f.getTransitionDurationFromElement(this._dialog);i.default(this._dialog).one(f.TRANSITION_END,a).emulateTransitionEnd(s)}else a()},t._enforceFocus=function(){var e=this;i.default(document).off("focusin.bs.modal").on("focusin.bs.modal",(function(t){document!==t.target&&e._element!==t.target&&0===i.default(e._element).has(t.target).length&&e._element.focus()}))},t._setEscapeEvent=function(){var e=this;this._isShown?i.default(this._element).on("keydown.dismiss.bs.modal",(function(t){e._config.keyboard&&27===t.which?(t.preventDefault(),e.hide()):e._config.keyboard||27!==t.which||e._triggerBackdropTransition()})):this._isShown||i.default(this._element).off("keydown.dismiss.bs.modal")},t._setResizeEvent=function(){var e=this;this._isShown?i.default(window).on("resize.bs.modal",(function(t){return e.handleUpdate(t)})):i.default(window).off("resize.bs.modal")},t._hideModal=function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._showBackdrop((function(){i.default(document.body).removeClass("modal-open"),e._resetAdjustments(),e._resetScrollbar(),i.default(e._element).trigger("hidden.bs.modal")}))},t._removeBackdrop=function(){this._backdrop&&(i.default(this._backdrop).remove(),this._backdrop=null)},t._showBackdrop=function(e){var t=this,n=i.default(this._element).hasClass("fade")?"fade":"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className="modal-backdrop",n&&this._backdrop.classList.add(n),i.default(this._backdrop).appendTo(document.body),i.default(this._element).on("click.dismiss.bs.modal",(function(e){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:e.target===e.currentTarget&&t._triggerBackdropTransition()})),n&&f.reflow(this._backdrop),i.default(this._backdrop).addClass("show"),!e)return;if(!n)return void e();var r=f.getTransitionDurationFromElement(this._backdrop);i.default(this._backdrop).one(f.TRANSITION_END,e).emulateTransitionEnd(r)}else if(!this._isShown&&this._backdrop){i.default(this._backdrop).removeClass("show");var o=function(){t._removeBackdrop(),e&&e()};if(i.default(this._element).hasClass("fade")){var a=f.getTransitionDurationFromElement(this._backdrop);i.default(this._backdrop).one(f.TRANSITION_END,o).emulateTransitionEnd(a)}else o()}else e&&e()},t._adjustDialog=function(){var e=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&e&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!e&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},t._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},t._checkScrollbar=function(){var e=document.body.getBoundingClientRect();this._isBodyOverflowing=Math.round(e.left+e.right)<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},t._setScrollbar=function(){var e=this;if(this._isBodyOverflowing){var t=[].slice.call(document.querySelectorAll(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top")),n=[].slice.call(document.querySelectorAll(".sticky-top"));i.default(t).each((function(t,n){var r=n.style.paddingRight,o=i.default(n).css("padding-right");i.default(n).data("padding-right",r).css("padding-right",parseFloat(o)+e._scrollbarWidth+"px")})),i.default(n).each((function(t,n){var r=n.style.marginRight,o=i.default(n).css("margin-right");i.default(n).data("margin-right",r).css("margin-right",parseFloat(o)-e._scrollbarWidth+"px")}));var r=document.body.style.paddingRight,o=i.default(document.body).css("padding-right");i.default(document.body).data("padding-right",r).css("padding-right",parseFloat(o)+this._scrollbarWidth+"px")}i.default(document.body).addClass("modal-open")},t._resetScrollbar=function(){var e=[].slice.call(document.querySelectorAll(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top"));i.default(e).each((function(e,t){var n=i.default(t).data("padding-right");i.default(t).removeData("padding-right"),t.style.paddingRight=n||""}));var t=[].slice.call(document.querySelectorAll(".sticky-top"));i.default(t).each((function(e,t){var n=i.default(t).data("margin-right");void 0!==n&&i.default(t).css("margin-right",n).removeData("margin-right")}));var n=i.default(document.body).data("padding-right");i.default(document.body).removeData("padding-right"),document.body.style.paddingRight=n||""},t._getScrollbarWidth=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure",document.body.appendChild(e);var t=e.getBoundingClientRect().width-e.clientWidth;return document.body.removeChild(e),t},e._jQueryInterface=function(t,n){return this.each((function(){var r=i.default(this).data("bs.modal"),o=l({},L,i.default(this).data(),"object"==typeof t&&t?t:{});if(r||(r=new e(this,o),i.default(this).data("bs.modal",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t](n)}else o.show&&r.show(n)}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return L}}]),e}();i.default(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',(function(e){var t,n=this,r=f.getSelectorFromElement(this);r&&(t=document.querySelector(r));var o=i.default(t).data("bs.modal")?"toggle":l({},i.default(t).data(),i.default(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||e.preventDefault();var a=i.default(t).one("show.bs.modal",(function(e){e.isDefaultPrevented()||a.one("hidden.bs.modal",(function(){i.default(n).is(":visible")&&n.focus()}))}));B._jQueryInterface.call(i.default(t),o,this)})),i.default.fn.modal=B._jQueryInterface,i.default.fn.modal.Constructor=B,i.default.fn.modal.noConflict=function(){return i.default.fn.modal=j,B._jQueryInterface};var z=["background","cite","href","itemtype","longdesc","poster","src","xlink:href"],F={"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},U=/^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/gi,M=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;function H(e,t,n){if(0===e.length)return e;if(n&&"function"==typeof n)return n(e);for(var r=(new window.DOMParser).parseFromString(e,"text/html"),i=Object.keys(t),o=[].slice.call(r.body.querySelectorAll("*")),a=function(e,n){var r=o[e],a=r.nodeName.toLowerCase();if(-1===i.indexOf(r.nodeName.toLowerCase()))return r.parentNode.removeChild(r),"continue";var s=[].slice.call(r.attributes),l=[].concat(t["*"]||[],t[a]||[]);s.forEach((function(e){(function(e,t){var n=e.nodeName.toLowerCase();if(-1!==t.indexOf(n))return-1===z.indexOf(n)||Boolean(e.nodeValue.match(U)||e.nodeValue.match(M));for(var r=t.filter((function(e){return e instanceof RegExp})),i=0,o=r.length;i<o;i++)if(n.match(r[i]))return!0;return!1})(e,l)||r.removeAttribute(e.nodeName)}))},s=0,l=o.length;s<l;s++)a(s);return r.body.innerHTML}var q="tooltip",W=i.default.fn[q],Y=new RegExp("(^|\\s)bs-tooltip\\S+","g"),Z=["sanitize","whiteList","sanitizeFn"],$={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string|function)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)",sanitize:"boolean",sanitizeFn:"(null|function)",whiteList:"object",popperConfig:"(null|object)"},Q={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},X={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent",sanitize:!0,sanitizeFn:null,whiteList:F,popperConfig:null},V={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},G=function(){function e(e,t){if(void 0===o.default)throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=e,this.config=this._getConfig(t),this.tip=null,this._setListeners()}var t=e.prototype;return t.enable=function(){this._isEnabled=!0},t.disable=function(){this._isEnabled=!1},t.toggleEnabled=function(){this._isEnabled=!this._isEnabled},t.toggle=function(e){if(this._isEnabled)if(e){var t=this.constructor.DATA_KEY,n=i.default(e.currentTarget).data(t);n||(n=new this.constructor(e.currentTarget,this._getDelegateConfig()),i.default(e.currentTarget).data(t,n)),n._activeTrigger.click=!n._activeTrigger.click,n._isWithActiveTrigger()?n._enter(null,n):n._leave(null,n)}else{if(i.default(this.getTipElement()).hasClass("show"))return void this._leave(null,this);this._enter(null,this)}},t.dispose=function(){clearTimeout(this._timeout),i.default.removeData(this.element,this.constructor.DATA_KEY),i.default(this.element).off(this.constructor.EVENT_KEY),i.default(this.element).closest(".modal").off("hide.bs.modal",this._hideModalHandler),this.tip&&i.default(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},t.show=function(){var e=this;if("none"===i.default(this.element).css("display"))throw new Error("Please use show on visible elements");var t=i.default.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){i.default(this.element).trigger(t);var n=f.findShadowRoot(this.element),r=i.default.contains(null!==n?n:this.element.ownerDocument.documentElement,this.element);if(t.isDefaultPrevented()||!r)return;var a=this.getTipElement(),s=f.getUID(this.constructor.NAME);a.setAttribute("id",s),this.element.setAttribute("aria-describedby",s),this.setContent(),this.config.animation&&i.default(a).addClass("fade");var l="function"==typeof this.config.placement?this.config.placement.call(this,a,this.element):this.config.placement,u=this._getAttachment(l);this.addAttachmentClass(u);var c=this._getContainer();i.default(a).data(this.constructor.DATA_KEY,this),i.default.contains(this.element.ownerDocument.documentElement,this.tip)||i.default(a).appendTo(c),i.default(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new o.default(this.element,a,this._getPopperConfig(u)),i.default(a).addClass("show"),"ontouchstart"in document.documentElement&&i.default(document.body).children().on("mouseover",null,i.default.noop);var d=function(){e.config.animation&&e._fixTransition();var t=e._hoverState;e._hoverState=null,i.default(e.element).trigger(e.constructor.Event.SHOWN),"out"===t&&e._leave(null,e)};if(i.default(this.tip).hasClass("fade")){var h=f.getTransitionDurationFromElement(this.tip);i.default(this.tip).one(f.TRANSITION_END,d).emulateTransitionEnd(h)}else d()}},t.hide=function(e){var t=this,n=this.getTipElement(),r=i.default.Event(this.constructor.Event.HIDE),o=function(){"show"!==t._hoverState&&n.parentNode&&n.parentNode.removeChild(n),t._cleanTipClass(),t.element.removeAttribute("aria-describedby"),i.default(t.element).trigger(t.constructor.Event.HIDDEN),null!==t._popper&&t._popper.destroy(),e&&e()};if(i.default(this.element).trigger(r),!r.isDefaultPrevented()){if(i.default(n).removeClass("show"),"ontouchstart"in document.documentElement&&i.default(document.body).children().off("mouseover",null,i.default.noop),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1,i.default(this.tip).hasClass("fade")){var a=f.getTransitionDurationFromElement(n);i.default(n).one(f.TRANSITION_END,o).emulateTransitionEnd(a)}else o();this._hoverState=""}},t.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},t.isWithContent=function(){return Boolean(this.getTitle())},t.addAttachmentClass=function(e){i.default(this.getTipElement()).addClass("bs-tooltip-"+e)},t.getTipElement=function(){return this.tip=this.tip||i.default(this.config.template)[0],this.tip},t.setContent=function(){var e=this.getTipElement();this.setElementContent(i.default(e.querySelectorAll(".tooltip-inner")),this.getTitle()),i.default(e).removeClass("fade show")},t.setElementContent=function(e,t){"object"!=typeof t||!t.nodeType&&!t.jquery?this.config.html?(this.config.sanitize&&(t=H(t,this.config.whiteList,this.config.sanitizeFn)),e.html(t)):e.text(t):this.config.html?i.default(t).parent().is(e)||e.empty().append(t):e.text(i.default(t).text())},t.getTitle=function(){var e=this.element.getAttribute("data-original-title");return e||(e="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),e},t._getPopperConfig=function(e){var t=this;return l({},{placement:e,modifiers:{offset:this._getOffset(),flip:{behavior:this.config.fallbackPlacement},arrow:{element:".arrow"},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(e){e.originalPlacement!==e.placement&&t._handlePopperPlacementChange(e)},onUpdate:function(e){return t._handlePopperPlacementChange(e)}},this.config.popperConfig)},t._getOffset=function(){var e=this,t={};return"function"==typeof this.config.offset?t.fn=function(t){return t.offsets=l({},t.offsets,e.config.offset(t.offsets,e.element)||{}),t}:t.offset=this.config.offset,t},t._getContainer=function(){return!1===this.config.container?document.body:f.isElement(this.config.container)?i.default(this.config.container):i.default(document).find(this.config.container)},t._getAttachment=function(e){return Q[e.toUpperCase()]},t._setListeners=function(){var e=this;this.config.trigger.split(" ").forEach((function(t){if("click"===t)i.default(e.element).on(e.constructor.Event.CLICK,e.config.selector,(function(t){return e.toggle(t)}));else if("manual"!==t){var n="hover"===t?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,r="hover"===t?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;i.default(e.element).on(n,e.config.selector,(function(t){return e._enter(t)})).on(r,e.config.selector,(function(t){return e._leave(t)}))}})),this._hideModalHandler=function(){e.element&&e.hide()},i.default(this.element).closest(".modal").on("hide.bs.modal",this._hideModalHandler),this.config.selector?this.config=l({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},t._fixTitle=function(){var e=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==e)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},t._enter=function(e,t){var n=this.constructor.DATA_KEY;(t=t||i.default(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),i.default(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusin"===e.type?"focus":"hover"]=!0),i.default(t.getTipElement()).hasClass("show")||"show"===t._hoverState?t._hoverState="show":(clearTimeout(t._timeout),t._hoverState="show",t.config.delay&&t.config.delay.show?t._timeout=setTimeout((function(){"show"===t._hoverState&&t.show()}),t.config.delay.show):t.show())},t._leave=function(e,t){var n=this.constructor.DATA_KEY;(t=t||i.default(e.currentTarget).data(n))||(t=new this.constructor(e.currentTarget,this._getDelegateConfig()),i.default(e.currentTarget).data(n,t)),e&&(t._activeTrigger["focusout"===e.type?"focus":"hover"]=!1),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState="out",t.config.delay&&t.config.delay.hide?t._timeout=setTimeout((function(){"out"===t._hoverState&&t.hide()}),t.config.delay.hide):t.hide())},t._isWithActiveTrigger=function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1},t._getConfig=function(e){var t=i.default(this.element).data();return Object.keys(t).forEach((function(e){-1!==Z.indexOf(e)&&delete t[e]})),"number"==typeof(e=l({},this.constructor.Default,t,"object"==typeof e&&e?e:{})).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),f.typeCheckConfig(q,e,this.constructor.DefaultType),e.sanitize&&(e.template=H(e.template,e.whiteList,e.sanitizeFn)),e},t._getDelegateConfig=function(){var e={};if(this.config)for(var t in this.config)this.constructor.Default[t]!==this.config[t]&&(e[t]=this.config[t]);return e},t._cleanTipClass=function(){var e=i.default(this.getTipElement()),t=e.attr("class").match(Y);null!==t&&t.length&&e.removeClass(t.join(""))},t._handlePopperPlacementChange=function(e){this.tip=e.instance.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(e.placement))},t._fixTransition=function(){var e=this.getTipElement(),t=this.config.animation;null===e.getAttribute("x-placement")&&(i.default(e).removeClass("fade"),this.config.animation=!1,this.hide(),this.show(),this.config.animation=t)},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this),r=n.data("bs.tooltip"),o="object"==typeof t&&t;if((r||!/dispose|hide/.test(t))&&(r||(r=new e(this,o),n.data("bs.tooltip",r)),"string"==typeof t)){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return X}},{key:"NAME",get:function(){return q}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return V}},{key:"EVENT_KEY",get:function(){return".bs.tooltip"}},{key:"DefaultType",get:function(){return $}}]),e}();i.default.fn[q]=G._jQueryInterface,i.default.fn[q].Constructor=G,i.default.fn[q].noConflict=function(){return i.default.fn[q]=W,G._jQueryInterface};var K="popover",J=i.default.fn[K],ee=new RegExp("(^|\\s)bs-popover\\S+","g"),te=l({},G.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),ne=l({},G.DefaultType,{content:"(string|element|function)"}),re={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},ie=function(e){var t,n;function r(){return e.apply(this,arguments)||this}n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n;var o=r.prototype;return o.isWithContent=function(){return this.getTitle()||this._getContent()},o.addAttachmentClass=function(e){i.default(this.getTipElement()).addClass("bs-popover-"+e)},o.getTipElement=function(){return this.tip=this.tip||i.default(this.config.template)[0],this.tip},o.setContent=function(){var e=i.default(this.getTipElement());this.setElementContent(e.find(".popover-header"),this.getTitle());var t=this._getContent();"function"==typeof t&&(t=t.call(this.element)),this.setElementContent(e.find(".popover-body"),t),e.removeClass("fade show")},o._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},o._cleanTipClass=function(){var e=i.default(this.getTipElement()),t=e.attr("class").match(ee);null!==t&&t.length>0&&e.removeClass(t.join(""))},r._jQueryInterface=function(e){return this.each((function(){var t=i.default(this).data("bs.popover"),n="object"==typeof e?e:null;if((t||!/dispose|hide/.test(e))&&(t||(t=new r(this,n),i.default(this).data("bs.popover",t)),"string"==typeof e)){if(void 0===t[e])throw new TypeError('No method named "'+e+'"');t[e]()}}))},s(r,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return te}},{key:"NAME",get:function(){return K}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return re}},{key:"EVENT_KEY",get:function(){return".bs.popover"}},{key:"DefaultType",get:function(){return ne}}]),r}(G);i.default.fn[K]=ie._jQueryInterface,i.default.fn[K].Constructor=ie,i.default.fn[K].noConflict=function(){return i.default.fn[K]=J,ie._jQueryInterface};var oe="scrollspy",ae=i.default.fn[oe],se={offset:10,method:"auto",target:""},le={offset:"number",method:"string",target:"(string|element)"},ue=function(){function e(e,t){var n=this;this._element=e,this._scrollElement="BODY"===e.tagName?window:e,this._config=this._getConfig(t),this._selector=this._config.target+" .nav-link,"+this._config.target+" .list-group-item,"+this._config.target+" .dropdown-item",this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,i.default(this._scrollElement).on("scroll.bs.scrollspy",(function(e){return n._process(e)})),this.refresh(),this._process()}var t=e.prototype;return t.refresh=function(){var e=this,t=this._scrollElement===this._scrollElement.window?"offset":"position",n="auto"===this._config.method?t:this._config.method,r="position"===n?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),[].slice.call(document.querySelectorAll(this._selector)).map((function(e){var t,o=f.getSelectorFromElement(e);if(o&&(t=document.querySelector(o)),t){var a=t.getBoundingClientRect();if(a.width||a.height)return[i.default(t)[n]().top+r,o]}return null})).filter((function(e){return e})).sort((function(e,t){return e[0]-t[0]})).forEach((function(t){e._offsets.push(t[0]),e._targets.push(t[1])}))},t.dispose=function(){i.default.removeData(this._element,"bs.scrollspy"),i.default(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},t._getConfig=function(e){if("string"!=typeof(e=l({},se,"object"==typeof e&&e?e:{})).target&&f.isElement(e.target)){var t=i.default(e.target).attr("id");t||(t=f.getUID(oe),i.default(e.target).attr("id",t)),e.target="#"+t}return f.typeCheckConfig(oe,e,le),e},t._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},t._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},t._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},t._process=function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var i=this._offsets.length;i--;)this._activeTarget!==this._targets[i]&&e>=this._offsets[i]&&(void 0===this._offsets[i+1]||e<this._offsets[i+1])&&this._activate(this._targets[i])}},t._activate=function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",").map((function(t){return t+'[data-target="'+e+'"],'+t+'[href="'+e+'"]'})),n=i.default([].slice.call(document.querySelectorAll(t.join(","))));n.hasClass("dropdown-item")?(n.closest(".dropdown").find(".dropdown-toggle").addClass("active"),n.addClass("active")):(n.addClass("active"),n.parents(".nav, .list-group").prev(".nav-link, .list-group-item").addClass("active"),n.parents(".nav, .list-group").prev(".nav-item").children(".nav-link").addClass("active")),i.default(this._scrollElement).trigger("activate.bs.scrollspy",{relatedTarget:e})},t._clear=function(){[].slice.call(document.querySelectorAll(this._selector)).filter((function(e){return e.classList.contains("active")})).forEach((function(e){return e.classList.remove("active")}))},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this).data("bs.scrollspy");if(n||(n=new e(this,"object"==typeof t&&t),i.default(this).data("bs.scrollspy",n)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'+t+'"');n[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"Default",get:function(){return se}}]),e}();i.default(window).on("load.bs.scrollspy.data-api",(function(){for(var e=[].slice.call(document.querySelectorAll('[data-spy="scroll"]')),t=e.length;t--;){var n=i.default(e[t]);ue._jQueryInterface.call(n,n.data())}})),i.default.fn[oe]=ue._jQueryInterface,i.default.fn[oe].Constructor=ue,i.default.fn[oe].noConflict=function(){return i.default.fn[oe]=ae,ue._jQueryInterface};var fe=i.default.fn.tab,ce=function(){function e(e){this._element=e}var t=e.prototype;return t.show=function(){var e=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&i.default(this._element).hasClass("active")||i.default(this._element).hasClass("disabled"))){var t,n,r=i.default(this._element).closest(".nav, .list-group")[0],o=f.getSelectorFromElement(this._element);if(r){var a="UL"===r.nodeName||"OL"===r.nodeName?"> li > .active":".active";n=(n=i.default.makeArray(i.default(r).find(a)))[n.length-1]}var s=i.default.Event("hide.bs.tab",{relatedTarget:this._element}),l=i.default.Event("show.bs.tab",{relatedTarget:n});if(n&&i.default(n).trigger(s),i.default(this._element).trigger(l),!l.isDefaultPrevented()&&!s.isDefaultPrevented()){o&&(t=document.querySelector(o)),this._activate(this._element,r);var u=function(){var t=i.default.Event("hidden.bs.tab",{relatedTarget:e._element}),r=i.default.Event("shown.bs.tab",{relatedTarget:n});i.default(n).trigger(t),i.default(e._element).trigger(r)};t?this._activate(t,t.parentNode,u):u()}}},t.dispose=function(){i.default.removeData(this._element,"bs.tab"),this._element=null},t._activate=function(e,t,n){var r=this,o=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?i.default(t).children(".active"):i.default(t).find("> li > .active"))[0],a=n&&o&&i.default(o).hasClass("fade"),s=function(){return r._transitionComplete(e,o,n)};if(o&&a){var l=f.getTransitionDurationFromElement(o);i.default(o).removeClass("show").one(f.TRANSITION_END,s).emulateTransitionEnd(l)}else s()},t._transitionComplete=function(e,t,n){if(t){i.default(t).removeClass("active");var r=i.default(t.parentNode).find("> .dropdown-menu .active")[0];r&&i.default(r).removeClass("active"),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}if(i.default(e).addClass("active"),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),f.reflow(e),e.classList.contains("fade")&&e.classList.add("show"),e.parentNode&&i.default(e.parentNode).hasClass("dropdown-menu")){var o=i.default(e).closest(".dropdown")[0];if(o){var a=[].slice.call(o.querySelectorAll(".dropdown-toggle"));i.default(a).addClass("active")}e.setAttribute("aria-expanded",!0)}n&&n()},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this),r=n.data("bs.tab");if(r||(r=new e(this),n.data("bs.tab",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t]()}}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}}]),e}();i.default(document).on("click.bs.tab.data-api",'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',(function(e){e.preventDefault(),ce._jQueryInterface.call(i.default(this),"show")})),i.default.fn.tab=ce._jQueryInterface,i.default.fn.tab.Constructor=ce,i.default.fn.tab.noConflict=function(){return i.default.fn.tab=fe,ce._jQueryInterface};var de=i.default.fn.toast,he={animation:"boolean",autohide:"boolean",delay:"number"},pe={animation:!0,autohide:!0,delay:500},me=function(){function e(e,t){this._element=e,this._config=this._getConfig(t),this._timeout=null,this._setListeners()}var t=e.prototype;return t.show=function(){var e=this,t=i.default.Event("show.bs.toast");if(i.default(this._element).trigger(t),!t.isDefaultPrevented()){this._clearTimeout(),this._config.animation&&this._element.classList.add("fade");var n=function(){e._element.classList.remove("showing"),e._element.classList.add("show"),i.default(e._element).trigger("shown.bs.toast"),e._config.autohide&&(e._timeout=setTimeout((function(){e.hide()}),e._config.delay))};if(this._element.classList.remove("hide"),f.reflow(this._element),this._element.classList.add("showing"),this._config.animation){var r=f.getTransitionDurationFromElement(this._element);i.default(this._element).one(f.TRANSITION_END,n).emulateTransitionEnd(r)}else n()}},t.hide=function(){if(this._element.classList.contains("show")){var e=i.default.Event("hide.bs.toast");i.default(this._element).trigger(e),e.isDefaultPrevented()||this._close()}},t.dispose=function(){this._clearTimeout(),this._element.classList.contains("show")&&this._element.classList.remove("show"),i.default(this._element).off("click.dismiss.bs.toast"),i.default.removeData(this._element,"bs.toast"),this._element=null,this._config=null},t._getConfig=function(e){return e=l({},pe,i.default(this._element).data(),"object"==typeof e&&e?e:{}),f.typeCheckConfig("toast",e,this.constructor.DefaultType),e},t._setListeners=function(){var e=this;i.default(this._element).on("click.dismiss.bs.toast",'[data-dismiss="toast"]',(function(){return e.hide()}))},t._close=function(){var e=this,t=function(){e._element.classList.add("hide"),i.default(e._element).trigger("hidden.bs.toast")};if(this._element.classList.remove("show"),this._config.animation){var n=f.getTransitionDurationFromElement(this._element);i.default(this._element).one(f.TRANSITION_END,t).emulateTransitionEnd(n)}else t()},t._clearTimeout=function(){clearTimeout(this._timeout),this._timeout=null},e._jQueryInterface=function(t){return this.each((function(){var n=i.default(this),r=n.data("bs.toast");if(r||(r=new e(this,"object"==typeof t&&t),n.data("bs.toast",r)),"string"==typeof t){if(void 0===r[t])throw new TypeError('No method named "'+t+'"');r[t](this)}}))},s(e,null,[{key:"VERSION",get:function(){return"4.5.3"}},{key:"DefaultType",get:function(){return he}},{key:"Default",get:function(){return pe}}]),e}();i.default.fn.toast=me._jQueryInterface,i.default.fn.toast.Constructor=me,i.default.fn.toast.noConflict=function(){return i.default.fn.toast=de,me._jQueryInterface},e.Alert=h,e.Button=m,e.Carousel=x,e.Collapse=S,e.Dropdown=R,e.Modal=B,e.Popover=ie,e.Scrollspy=ue,e.Tab=ce,e.Toast=me,e.Tooltip=G,e.Util=f,Object.defineProperty(e,"__esModule",{value:!0})}(t,n(1),n(4))},function(e,t,n){"use strict";n.r(t),function(e){
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.1
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document&&"undefined"!=typeof navigator,r=function(){for(var e=["Edge","Trident","Firefox"],t=0;t<e.length;t+=1)if(n&&navigator.userAgent.indexOf(e[t])>=0)return 1;return 0}();var i=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then((function(){t=!1,e()})))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout((function(){t=!1,e()}),r))}};function o(e){return e&&"[object Function]"==={}.toString.call(e)}function a(e,t){if(1!==e.nodeType)return[];var n=e.ownerDocument.defaultView.getComputedStyle(e,null);return t?n[t]:n}function s(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function l(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=a(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/(auto|scroll|overlay)/.test(n+i+r)?e:l(s(e))}function u(e){return e&&e.referenceNode?e.referenceNode:e}var f=n&&!(!window.MSInputMethodContext||!document.documentMode),c=n&&/MSIE 10/.test(navigator.userAgent);function d(e){return 11===e?f:10===e?c:f||c}function h(e){if(!e)return document.documentElement;for(var t=d(10)?document.body:null,n=e.offsetParent||null;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(n.nodeName)&&"static"===a(n,"position")?h(n):n:e?e.ownerDocument.documentElement:document.documentElement}function p(e){return null!==e.parentNode?p(e.parentNode):e}function m(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,i=n?t:e,o=document.createRange();o.setStart(r,0),o.setEnd(i,0);var a,s,l=o.commonAncestorContainer;if(e!==l&&t!==l||r.contains(i))return"BODY"===(s=(a=l).nodeName)||"HTML"!==s&&h(a.firstElementChild)!==a?h(l):l;var u=p(e);return u.host?m(u.host,t):m(e,p(t).host)}function g(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top",n="top"===t?"scrollTop":"scrollLeft",r=e.nodeName;if("BODY"===r||"HTML"===r){var i=e.ownerDocument.documentElement,o=e.ownerDocument.scrollingElement||i;return o[n]}return e[n]}function v(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=g(t,"top"),i=g(t,"left"),o=n?-1:1;return e.top+=r*o,e.bottom+=r*o,e.left+=i*o,e.right+=i*o,e}function y(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"])+parseFloat(e["border"+r+"Width"])}function _(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],d(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function b(e){var t=e.body,n=e.documentElement,r=d(10)&&getComputedStyle(n);return{height:_("Height",t,n,r),width:_("Width",t,n,r)}}var w=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},x=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),E=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},T=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function k(e){return T({},e,{right:e.left+e.width,bottom:e.top+e.height})}function C(e){var t={};try{if(d(10)){t=e.getBoundingClientRect();var n=g(e,"top"),r=g(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var i={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},o="HTML"===e.nodeName?b(e.ownerDocument):{},s=o.width||e.clientWidth||i.width,l=o.height||e.clientHeight||i.height,u=e.offsetWidth-s,f=e.offsetHeight-l;if(u||f){var c=a(e);u-=y(c,"x"),f-=y(c,"y"),i.width-=u,i.height-=f}return k(i)}function S(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=d(10),i="HTML"===t.nodeName,o=C(e),s=C(t),u=l(e),f=a(t),c=parseFloat(f.borderTopWidth),h=parseFloat(f.borderLeftWidth);n&&i&&(s.top=Math.max(s.top,0),s.left=Math.max(s.left,0));var p=k({top:o.top-s.top-c,left:o.left-s.left-h,width:o.width,height:o.height});if(p.marginTop=0,p.marginLeft=0,!r&&i){var m=parseFloat(f.marginTop),g=parseFloat(f.marginLeft);p.top-=c-m,p.bottom-=c-m,p.left-=h-g,p.right-=h-g,p.marginTop=m,p.marginLeft=g}return(r&&!n?t.contains(u):t===u&&"BODY"!==u.nodeName)&&(p=v(p,t)),p}function A(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=S(e,n),i=Math.max(n.clientWidth,window.innerWidth||0),o=Math.max(n.clientHeight,window.innerHeight||0),a=t?0:g(n),s=t?0:g(n,"left"),l={top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:i,height:o};return k(l)}function D(e){var t=e.nodeName;if("BODY"===t||"HTML"===t)return!1;if("fixed"===a(e,"position"))return!0;var n=s(e);return!!n&&D(n)}function I(e){if(!e||!e.parentElement||d())return document.documentElement;for(var t=e.parentElement;t&&"none"===a(t,"transform");)t=t.parentElement;return t||document.documentElement}function N(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o={top:0,left:0},a=i?I(e):m(e,u(t));if("viewport"===r)o=A(a,i);else{var f=void 0;"scrollParent"===r?"BODY"===(f=l(s(t))).nodeName&&(f=e.ownerDocument.documentElement):f="window"===r?e.ownerDocument.documentElement:r;var c=S(f,a,i);if("HTML"!==f.nodeName||D(a))o=c;else{var d=b(e.ownerDocument),h=d.height,p=d.width;o.top+=c.top-c.marginTop,o.bottom=h+c.top,o.left+=c.left-c.marginLeft,o.right=p+c.left}}var g="number"==typeof(n=n||0);return o.left+=g?n:n.left||0,o.top+=g?n:n.top||0,o.right-=g?n:n.right||0,o.bottom-=g?n:n.bottom||0,o}function O(e){return e.width*e.height}function R(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var a=N(n,r,o,i),s={top:{width:a.width,height:t.top-a.top},right:{width:a.right-t.right,height:a.height},bottom:{width:a.width,height:a.bottom-t.bottom},left:{width:t.left-a.left,height:a.height}},l=Object.keys(s).map((function(e){return T({key:e},s[e],{area:O(s[e])})})).sort((function(e,t){return t.area-e.area})),u=l.filter((function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight})),f=u.length>0?u[0].key:l[0].key,c=e.split("-")[1];return f+(c?"-"+c:"")}function j(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,i=r?I(t):m(t,u(n));return S(n,i,r)}function L(e){var t=e.ownerDocument.defaultView.getComputedStyle(e),n=parseFloat(t.marginTop||0)+parseFloat(t.marginBottom||0),r=parseFloat(t.marginLeft||0)+parseFloat(t.marginRight||0);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function P(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,(function(e){return t[e]}))}function B(e,t,n){n=n.split("-")[0];var r=L(e),i={width:r.width,height:r.height},o=-1!==["right","left"].indexOf(n),a=o?"top":"left",s=o?"left":"top",l=o?"height":"width",u=o?"width":"height";return i[a]=t[a]+t[l]/2-r[l]/2,i[s]=n===s?t[s]-r[u]:t[P(s)],i}function z(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function F(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex((function(e){return e[t]===n}));var r=z(e,(function(e){return e[t]===n}));return e.indexOf(r)}(e,"name",n))).forEach((function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&o(n)&&(t.offsets.popper=k(t.offsets.popper),t.offsets.reference=k(t.offsets.reference),t=n(t,e))})),t}function U(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=j(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=R(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=B(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=F(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}function M(e,t){return e.some((function(e){var n=e.name;return e.enabled&&n===t}))}function H(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var i=t[r],o=i?""+i+n:e;if(void 0!==document.body.style[o])return o}return null}function q(){return this.state.isDestroyed=!0,M(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[H("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}function W(e){var t=e.ownerDocument;return t?t.defaultView:window}function Y(e,t,n,r){n.updateBound=r,W(e).addEventListener("resize",n.updateBound,{passive:!0});var i=l(e);return function e(t,n,r,i){var o="BODY"===t.nodeName,a=o?t.ownerDocument.defaultView:t;a.addEventListener(n,r,{passive:!0}),o||e(l(a.parentNode),n,r,i),i.push(a)}(i,"scroll",n.updateBound,n.scrollParents),n.scrollElement=i,n.eventsEnabled=!0,n}function Z(){this.state.eventsEnabled||(this.state=Y(this.reference,this.options,this.state,this.scheduleUpdate))}function $(){var e,t;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(e=this.reference,t=this.state,W(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach((function(e){e.removeEventListener("scroll",t.updateBound)})),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t))}function Q(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function X(e,t){Object.keys(t).forEach((function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&Q(t[n])&&(r="px"),e.style[n]=t[n]+r}))}var V=n&&/Firefox/i.test(navigator.userAgent);function G(e,t,n){var r=z(e,(function(e){return e.name===t})),i=!!r&&e.some((function(e){return e.name===n&&e.enabled&&e.order<r.order}));if(!i){var o="`"+t+"`",a="`"+n+"`";console.warn(a+" modifier is required by "+o+" modifier in order to work, be sure to include it before "+o+"!")}return i}var K=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],J=K.slice(3);function ee(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=J.indexOf(e),r=J.slice(n+1).concat(J.slice(0,n));return t?r.reverse():r}var te="flip",ne="clockwise",re="counterclockwise";function ie(e,t,n,r){var i=[0,0],o=-1!==["right","left"].indexOf(r),a=e.split(/(\+|\-)/).map((function(e){return e.trim()})),s=a.indexOf(z(a,(function(e){return-1!==e.search(/,|\s/)})));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,u=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(u=u.map((function(e,r){var i=(1===r?!o:o)?"height":"width",a=!1;return e.reduce((function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,a=!0,e):a?(e[e.length-1]+=t,a=!1,e):e.concat(t)}),[]).map((function(e){return function(e,t,n,r){var i=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),o=+i[1],a=i[2];if(!o)return e;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=n;break;case"%":case"%r":default:s=r}return k(s)[t]/100*o}if("vh"===a||"vw"===a){return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*o}return o}(e,i,t,n)}))}))).forEach((function(e,t){e.forEach((function(n,r){Q(n)&&(i[t]+=n*("-"===e[r-1]?-1:1))}))})),i}var oe={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var i=e.offsets,o=i.reference,a=i.popper,s=-1!==["bottom","top"].indexOf(n),l=s?"left":"top",u=s?"width":"height",f={start:E({},l,o[l]),end:E({},l,o[l]+o[u]-a[u])};e.offsets.popper=T({},a,f[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,i=e.offsets,o=i.popper,a=i.reference,s=r.split("-")[0],l=void 0;return l=Q(+n)?[+n,0]:ie(n,o,a,s),"left"===s?(o.top+=l[0],o.left-=l[1]):"right"===s?(o.top+=l[0],o.left+=l[1]):"top"===s?(o.left+=l[0],o.top-=l[1]):"bottom"===s&&(o.left+=l[0],o.top+=l[1]),e.popper=o,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||h(e.instance.popper);e.instance.reference===n&&(n=h(n));var r=H("transform"),i=e.instance.popper.style,o=i.top,a=i.left,s=i[r];i.top="",i.left="",i[r]="";var l=N(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);i.top=o,i.left=a,i[r]=s,t.boundaries=l;var u=t.priority,f=e.offsets.popper,c={primary:function(e){var n=f[e];return f[e]<l[e]&&!t.escapeWithReference&&(n=Math.max(f[e],l[e])),E({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=f[n];return f[e]>l[e]&&!t.escapeWithReference&&(r=Math.min(f[n],l[e]-("right"===e?f.width:f.height))),E({},n,r)}};return u.forEach((function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";f=T({},f,c[t](e))})),e.offsets.popper=f,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,i=e.placement.split("-")[0],o=Math.floor,a=-1!==["top","bottom"].indexOf(i),s=a?"right":"bottom",l=a?"left":"top",u=a?"width":"height";return n[s]<o(r[l])&&(e.offsets.popper[l]=o(r[l])-n[u]),n[l]>o(r[s])&&(e.offsets.popper[l]=o(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!G(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var i=e.placement.split("-")[0],o=e.offsets,s=o.popper,l=o.reference,u=-1!==["left","right"].indexOf(i),f=u?"height":"width",c=u?"Top":"Left",d=c.toLowerCase(),h=u?"left":"top",p=u?"bottom":"right",m=L(r)[f];l[p]-m<s[d]&&(e.offsets.popper[d]-=s[d]-(l[p]-m)),l[d]+m>s[p]&&(e.offsets.popper[d]+=l[d]+m-s[p]),e.offsets.popper=k(e.offsets.popper);var g=l[d]+l[f]/2-m/2,v=a(e.instance.popper),y=parseFloat(v["margin"+c]),_=parseFloat(v["border"+c+"Width"]),b=g-e.offsets.popper[d]-y-_;return b=Math.max(Math.min(s[f]-m,b),0),e.arrowElement=r,e.offsets.arrow=(E(n={},d,Math.round(b)),E(n,h,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(M(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=N(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],i=P(r),o=e.placement.split("-")[1]||"",a=[];switch(t.behavior){case te:a=[r,i];break;case ne:a=ee(r);break;case re:a=ee(r,!0);break;default:a=t.behavior}return a.forEach((function(s,l){if(r!==s||a.length===l+1)return e;r=e.placement.split("-")[0],i=P(r);var u=e.offsets.popper,f=e.offsets.reference,c=Math.floor,d="left"===r&&c(u.right)>c(f.left)||"right"===r&&c(u.left)<c(f.right)||"top"===r&&c(u.bottom)>c(f.top)||"bottom"===r&&c(u.top)<c(f.bottom),h=c(u.left)<c(n.left),p=c(u.right)>c(n.right),m=c(u.top)<c(n.top),g=c(u.bottom)>c(n.bottom),v="left"===r&&h||"right"===r&&p||"top"===r&&m||"bottom"===r&&g,y=-1!==["top","bottom"].indexOf(r),_=!!t.flipVariations&&(y&&"start"===o&&h||y&&"end"===o&&p||!y&&"start"===o&&m||!y&&"end"===o&&g),b=!!t.flipVariationsByContent&&(y&&"start"===o&&p||y&&"end"===o&&h||!y&&"start"===o&&g||!y&&"end"===o&&m),w=_||b;(d||v||w)&&(e.flipped=!0,(d||v)&&(r=a[l+1]),w&&(o=function(e){return"end"===e?"start":"start"===e?"end":e}(o)),e.placement=r+(o?"-"+o:""),e.offsets.popper=T({},e.offsets.popper,B(e.instance.popper,e.offsets.reference,e.placement)),e=F(e.instance.modifiers,e,"flip"))})),e},behavior:"flip",padding:5,boundariesElement:"viewport",flipVariations:!1,flipVariationsByContent:!1},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,i=r.popper,o=r.reference,a=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return i[a?"left":"top"]=o[n]-(s?i[a?"width":"height"]:0),e.placement=P(t),e.offsets.popper=k(i),e}},hide:{order:800,enabled:!0,fn:function(e){if(!G(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=z(e.instance.modifiers,(function(e){return"preventOverflow"===e.name})).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,i=e.offsets.popper,o=z(e.instance.modifiers,(function(e){return"applyStyle"===e.name})).gpuAcceleration;void 0!==o&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==o?o:t.gpuAcceleration,s=h(e.instance.popper),l=C(s),u={position:i.position},f=function(e,t){var n=e.offsets,r=n.popper,i=n.reference,o=Math.round,a=Math.floor,s=function(e){return e},l=o(i.width),u=o(r.width),f=-1!==["left","right"].indexOf(e.placement),c=-1!==e.placement.indexOf("-"),d=t?f||c||l%2==u%2?o:a:s,h=t?o:s;return{left:d(l%2==1&&u%2==1&&!c&&t?r.left-1:r.left),top:h(r.top),bottom:h(r.bottom),right:d(r.right)}}(e,window.devicePixelRatio<2||!V),c="bottom"===n?"top":"bottom",d="right"===r?"left":"right",p=H("transform"),m=void 0,g=void 0;if(g="bottom"===c?"HTML"===s.nodeName?-s.clientHeight+f.bottom:-l.height+f.bottom:f.top,m="right"===d?"HTML"===s.nodeName?-s.clientWidth+f.right:-l.width+f.right:f.left,a&&p)u[p]="translate3d("+m+"px, "+g+"px, 0)",u[c]=0,u[d]=0,u.willChange="transform";else{var v="bottom"===c?-1:1,y="right"===d?-1:1;u[c]=g*v,u[d]=m*y,u.willChange=c+", "+d}var _={"x-placement":e.placement};return e.attributes=T({},_,e.attributes),e.styles=T({},u,e.styles),e.arrowStyles=T({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){var t,n;return X(e.instance.popper,e.styles),t=e.instance.popper,n=e.attributes,Object.keys(n).forEach((function(e){!1!==n[e]?t.setAttribute(e,n[e]):t.removeAttribute(e)})),e.arrowElement&&Object.keys(e.arrowStyles).length&&X(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,i){var o=j(i,t,e,n.positionFixed),a=R(n.placement,o,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",a),X(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},ae=function(){function e(t,n){var r=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=T({},e.Defaults,a),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(T({},e.Defaults.modifiers,a.modifiers)).forEach((function(t){r.options.modifiers[t]=T({},e.Defaults.modifiers[t]||{},a.modifiers?a.modifiers[t]:{})})),this.modifiers=Object.keys(this.options.modifiers).map((function(e){return T({name:e},r.options.modifiers[e])})).sort((function(e,t){return e.order-t.order})),this.modifiers.forEach((function(e){e.enabled&&o(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)})),this.update();var s=this.options.eventsEnabled;s&&this.enableEventListeners(),this.state.eventsEnabled=s}return x(e,[{key:"update",value:function(){return U.call(this)}},{key:"destroy",value:function(){return q.call(this)}},{key:"enableEventListeners",value:function(){return Z.call(this)}},{key:"disableEventListeners",value:function(){return $.call(this)}}]),e}();ae.Utils=("undefined"!=typeof window?window:e).PopperUtils,ae.placements=K,ae.Defaults=oe,t.default=ae}.call(this,n(0))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(1)),o=r(n(6)),a=r(n(14));t.default=class{constructor(){this.data={};const e=this;this.$result=i.default("#jsFileLoading"),this.CX=new a.default({get_data:function(t){return e.data[t]}}),i.default("#file").on("change",(function(t){const n=t.target.files;e.$result.html("");for(let t=0;t<n.length;t++)e.handleFile(n[t])}))}handleFile(e){const t=this,n=i.default("<h4>",{text:"ÐÑÐ±ÑÐ°Ð½ ÑÐ°Ð¹Ð»: "+e.name});this.$result.append(n);const r=new Date;o.default.loadAsync(e).then((function(e){const o=new Date;n.append(i.default("<span>",{class:"small",text:" (loaded in "+(o-r)+"ms)"})),e.forEach((function(e,n){(n.name.startsWith("Images/")||n.name.startsWith("Audio/"))&&n.async("base64").then(e=>{t.data[n.name]=e}),"content.xml"===n.name&&n.async("text").then(e=>{t.CX.parse(e)})}))}),(function(n){t.$result.append(i.default("<div>",{class:"alert alert-danger",text:"Error reading "+e.name+": "+n.message}))}))}}},function(e,t,n){(function(t,n,r){e.exports=function e(t,n,r){function i(a,s){if(!n[a]){if(!t[a]){if(o)return o(a,!0);var l=new Error("Cannot find module '"+a+"'");throw l.code="MODULE_NOT_FOUND",l}var u=n[a]={exports:{}};t[a][0].call(u.exports,(function(e){return i(t[a][1][e]||e)}),u,u.exports,e,t,n,r)}return n[a].exports}for(var o=!1,a=0;a<r.length;a++)i(r[a]);return i}({1:[function(e,t,n){"use strict";var r=e("./utils"),i=e("./support"),o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";n.encode=function(e){for(var t,n,i,a,s,l,u,f=[],c=0,d=e.length,h=d,p="string"!==r.getTypeOf(e);c<e.length;)h=d-c,i=p?(t=e[c++],n=c<d?e[c++]:0,c<d?e[c++]:0):(t=e.charCodeAt(c++),n=c<d?e.charCodeAt(c++):0,c<d?e.charCodeAt(c++):0),a=t>>2,s=(3&t)<<4|n>>4,l=1<h?(15&n)<<2|i>>6:64,u=2<h?63&i:64,f.push(o.charAt(a)+o.charAt(s)+o.charAt(l)+o.charAt(u));return f.join("")},n.decode=function(e){var t,n,r,a,s,l,u=0,f=0,c="data:";if(e.substr(0,c.length)===c)throw new Error("Invalid base64 input, it looks like a data url.");var d,h=3*(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"")).length/4;if(e.charAt(e.length-1)===o.charAt(64)&&h--,e.charAt(e.length-2)===o.charAt(64)&&h--,h%1!=0)throw new Error("Invalid base64 input, bad content length.");for(d=i.uint8array?new Uint8Array(0|h):new Array(0|h);u<e.length;)t=o.indexOf(e.charAt(u++))<<2|(a=o.indexOf(e.charAt(u++)))>>4,n=(15&a)<<4|(s=o.indexOf(e.charAt(u++)))>>2,r=(3&s)<<6|(l=o.indexOf(e.charAt(u++))),d[f++]=t,64!==s&&(d[f++]=n),64!==l&&(d[f++]=r);return d}},{"./support":30,"./utils":32}],2:[function(e,t,n){"use strict";var r=e("./external"),i=e("./stream/DataWorker"),o=e("./stream/DataLengthProbe"),a=e("./stream/Crc32Probe");function s(e,t,n,r,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=n,this.compression=r,this.compressedContent=i}o=e("./stream/DataLengthProbe"),s.prototype={getContentWorker:function(){var e=new i(r.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new o("data_length")),t=this;return e.on("end",(function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error("Bug : uncompressed data size mismatch")})),e},getCompressedWorker:function(){return new i(r.Promise.resolve(this.compressedContent)).withStreamInfo("compressedSize",this.compressedSize).withStreamInfo("uncompressedSize",this.uncompressedSize).withStreamInfo("crc32",this.crc32).withStreamInfo("compression",this.compression)}},s.createWorkerFrom=function(e,t,n){return e.pipe(new a).pipe(new o("uncompressedSize")).pipe(t.compressWorker(n)).pipe(new o("compressedSize")).withStreamInfo("compression",t)},t.exports=s},{"./external":6,"./stream/Crc32Probe":25,"./stream/DataLengthProbe":26,"./stream/DataWorker":27}],3:[function(e,t,n){"use strict";var r=e("./stream/GenericWorker");n.STORE={magic:"\0\0",compressWorker:function(e){return new r("STORE compression")},uncompressWorker:function(){return new r("STORE decompression")}},n.DEFLATE=e("./flate")},{"./flate":7,"./stream/GenericWorker":28}],4:[function(e,t,n){"use strict";var r=e("./utils"),i=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?"string"!==r.getTypeOf(e)?function(e,t,n,r){var o=i,a=0+n;e^=-1;for(var s=0;s<a;s++)e=e>>>8^o[255&(e^t[s])];return-1^e}(0|t,e,e.length):function(e,t,n,r){var o=i,a=0+n;e^=-1;for(var s=0;s<a;s++)e=e>>>8^o[255&(e^t.charCodeAt(s))];return-1^e}(0|t,e,e.length):0}},{"./utils":32}],5:[function(e,t,n){"use strict";n.base64=!1,n.binary=!1,n.dir=!1,n.createFolders=!0,n.date=null,n.compression=null,n.compressionOptions=null,n.comment=null,n.unixPermissions=null,n.dosPermissions=null},{}],6:[function(e,t,n){"use strict";var r;r="undefined"!=typeof Promise?Promise:e("lie"),t.exports={Promise:r}},{lie:37}],7:[function(e,t,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=e("pako"),o=e("./utils"),a=e("./stream/GenericWorker"),s=r?"uint8array":"array";function l(e,t){a.call(this,"FlateWorker/"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}n.magic="\b\0",o.inherits(l,a),l.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(o.transformTo(s,e.data),!1)},l.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},l.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},l.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var e=this;this._pako.onData=function(t){e.push({data:t,meta:e.meta})}},n.compressWorker=function(e){return new l("Deflate",e)},n.uncompressWorker=function(){return new l("Inflate",{})}},{"./stream/GenericWorker":28,"./utils":32,pako:38}],8:[function(e,t,n){"use strict";function r(e,t){var n,r="";for(n=0;n<t;n++)r+=String.fromCharCode(255&e),e>>>=8;return r}function i(e,t,n,i,a,f){var c,d,h=e.file,p=e.compression,m=f!==s.utf8encode,g=o.transformTo("string",f(h.name)),v=o.transformTo("string",s.utf8encode(h.name)),y=h.comment,_=o.transformTo("string",f(y)),b=o.transformTo("string",s.utf8encode(y)),w=v.length!==h.name.length,x=b.length!==y.length,E="",T="",k="",C=h.dir,S=h.date,A={crc32:0,compressedSize:0,uncompressedSize:0};t&&!n||(A.crc32=e.crc32,A.compressedSize=e.compressedSize,A.uncompressedSize=e.uncompressedSize);var D=0;t&&(D|=8),m||!w&&!x||(D|=2048);var I=0,N=0;C&&(I|=16),"UNIX"===a?(N=798,I|=function(e,t){var n=e;return e||(n=t?16893:33204),(65535&n)<<16}(h.unixPermissions,C)):(N=20,I|=function(e){return 63&(e||0)}(h.dosPermissions)),c=S.getUTCHours(),c<<=6,c|=S.getUTCMinutes(),c<<=5,c|=S.getUTCSeconds()/2,d=S.getUTCFullYear()-1980,d<<=4,d|=S.getUTCMonth()+1,d<<=5,d|=S.getUTCDate(),w&&(T=r(1,1)+r(l(g),4)+v,E+="up"+r(T.length,2)+T),x&&(k=r(1,1)+r(l(_),4)+b,E+="uc"+r(k.length,2)+k);var O="";return O+="\n\0",O+=r(D,2),O+=p.magic,O+=r(c,2),O+=r(d,2),O+=r(A.crc32,4),O+=r(A.compressedSize,4),O+=r(A.uncompressedSize,4),O+=r(g.length,2),O+=r(E.length,2),{fileRecord:u.LOCAL_FILE_HEADER+O+g+E,dirRecord:u.CENTRAL_FILE_HEADER+r(N,2)+O+r(_.length,2)+"\0\0\0\0"+r(I,4)+r(i,4)+g+E+_}}var o=e("../utils"),a=e("../stream/GenericWorker"),s=e("../utf8"),l=e("../crc32"),u=e("../signature");function f(e,t,n,r){a.call(this,"ZipFileWorker"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=n,this.encodeFileName=r,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}o.inherits(f,a),f.prototype.push=function(e){var t=e.meta.percent||0,n=this.entriesCount,r=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,a.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:n?(t+100*(n-r-1))/n:100}}))},f.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var n=i(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:n.fileRecord,meta:{percent:0}})}else this.accumulate=!0},f.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,n=i(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(n.dirRecord),t)this.push({data:function(e){return u.DATA_DESCRIPTOR+r(e.crc32,4)+r(e.compressedSize,4)+r(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:n.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},f.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var n=this.bytesWritten-e,i=function(e,t,n,i,a){var s=o.transformTo("string",a(i));return u.CENTRAL_DIRECTORY_END+"\0\0\0\0"+r(e,2)+r(e,2)+r(t,4)+r(n,4)+r(s.length,2)+s}(this.dirRecords.length,n,e,this.zipComment,this.encodeFileName);this.push({data:i,meta:{percent:100}})},f.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},f.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()})),e.on("error",(function(e){t.error(e)})),this},f.prototype.resume=function(){return!!a.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},f.prototype.error=function(e){var t=this._sources;if(!a.prototype.error.call(this,e))return!1;for(var n=0;n<t.length;n++)try{t[n].error(e)}catch(e){}return!0},f.prototype.lock=function(){a.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=f},{"../crc32":4,"../signature":23,"../stream/GenericWorker":28,"../utf8":31,"../utils":32}],9:[function(e,t,n){"use strict";var r=e("../compressions"),i=e("./ZipFileWorker");n.generateWorker=function(e,t,n){var o=new i(t.streamFiles,n,t.platform,t.encodeFileName),a=0;try{e.forEach((function(e,n){a++;var i=function(e,t){var n=e||t,i=r[n];if(!i)throw new Error(n+" is not a valid compression method !");return i}(n.options.compression,t.compression),s=n.options.compressionOptions||t.compressionOptions||{},l=n.dir,u=n.date;n._compressWorker(i,s).withStreamInfo("file",{name:e,dir:l,date:u,comment:n.comment||"",unixPermissions:n.unixPermissions,dosPermissions:n.dosPermissions}).pipe(o)})),o.entriesCount=a}catch(e){o.error(e)}return o}},{"../compressions":3,"./ZipFileWorker":8}],10:[function(e,t,n){"use strict";function r(){if(!(this instanceof r))return new r;if(arguments.length)throw new Error("The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.");this.files={},this.comment=null,this.root="",this.clone=function(){var e=new r;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}(r.prototype=e("./object")).loadAsync=e("./load"),r.support=e("./support"),r.defaults=e("./defaults"),r.version="3.5.0",r.loadAsync=function(e,t){return(new r).loadAsync(e,t)},r.external=e("./external"),t.exports=r},{"./defaults":5,"./external":6,"./load":11,"./object":15,"./support":30}],11:[function(e,t,n){"use strict";var r=e("./utils"),i=e("./external"),o=e("./utf8"),a=(r=e("./utils"),e("./zipEntries")),s=e("./stream/Crc32Probe"),l=e("./nodejsUtils");function u(e){return new i.Promise((function(t,n){var r=e.decompressed.getContentWorker().pipe(new s);r.on("error",(function(e){n(e)})).on("end",(function(){r.streamInfo.crc32!==e.decompressed.crc32?n(new Error("Corrupted zip : CRC32 mismatch")):t()})).resume()}))}t.exports=function(e,t){var n=this;return t=r.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:o.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error("JSZip can't accept a stream when loading a zip file.")):r.prepareContent("the loaded zip file",e,!0,t.optimizedBinaryString,t.base64).then((function(e){var n=new a(t);return n.load(e),n})).then((function(e){var n=[i.Promise.resolve(e)],r=e.files;if(t.checkCRC32)for(var o=0;o<r.length;o++)n.push(u(r[o]));return i.Promise.all(n)})).then((function(e){for(var r=e.shift(),i=r.files,o=0;o<i.length;o++){var a=i[o];n.file(a.fileNameStr,a.decompressed,{binary:!0,optimizedBinaryString:!0,date:a.date,dir:a.dir,comment:a.fileCommentStr.length?a.fileCommentStr:null,unixPermissions:a.unixPermissions,dosPermissions:a.dosPermissions,createFolders:t.createFolders})}return r.zipComment.length&&(n.comment=r.zipComment),n}))}},{"./external":6,"./nodejsUtils":14,"./stream/Crc32Probe":25,"./utf8":31,"./utils":32,"./zipEntries":33}],12:[function(e,t,n){"use strict";var r=e("../utils"),i=e("../stream/GenericWorker");function o(e,t){i.call(this,"Nodejs stream input adapter for "+e),this._upstreamEnded=!1,this._bindStream(t)}r.inherits(o,i),o.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on("data",(function(e){t.push({data:e,meta:{percent:0}})})).on("error",(function(e){t.isPaused?this.generatedError=e:t.error(e)})).on("end",(function(){t.isPaused?t._upstreamEnded=!0:t.end()}))},o.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=o},{"../stream/GenericWorker":28,"../utils":32}],13:[function(e,t,n){"use strict";var r=e("readable-stream").Readable;function i(e,t,n){r.call(this,t),this._helper=e;var i=this;e.on("data",(function(e,t){i.push(e)||i._helper.pause(),n&&n(t)})).on("error",(function(e){i.emit("error",e)})).on("end",(function(){i.push(null)}))}e("../utils").inherits(i,r),i.prototype._read=function(){this._helper.resume()},t.exports=i},{"../utils":32,"readable-stream":16}],14:[function(e,n,r){"use strict";n.exports={isNode:void 0!==t,newBufferFrom:function(e,n){if(t.from&&t.from!==Uint8Array.from)return t.from(e,n);if("number"==typeof e)throw new Error('The "data" argument must not be a number');return new t(e,n)},allocBuffer:function(e){if(t.alloc)return t.alloc(e);var n=new t(e);return n.fill(0),n},isBuffer:function(e){return t.isBuffer(e)},isStream:function(e){return e&&"function"==typeof e.on&&"function"==typeof e.pause&&"function"==typeof e.resume}}},{}],15:[function(e,t,n){"use strict";function r(e,t,n){var r,i=o.getTypeOf(t),s=o.extend(n||{},l);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),"string"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=m(e)),s.createFolders&&(r=p(e))&&g.call(this,r,!0);var c,v="string"===i&&!1===s.binary&&!1===s.base64;n&&void 0!==n.binary||(s.binary=!v),(t instanceof u&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t="",s.compression="STORE",i="string"),c=t instanceof u||t instanceof a?t:d.isNode&&d.isStream(t)?new h(e,t):o.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var y=new f(e,c,s);this.files[e]=y}var i=e("./utf8"),o=e("./utils"),a=e("./stream/GenericWorker"),s=e("./stream/StreamHelper"),l=e("./defaults"),u=e("./compressedObject"),f=e("./zipObject"),c=e("./generate"),d=e("./nodejsUtils"),h=e("./nodejs/NodejsStreamInputAdapter"),p=function(e){"/"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return 0<t?e.substring(0,t):""},m=function(e){return"/"!==e.slice(-1)&&(e+="/"),e},g=function(e,t){return t=void 0!==t?t:l.createFolders,e=m(e),this.files[e]||r.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function v(e){return"[object RegExp]"===Object.prototype.toString.call(e)}var y={load:function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},forEach:function(e){var t,n,r;for(t in this.files)this.files.hasOwnProperty(t)&&(r=this.files[t],(n=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(n,r))},filter:function(e){var t=[];return this.forEach((function(n,r){e(n,r)&&t.push(r)})),t},file:function(e,t,n){if(1!==arguments.length)return e=this.root+e,r.call(this,e,t,n),this;if(v(e)){var i=e;return this.filter((function(e,t){return!t.dir&&i.test(e)}))}var o=this.files[this.root+e];return o&&!o.dir?o:null},folder:function(e){if(!e)return this;if(v(e))return this.filter((function(t,n){return n.dir&&e.test(t)}));var t=this.root+e,n=g.call(this,t),r=this.clone();return r.root=n.name,r},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!==e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var n=this.filter((function(t,n){return n.name.slice(0,e.length)===e})),r=0;r<n.length;r++)delete this.files[n[r].name];return this},generate:function(e){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},generateInternalStream:function(e){var t,n={};try{if((n=o.extend(e||{},{streamFiles:!1,compression:"STORE",compressionOptions:null,type:"",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:i.utf8encode})).type=n.type.toLowerCase(),n.compression=n.compression.toUpperCase(),"binarystring"===n.type&&(n.type="string"),!n.type)throw new Error("No output type specified.");o.checkSupport(n.type),"darwin"!==n.platform&&"freebsd"!==n.platform&&"linux"!==n.platform&&"sunos"!==n.platform||(n.platform="UNIX"),"win32"===n.platform&&(n.platform="DOS");var r=n.comment||this.comment||"";t=c.generateWorker(this,n,r)}catch(e){(t=new a("error")).error(e)}return new s(t,n.type||"string",n.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type="nodebuffer"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=y},{"./compressedObject":2,"./defaults":5,"./generate":9,"./nodejs/NodejsStreamInputAdapter":12,"./nodejsUtils":14,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31,"./utils":32,"./zipObject":35}],16:[function(e,t,n){t.exports=e("stream")},{stream:void 0}],17:[function(e,t,n){"use strict";var r=e("./DataReader");function i(e){r.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e("../utils").inherits(i,r),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),n=e.charCodeAt(1),r=e.charCodeAt(2),i=e.charCodeAt(3),o=this.length-4;0<=o;--o)if(this.data[o]===t&&this.data[o+1]===n&&this.data[o+2]===r&&this.data[o+3]===i)return o-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),n=e.charCodeAt(1),r=e.charCodeAt(2),i=e.charCodeAt(3),o=this.readData(4);return t===o[0]&&n===o[1]&&r===o[2]&&i===o[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],18:[function(e,t,n){"use strict";var r=e("../utils");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(e){},readInt:function(e){var t,n=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)n=(n<<8)+this.byteAt(t);return this.index+=e,n},readString:function(e){return r.transformTo("string",this.readData(e))},readData:function(e){},lastIndexOfSignature:function(e){},readAndCheckSignature:function(e){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{"../utils":32}],19:[function(e,t,n){"use strict";var r=e("./Uint8ArrayReader");function i(e){r.call(this,e)}e("../utils").inherits(i,r),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./Uint8ArrayReader":21}],20:[function(e,t,n){"use strict";var r=e("./DataReader");function i(e){r.call(this,e)}e("../utils").inherits(i,r),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./DataReader":18}],21:[function(e,t,n){"use strict";var r=e("./ArrayReader");function i(e){r.call(this,e)}e("../utils").inherits(i,r),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{"../utils":32,"./ArrayReader":17}],22:[function(e,t,n){"use strict";var r=e("../utils"),i=e("../support"),o=e("./ArrayReader"),a=e("./StringReader"),s=e("./NodeBufferReader"),l=e("./Uint8ArrayReader");t.exports=function(e){var t=r.getTypeOf(e);return r.checkSupport(t),"string"!==t||i.uint8array?"nodebuffer"===t?new s(e):i.uint8array?new l(r.transformTo("uint8array",e)):new o(r.transformTo("array",e)):new a(e)}},{"../support":30,"../utils":32,"./ArrayReader":17,"./NodeBufferReader":19,"./StringReader":20,"./Uint8ArrayReader":21}],23:[function(e,t,n){"use strict";n.LOCAL_FILE_HEADER="PK",n.CENTRAL_FILE_HEADER="PK",n.CENTRAL_DIRECTORY_END="PK",n.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",n.ZIP64_CENTRAL_DIRECTORY_END="PK",n.DATA_DESCRIPTOR="PK\b"},{}],24:[function(e,t,n){"use strict";var r=e("./GenericWorker"),i=e("../utils");function o(e){r.call(this,"ConvertWorker to "+e),this.destType=e}i.inherits(o,r),o.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=o},{"../utils":32,"./GenericWorker":28}],25:[function(e,t,n){"use strict";var r=e("./GenericWorker"),i=e("../crc32");function o(){r.call(this,"Crc32Probe"),this.withStreamInfo("crc32",0)}e("../utils").inherits(o,r),o.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=o},{"../crc32":4,"../utils":32,"./GenericWorker":28}],26:[function(e,t,n){"use strict";var r=e("../utils"),i=e("./GenericWorker");function o(e){i.call(this,"DataLengthProbe for "+e),this.propName=e,this.withStreamInfo(e,0)}r.inherits(o,i),o.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=o},{"../utils":32,"./GenericWorker":28}],27:[function(e,t,n){"use strict";var r=e("../utils"),i=e("./GenericWorker");function o(e){i.call(this,"DataWorker");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type="",this._tickScheduled=!1,e.then((function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=r.getTypeOf(e),t.isPaused||t._tickAndRepeat()}),(function(e){t.error(e)}))}r.inherits(o,i),o.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},o.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,r.delay(this._tickAndRepeat,[],this)),!0)},o.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(r.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},o.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case"string":e=this.data.substring(this.index,t);break;case"uint8array":e=this.data.subarray(this.index,t);break;case"array":case"nodebuffer":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=o},{"../utils":32,"./GenericWorker":28}],28:[function(e,t,n){"use strict";function r(e){this.name=e||"default",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}r.prototype={push:function(e){this.emit("data",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit("end"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit("error",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit("error",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var n=0;n<this._listeners[e].length;n++)this._listeners[e][n].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on("data",(function(e){t.processChunk(e)})),e.on("end",(function(){t.end()})),e.on("error",(function(e){t.error(e)})),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)this.extraStreamInfo.hasOwnProperty(e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error("The stream '"+this+"' has already been used.");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e="Worker "+this.name;return this.previous?this.previous+" -> "+e:e}},t.exports=r},{}],29:[function(e,n,r){"use strict";var i=e("../utils"),o=e("./ConvertWorker"),a=e("./GenericWorker"),s=e("../base64"),l=e("../support"),u=e("../external"),f=null;if(l.nodestream)try{f=e("../nodejs/NodejsStreamOutputAdapter")}catch(e){}function c(e,t,n){var r=t;switch(t){case"blob":case"arraybuffer":r="uint8array";break;case"base64":r="string"}try{this._internalType=r,this._outputType=t,this._mimeType=n,i.checkSupport(r),this._worker=e.pipe(new o(r)),e.lock()}catch(e){this._worker=new a("error"),this._worker.error(e)}}c.prototype={accumulate:function(e){return function(e,n){return new u.Promise((function(r,o){var a=[],l=e._internalType,u=e._outputType,f=e._mimeType;e.on("data",(function(e,t){a.push(e),n&&n(t)})).on("error",(function(e){a=[],o(e)})).on("end",(function(){try{var e=function(e,t,n){switch(e){case"blob":return i.newBlob(i.transformTo("arraybuffer",t),n);case"base64":return s.encode(t);default:return i.transformTo(e,t)}}(u,function(e,n){var r,i=0,o=null,a=0;for(r=0;r<n.length;r++)a+=n[r].length;switch(e){case"string":return n.join("");case"array":return Array.prototype.concat.apply([],n);case"uint8array":for(o=new Uint8Array(a),r=0;r<n.length;r++)o.set(n[r],i),i+=n[r].length;return o;case"nodebuffer":return t.concat(n);default:throw new Error("concat : unsupported type '"+e+"'")}}(l,a),f);r(e)}catch(e){o(e)}a=[]})).resume()}))}(this,e)},on:function(e,t){var n=this;return"data"===e?this._worker.on(e,(function(e){t.call(n,e.data,e.meta)})):this._worker.on(e,(function(){i.delay(t,arguments,n)})),this},resume:function(){return i.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(i.checkSupport("nodestream"),"nodebuffer"!==this._outputType)throw new Error(this._outputType+" is not supported by this method");return new f(this,{objectMode:"nodebuffer"!==this._outputType},e)}},n.exports=c},{"../base64":1,"../external":6,"../nodejs/NodejsStreamOutputAdapter":13,"../support":30,"../utils":32,"./ConvertWorker":24,"./GenericWorker":28}],30:[function(e,n,r){"use strict";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,r.nodebuffer=void 0!==t,r.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)r.blob=!1;else{var i=new ArrayBuffer(0);try{r.blob=0===new Blob([i],{type:"application/zip"}).size}catch(e){try{var o=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);o.append(i),r.blob=0===o.getBlob("application/zip").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e("readable-stream").Readable}catch(e){r.nodestream=!1}},{"readable-stream":16}],31:[function(e,t,n){"use strict";for(var r=e("./utils"),i=e("./support"),o=e("./nodejsUtils"),a=e("./stream/GenericWorker"),s=new Array(256),l=0;l<256;l++)s[l]=252<=l?6:248<=l?5:240<=l?4:224<=l?3:192<=l?2:1;function u(){a.call(this,"utf-8 decode"),this.leftOver=null}function f(){a.call(this,"utf-8 encode")}s[254]=s[254]=1,n.utf8encode=function(e){return i.nodebuffer?o.newBufferFrom(e,"utf-8"):function(e){var t,n,r,o,a,s=e.length,l=0;for(o=0;o<s;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<s&&56320==(64512&(r=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),l+=n<128?1:n<2048?2:n<65536?3:4;for(t=i.uint8array?new Uint8Array(l):new Array(l),o=a=0;a<l;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<s&&56320==(64512&(r=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(r-56320),o++),n<128?t[a++]=n:(n<2048?t[a++]=192|n>>>6:(n<65536?t[a++]=224|n>>>12:(t[a++]=240|n>>>18,t[a++]=128|n>>>12&63),t[a++]=128|n>>>6&63),t[a++]=128|63&n);return t}(e)},n.utf8decode=function(e){return i.nodebuffer?r.transformTo("nodebuffer",e).toString("utf-8"):function(e){var t,n,i,o,a=e.length,l=new Array(2*a);for(t=n=0;t<a;)if((i=e[t++])<128)l[n++]=i;else if(4<(o=s[i]))l[n++]=65533,t+=o-1;else{for(i&=2===o?31:3===o?15:7;1<o&&t<a;)i=i<<6|63&e[t++],o--;1<o?l[n++]=65533:i<65536?l[n++]=i:(i-=65536,l[n++]=55296|i>>10&1023,l[n++]=56320|1023&i)}return l.length!==n&&(l.subarray?l=l.subarray(0,n):l.length=n),r.applyFromCharCode(l)}(e=r.transformTo(i.uint8array?"uint8array":"array",e))},r.inherits(u,a),u.prototype.processChunk=function(e){var t=r.transformTo(i.uint8array?"uint8array":"array",e.data);if(this.leftOver&&this.leftOver.length){if(i.uint8array){var o=t;(t=new Uint8Array(o.length+this.leftOver.length)).set(this.leftOver,0),t.set(o,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var a=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;0<=n&&128==(192&e[n]);)n--;return n<0||0===n?t:n+s[e[n]]>t?n:t}(t),l=t;a!==t.length&&(i.uint8array?(l=t.subarray(0,a),this.leftOver=t.subarray(a,t.length)):(l=t.slice(0,a),this.leftOver=t.slice(a,t.length))),this.push({data:n.utf8decode(l),meta:e.meta})},u.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:n.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},n.Utf8DecodeWorker=u,r.inherits(f,a),f.prototype.processChunk=function(e){this.push({data:n.utf8encode(e.data),meta:e.meta})},n.Utf8EncodeWorker=f},{"./nodejsUtils":14,"./stream/GenericWorker":28,"./support":30,"./utils":32}],32:[function(e,t,n){"use strict";var r=e("./support"),i=e("./base64"),o=e("./nodejsUtils"),a=e("set-immediate-shim"),s=e("./external");function l(e){return e}function u(e,t){for(var n=0;n<e.length;++n)t[n]=255&e.charCodeAt(n);return t}n.newBlob=function(e,t){n.checkSupport("blob");try{return new Blob([e],{type:t})}catch(n){try{var r=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return r.append(e),r.getBlob(t)}catch(e){throw new Error("Bug : can't construct the Blob.")}}};var f={stringifyByChunk:function(e,t,n){var r=[],i=0,o=e.length;if(o<=n)return String.fromCharCode.apply(null,e);for(;i<o;)"array"===t||"nodebuffer"===t?r.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+n,o)))):r.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+n,o)))),i+=n;return r.join("")},stringifyByChar:function(e){for(var t="",n=0;n<e.length;n++)t+=String.fromCharCode(e[n]);return t},applyCanBeUsed:{uint8array:function(){try{return r.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return r.nodebuffer&&1===String.fromCharCode.apply(null,o.allocBuffer(1)).length}catch(e){return!1}}()}};function c(e){var t=65536,r=n.getTypeOf(e),i=!0;if("uint8array"===r?i=f.applyCanBeUsed.uint8array:"nodebuffer"===r&&(i=f.applyCanBeUsed.nodebuffer),i)for(;1<t;)try{return f.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return f.stringifyByChar(e)}function d(e,t){for(var n=0;n<e.length;n++)t[n]=e[n];return t}n.applyFromCharCode=c;var h={};h.string={string:l,array:function(e){return u(e,new Array(e.length))},arraybuffer:function(e){return h.string.uint8array(e).buffer},uint8array:function(e){return u(e,new Uint8Array(e.length))},nodebuffer:function(e){return u(e,o.allocBuffer(e.length))}},h.array={string:c,array:l,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return o.newBufferFrom(e)}},h.arraybuffer={string:function(e){return c(new Uint8Array(e))},array:function(e){return d(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:l,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return o.newBufferFrom(new Uint8Array(e))}},h.uint8array={string:c,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:l,nodebuffer:function(e){return o.newBufferFrom(e)}},h.nodebuffer={string:c,array:function(e){return d(e,new Array(e.length))},arraybuffer:function(e){return h.nodebuffer.uint8array(e).buffer},uint8array:function(e){return d(e,new Uint8Array(e.length))},nodebuffer:l},n.transformTo=function(e,t){if(t=t||"",!e)return t;n.checkSupport(e);var r=n.getTypeOf(t);return h[r][e](t)},n.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":r.nodebuffer&&o.isBuffer(e)?"nodebuffer":r.uint8array&&e instanceof Uint8Array?"uint8array":r.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},n.checkSupport=function(e){if(!r[e.toLowerCase()])throw new Error(e+" is not supported by this platform")},n.MAX_VALUE_16BITS=65535,n.MAX_VALUE_32BITS=-1,n.pretty=function(e){var t,n,r="";for(n=0;n<(e||"").length;n++)r+="\\x"+((t=e.charCodeAt(n))<16?"0":"")+t.toString(16).toUpperCase();return r},n.delay=function(e,t,n){a((function(){e.apply(n||null,t||[])}))},n.inherits=function(e,t){function n(){}n.prototype=t.prototype,e.prototype=new n},n.extend=function(){var e,t,n={};for(e=0;e<arguments.length;e++)for(t in arguments[e])arguments[e].hasOwnProperty(t)&&void 0===n[t]&&(n[t]=arguments[e][t]);return n},n.prepareContent=function(e,t,o,a,l){return s.Promise.resolve(t).then((function(e){return r.blob&&(e instanceof Blob||-1!==["[object File]","[object Blob]"].indexOf(Object.prototype.toString.call(e)))&&"undefined"!=typeof FileReader?new s.Promise((function(t,n){var r=new FileReader;r.onload=function(e){t(e.target.result)},r.onerror=function(e){n(e.target.error)},r.readAsArrayBuffer(e)})):e})).then((function(t){var f=n.getTypeOf(t);return f?("arraybuffer"===f?t=n.transformTo("uint8array",t):"string"===f&&(l?t=i.decode(t):o&&!0!==a&&(t=function(e){return u(e,r.uint8array?new Uint8Array(e.length):new Array(e.length))}(t))),t):s.Promise.reject(new Error("Can't read the data of '"+e+"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?"))}))}},{"./base64":1,"./external":6,"./nodejsUtils":14,"./support":30,"set-immediate-shim":54}],33:[function(e,t,n){"use strict";var r=e("./reader/readerFor"),i=e("./utils"),o=e("./signature"),a=e("./zipEntry"),s=(e("./utf8"),e("./support"));function l(e){this.files=[],this.loadOptions=e}l.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error("Corrupted zip or bug: unexpected signature ("+i.pretty(t)+", expected "+i.pretty(e)+")")}},isSignature:function(e,t){var n=this.reader.index;this.reader.setIndex(e);var r=this.reader.readString(4)===t;return this.reader.setIndex(n),r},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=s.uint8array?"uint8array":"array",n=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(n)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,n,r=this.zip64EndOfCentralSize-44;0<r;)e=this.reader.readInt(2),t=this.reader.readInt(4),n=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:n}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(o.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(o.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(o.CENTRAL_DIRECTORY_END);if(e<0)throw this.isSignature(0,o.LOCAL_FILE_HEADER)?new Error("Corrupted zip: can't find end of central directory"):new Error("Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html");this.reader.setIndex(e);var t=e;if(this.checkSignature(o.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip: can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,o.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip: can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(o.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var n=this.centralDirOffset+this.centralDirSize;this.zip64&&(n+=20,n+=12+this.zip64EndOfCentralSize);var r=t-n;if(0<r)this.isSignature(t,o.CENTRAL_FILE_HEADER)||(this.reader.zero=r);else if(r<0)throw new Error("Corrupted zip: missing "+Math.abs(r)+" bytes.")},prepareReader:function(e){this.reader=r(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=l},{"./reader/readerFor":22,"./signature":23,"./support":30,"./utf8":31,"./utils":32,"./zipEntry":34}],34:[function(e,t,n){"use strict";var r=e("./reader/readerFor"),i=e("./utils"),o=e("./compressedObject"),a=e("./crc32"),s=e("./utf8"),l=e("./compressions"),u=e("./support");function f(e,t){this.options=e,this.loadOptions=t}f.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,n;if(e.skip(22),this.fileNameLength=e.readInt(2),n=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(n),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)");if(null===(t=function(e){for(var t in l)if(l.hasOwnProperty(t)&&l[t].magic===e)return l[t];return null}(this.compressionMethod)))throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");this.decompressed=new o(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(e){if(this.extraFields[1]){var t=r(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4))}},readExtraFields:function(e){var t,n,r,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),n=e.readInt(2),r=e.readData(n),this.extraFields[t]={id:t,length:n,value:r};e.setIndex(i)},handleUTF8:function(){var e=u.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=s.utf8decode(this.fileName),this.fileCommentStr=s.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var n=i.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(n)}var r=this.findExtraFieldUnicodeComment();if(null!==r)this.fileCommentStr=r;else{var o=i.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(o)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=r(e.value);return 1!==t.readInt(1)||a(this.fileName)!==t.readInt(4)?null:s.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=r(e.value);return 1!==t.readInt(1)||a(this.fileComment)!==t.readInt(4)?null:s.utf8decode(t.readData(e.length-5))}return null}},t.exports=f},{"./compressedObject":2,"./compressions":3,"./crc32":4,"./reader/readerFor":22,"./support":30,"./utf8":31,"./utils":32}],35:[function(e,t,n){"use strict";function r(e,t,n){this.name=e,this.dir=n.dir,this.date=n.date,this.comment=n.comment,this.unixPermissions=n.unixPermissions,this.dosPermissions=n.dosPermissions,this._data=t,this._dataBinary=n.binary,this.options={compression:n.compression,compressionOptions:n.compressionOptions}}var i=e("./stream/StreamHelper"),o=e("./stream/DataWorker"),a=e("./utf8"),s=e("./compressedObject"),l=e("./stream/GenericWorker");r.prototype={internalStream:function(e){var t=null,n="string";try{if(!e)throw new Error("No output type specified.");var r="string"===(n=e.toLowerCase())||"text"===n;"binarystring"!==n&&"text"!==n||(n="string"),t=this._decompressWorker();var o=!this._dataBinary;o&&!r&&(t=t.pipe(new a.Utf8EncodeWorker)),!o&&r&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new l("error")).error(e)}return new i(t,n,"")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||"nodebuffer").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof s&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var n=this._decompressWorker();return this._dataBinary||(n=n.pipe(new a.Utf8EncodeWorker)),s.createWorkerFrom(n,e,t)},_decompressWorker:function(){return this._data instanceof s?this._data.getContentWorker():this._data instanceof l?this._data:new o(this._data)}};for(var u=["asText","asBinary","asNodeBuffer","asUint8Array","asArrayBuffer"],f=function(){throw new Error("This method has been removed in JSZip 3.0, please check the upgrade guide.")},c=0;c<u.length;c++)r.prototype[u[c]]=f;t.exports=r},{"./compressedObject":2,"./stream/DataWorker":27,"./stream/GenericWorker":28,"./stream/StreamHelper":29,"./utf8":31}],36:[function(e,t,r){(function(e){"use strict";var n,r,i=e.MutationObserver||e.WebKitMutationObserver;if(i){var o=0,a=new i(f),s=e.document.createTextNode("");a.observe(s,{characterData:!0}),n=function(){s.data=o=++o%2}}else if(e.setImmediate||void 0===e.MessageChannel)n="document"in e&&"onreadystatechange"in e.document.createElement("script")?function(){var t=e.document.createElement("script");t.onreadystatechange=function(){f(),t.onreadystatechange=null,t.parentNode.removeChild(t),t=null},e.document.documentElement.appendChild(t)}:function(){setTimeout(f,0)};else{var l=new e.MessageChannel;l.port1.onmessage=f,n=function(){l.port2.postMessage(0)}}var u=[];function f(){var e,t;r=!0;for(var n=u.length;n;){for(t=u,u=[],e=-1;++e<n;)t[e]();n=u.length}r=!1}t.exports=function(e){1!==u.push(e)||r||n()}}).call(this,void 0!==n?n:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],37:[function(e,t,n){"use strict";var r=e("immediate");function i(){}var o={},a=["REJECTED"],s=["FULFILLED"],l=["PENDING"];function u(e){if("function"!=typeof e)throw new TypeError("resolver must be a function");this.state=l,this.queue=[],this.outcome=void 0,e!==i&&h(this,e)}function f(e,t,n){this.promise=e,"function"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),"function"==typeof n&&(this.onRejected=n,this.callRejected=this.otherCallRejected)}function c(e,t,n){r((function(){var r;try{r=t(n)}catch(r){return o.reject(e,r)}r===e?o.reject(e,new TypeError("Cannot resolve promise with itself")):o.resolve(e,r)}))}function d(e){var t=e&&e.then;if(e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof t)return function(){t.apply(e,arguments)}}function h(e,t){var n=!1;function r(t){n||(n=!0,o.reject(e,t))}function i(t){n||(n=!0,o.resolve(e,t))}var a=p((function(){t(i,r)}));"error"===a.status&&r(a.value)}function p(e,t){var n={};try{n.value=e(t),n.status="success"}catch(e){n.status="error",n.value=e}return n}(t.exports=u).prototype.finally=function(e){if("function"!=typeof e)return this;var t=this.constructor;return this.then((function(n){return t.resolve(e()).then((function(){return n}))}),(function(n){return t.resolve(e()).then((function(){throw n}))}))},u.prototype.catch=function(e){return this.then(null,e)},u.prototype.then=function(e,t){if("function"!=typeof e&&this.state===s||"function"!=typeof t&&this.state===a)return this;var n=new this.constructor(i);return this.state!==l?c(n,this.state===s?e:t,this.outcome):this.queue.push(new f(n,e,t)),n},f.prototype.callFulfilled=function(e){o.resolve(this.promise,e)},f.prototype.otherCallFulfilled=function(e){c(this.promise,this.onFulfilled,e)},f.prototype.callRejected=function(e){o.reject(this.promise,e)},f.prototype.otherCallRejected=function(e){c(this.promise,this.onRejected,e)},o.resolve=function(e,t){var n=p(d,t);if("error"===n.status)return o.reject(e,n.value);var r=n.value;if(r)h(e,r);else{e.state=s,e.outcome=t;for(var i=-1,a=e.queue.length;++i<a;)e.queue[i].callFulfilled(t)}return e},o.reject=function(e,t){e.state=a,e.outcome=t;for(var n=-1,r=e.queue.length;++n<r;)e.queue[n].callRejected(t);return e},u.resolve=function(e){return e instanceof this?e:o.resolve(new this(i),e)},u.reject=function(e){var t=new this(i);return o.reject(t,e)},u.all=function(e){var t=this;if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var n=e.length,r=!1;if(!n)return this.resolve([]);for(var a=new Array(n),s=0,l=-1,u=new this(i);++l<n;)f(e[l],l);return u;function f(e,i){t.resolve(e).then((function(e){a[i]=e,++s!==n||r||(r=!0,o.resolve(u,a))}),(function(e){r||(r=!0,o.reject(u,e))}))}},u.race=function(e){if("[object Array]"!==Object.prototype.toString.call(e))return this.reject(new TypeError("must be an array"));var t=e.length,n=!1;if(!t)return this.resolve([]);for(var r,a=-1,s=new this(i);++a<t;)r=e[a],this.resolve(r).then((function(e){n||(n=!0,o.resolve(s,e))}),(function(e){n||(n=!0,o.reject(s,e))}));return s}},{immediate:36}],38:[function(e,t,n){"use strict";var r={};(0,e("./lib/utils/common").assign)(r,e("./lib/deflate"),e("./lib/inflate"),e("./lib/zlib/constants")),t.exports=r},{"./lib/deflate":39,"./lib/inflate":40,"./lib/utils/common":41,"./lib/zlib/constants":44}],39:[function(e,t,n){"use strict";var r=e("./zlib/deflate"),i=e("./utils/common"),o=e("./utils/strings"),a=e("./zlib/messages"),s=e("./zlib/zstream"),l=Object.prototype.toString;function u(e){if(!(this instanceof u))return new u(e);this.options=i.assign({level:-1,method:8,chunkSize:16384,windowBits:15,memLevel:8,strategy:0,to:""},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var n=r.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(0!==n)throw new Error(a[n]);if(t.header&&r.deflateSetHeader(this.strm,t.header),t.dictionary){var f;if(f="string"==typeof t.dictionary?o.string2buf(t.dictionary):"[object ArrayBuffer]"===l.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,0!==(n=r.deflateSetDictionary(this.strm,f)))throw new Error(a[n]);this._dict_set=!0}}function f(e,t){var n=new u(t);if(n.push(e,!0),n.err)throw n.msg||a[n.err];return n.result}u.prototype.push=function(e,t){var n,a,s=this.strm,u=this.options.chunkSize;if(this.ended)return!1;a=t===~~t?t:!0===t?4:0,"string"==typeof e?s.input=o.string2buf(e):"[object ArrayBuffer]"===l.call(e)?s.input=new Uint8Array(e):s.input=e,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new i.Buf8(u),s.next_out=0,s.avail_out=u),1!==(n=r.deflate(s,a))&&0!==n)return this.onEnd(n),!(this.ended=!0);0!==s.avail_out&&(0!==s.avail_in||4!==a&&2!==a)||("string"===this.options.to?this.onData(o.buf2binstring(i.shrinkBuf(s.output,s.next_out))):this.onData(i.shrinkBuf(s.output,s.next_out)))}while((0<s.avail_in||0===s.avail_out)&&1!==n);return 4===a?(n=r.deflateEnd(this.strm),this.onEnd(n),this.ended=!0,0===n):2!==a||(this.onEnd(0),!(s.avail_out=0))},u.prototype.onData=function(e){this.chunks.push(e)},u.prototype.onEnd=function(e){0===e&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Deflate=u,n.deflate=f,n.deflateRaw=function(e,t){return(t=t||{}).raw=!0,f(e,t)},n.gzip=function(e,t){return(t=t||{}).gzip=!0,f(e,t)}},{"./utils/common":41,"./utils/strings":42,"./zlib/deflate":46,"./zlib/messages":51,"./zlib/zstream":53}],40:[function(e,t,n){"use strict";var r=e("./zlib/inflate"),i=e("./utils/common"),o=e("./utils/strings"),a=e("./zlib/constants"),s=e("./zlib/messages"),l=e("./zlib/zstream"),u=e("./zlib/gzheader"),f=Object.prototype.toString;function c(e){if(!(this instanceof c))return new c(e);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new l,this.strm.avail_out=0;var n=r.inflateInit2(this.strm,t.windowBits);if(n!==a.Z_OK)throw new Error(s[n]);this.header=new u,r.inflateGetHeader(this.strm,this.header)}function d(e,t){var n=new c(t);if(n.push(e,!0),n.err)throw n.msg||s[n.err];return n.result}c.prototype.push=function(e,t){var n,s,l,u,c,d,h=this.strm,p=this.options.chunkSize,m=this.options.dictionary,g=!1;if(this.ended)return!1;s=t===~~t?t:!0===t?a.Z_FINISH:a.Z_NO_FLUSH,"string"==typeof e?h.input=o.binstring2buf(e):"[object ArrayBuffer]"===f.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new i.Buf8(p),h.next_out=0,h.avail_out=p),(n=r.inflate(h,a.Z_NO_FLUSH))===a.Z_NEED_DICT&&m&&(d="string"==typeof m?o.string2buf(m):"[object ArrayBuffer]"===f.call(m)?new Uint8Array(m):m,n=r.inflateSetDictionary(this.strm,d)),n===a.Z_BUF_ERROR&&!0===g&&(n=a.Z_OK,g=!1),n!==a.Z_STREAM_END&&n!==a.Z_OK)return this.onEnd(n),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&n!==a.Z_STREAM_END&&(0!==h.avail_in||s!==a.Z_FINISH&&s!==a.Z_SYNC_FLUSH)||("string"===this.options.to?(l=o.utf8border(h.output,h.next_out),u=h.next_out-l,c=o.buf2string(h.output,l),h.next_out=u,h.avail_out=p-u,u&&i.arraySet(h.output,h.output,l,u,0),this.onData(c)):this.onData(i.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(g=!0)}while((0<h.avail_in||0===h.avail_out)&&n!==a.Z_STREAM_END);return n===a.Z_STREAM_END&&(s=a.Z_FINISH),s===a.Z_FINISH?(n=r.inflateEnd(this.strm),this.onEnd(n),this.ended=!0,n===a.Z_OK):s!==a.Z_SYNC_FLUSH||(this.onEnd(a.Z_OK),!(h.avail_out=0))},c.prototype.onData=function(e){this.chunks.push(e)},c.prototype.onEnd=function(e){e===a.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},n.Inflate=c,n.inflate=d,n.inflateRaw=function(e,t){return(t=t||{}).raw=!0,d(e,t)},n.ungzip=d},{"./utils/common":41,"./utils/strings":42,"./zlib/constants":44,"./zlib/gzheader":47,"./zlib/inflate":49,"./zlib/messages":51,"./zlib/zstream":53}],41:[function(e,t,n){"use strict";var r="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;n.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var n=t.shift();if(n){if("object"!=typeof n)throw new TypeError(n+"must be non-object");for(var r in n)n.hasOwnProperty(r)&&(e[r]=n[r])}}return e},n.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,n,r,i){if(t.subarray&&e.subarray)e.set(t.subarray(n,n+r),i);else for(var o=0;o<r;o++)e[i+o]=t[n+o]},flattenChunks:function(e){var t,n,r,i,o,a;for(t=r=0,n=e.length;t<n;t++)r+=e[t].length;for(a=new Uint8Array(r),t=i=0,n=e.length;t<n;t++)o=e[t],a.set(o,i),i+=o.length;return a}},o={arraySet:function(e,t,n,r,i){for(var o=0;o<r;o++)e[i+o]=t[n+o]},flattenChunks:function(e){return[].concat.apply([],e)}};n.setTyped=function(e){e?(n.Buf8=Uint8Array,n.Buf16=Uint16Array,n.Buf32=Int32Array,n.assign(n,i)):(n.Buf8=Array,n.Buf16=Array,n.Buf32=Array,n.assign(n,o))},n.setTyped(r)},{}],42:[function(e,t,n){"use strict";var r=e("./common"),i=!0,o=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){o=!1}for(var a=new r.Buf8(256),s=0;s<256;s++)a[s]=252<=s?6:248<=s?5:240<=s?4:224<=s?3:192<=s?2:1;function l(e,t){if(t<65537&&(e.subarray&&o||!e.subarray&&i))return String.fromCharCode.apply(null,r.shrinkBuf(e,t));for(var n="",a=0;a<t;a++)n+=String.fromCharCode(e[a]);return n}a[254]=a[254]=1,n.string2buf=function(e){var t,n,i,o,a,s=e.length,l=0;for(o=0;o<s;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),l+=n<128?1:n<2048?2:n<65536?3:4;for(t=new r.Buf8(l),o=a=0;a<l;o++)55296==(64512&(n=e.charCodeAt(o)))&&o+1<s&&56320==(64512&(i=e.charCodeAt(o+1)))&&(n=65536+(n-55296<<10)+(i-56320),o++),n<128?t[a++]=n:(n<2048?t[a++]=192|n>>>6:(n<65536?t[a++]=224|n>>>12:(t[a++]=240|n>>>18,t[a++]=128|n>>>12&63),t[a++]=128|n>>>6&63),t[a++]=128|63&n);return t},n.buf2binstring=function(e){return l(e,e.length)},n.binstring2buf=function(e){for(var t=new r.Buf8(e.length),n=0,i=t.length;n<i;n++)t[n]=e.charCodeAt(n);return t},n.buf2string=function(e,t){var n,r,i,o,s=t||e.length,u=new Array(2*s);for(n=r=0;n<s;)if((i=e[n++])<128)u[r++]=i;else if(4<(o=a[i]))u[r++]=65533,n+=o-1;else{for(i&=2===o?31:3===o?15:7;1<o&&n<s;)i=i<<6|63&e[n++],o--;1<o?u[r++]=65533:i<65536?u[r++]=i:(i-=65536,u[r++]=55296|i>>10&1023,u[r++]=56320|1023&i)}return l(u,r)},n.utf8border=function(e,t){var n;for((t=t||e.length)>e.length&&(t=e.length),n=t-1;0<=n&&128==(192&e[n]);)n--;return n<0||0===n?t:n+a[e[n]]>t?n:t}},{"./common":41}],43:[function(e,t,n){"use strict";t.exports=function(e,t,n,r){for(var i=65535&e|0,o=e>>>16&65535|0,a=0;0!==n;){for(n-=a=2e3<n?2e3:n;o=o+(i=i+t[r++]|0)|0,--a;);i%=65521,o%=65521}return i|o<<16|0}},{}],44:[function(e,t,n){"use strict";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,n){"use strict";var r=function(){for(var e,t=[],n=0;n<256;n++){e=n;for(var r=0;r<8;r++)e=1&e?3988292384^e>>>1:e>>>1;t[n]=e}return t}();t.exports=function(e,t,n,i){var o=r,a=i+n;e^=-1;for(var s=i;s<a;s++)e=e>>>8^o[255&(e^t[s])];return-1^e}},{}],46:[function(e,t,n){"use strict";var r,i=e("../utils/common"),o=e("./trees"),a=e("./adler32"),s=e("./crc32"),l=e("./messages"),u=-2,f=258,c=262,d=113;function h(e,t){return e.msg=l[t],t}function p(e){return(e<<1)-(4<e?9:0)}function m(e){for(var t=e.length;0<=--t;)e[t]=0}function g(e){var t=e.state,n=t.pending;n>e.avail_out&&(n=e.avail_out),0!==n&&(i.arraySet(e.output,t.pending_buf,t.pending_out,n,e.next_out),e.next_out+=n,t.pending_out+=n,e.total_out+=n,e.avail_out-=n,t.pending-=n,0===t.pending&&(t.pending_out=0))}function v(e,t){o._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,g(e.strm)}function y(e,t){e.pending_buf[e.pending++]=t}function _(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function b(e,t){var n,r,i=e.max_chain_length,o=e.strstart,a=e.prev_length,s=e.nice_match,l=e.strstart>e.w_size-c?e.strstart-(e.w_size-c):0,u=e.window,d=e.w_mask,h=e.prev,p=e.strstart+f,m=u[o+a-1],g=u[o+a];e.prev_length>=e.good_match&&(i>>=2),s>e.lookahead&&(s=e.lookahead);do{if(u[(n=t)+a]===g&&u[n+a-1]===m&&u[n]===u[o]&&u[++n]===u[o+1]){o+=2,n++;do{}while(u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&u[++o]===u[++n]&&o<p);if(r=f-(p-o),o=p-f,a<r){if(e.match_start=t,s<=(a=r))break;m=u[o+a-1],g=u[o+a]}}}while((t=h[t&d])>l&&0!=--i);return a<=e.lookahead?a:e.lookahead}function w(e){var t,n,r,o,l,u,f,d,h,p,m=e.w_size;do{if(o=e.window_size-e.lookahead-e.strstart,e.strstart>=m+(m-c)){for(i.arraySet(e.window,e.window,m,m,0),e.match_start-=m,e.strstart-=m,e.block_start-=m,t=n=e.hash_size;r=e.head[--t],e.head[t]=m<=r?r-m:0,--n;);for(t=n=m;r=e.prev[--t],e.prev[t]=m<=r?r-m:0,--n;);o+=m}if(0===e.strm.avail_in)break;if(u=e.strm,f=e.window,d=e.strstart+e.lookahead,p=void 0,(h=o)<(p=u.avail_in)&&(p=h),n=0===p?0:(u.avail_in-=p,i.arraySet(f,u.input,u.next_in,p,d),1===u.state.wrap?u.adler=a(u.adler,f,p,d):2===u.state.wrap&&(u.adler=s(u.adler,f,p,d)),u.next_in+=p,u.total_in+=p,p),e.lookahead+=n,e.lookahead+e.insert>=3)for(l=e.strstart-e.insert,e.ins_h=e.window[l],e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[l+3-1])&e.hash_mask,e.prev[l&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=l,l++,e.insert--,!(e.lookahead+e.insert<3)););}while(e.lookahead<c&&0!==e.strm.avail_in)}function x(e,t){for(var n,r;;){if(e.lookahead<c){if(w(e),e.lookahead<c&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==n&&e.strstart-n<=e.w_size-c&&(e.match_length=b(e,n)),e.match_length>=3)if(r=o._tr_tally(e,e.strstart-e.match_start,e.match_length-3),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=3){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else r=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(r&&(v(e,!1),0===e.strm.avail_out))return 1}return e.insert=e.strstart<2?e.strstart:2,4===t?(v(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(v(e,!1),0===e.strm.avail_out)?1:2}function E(e,t){for(var n,r,i;;){if(e.lookahead<c){if(w(e),e.lookahead<c&&0===t)return 1;if(0===e.lookahead)break}if(n=0,e.lookahead>=3&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=2,0!==n&&e.prev_length<e.max_lazy_match&&e.strstart-n<=e.w_size-c&&(e.match_length=b(e,n),e.match_length<=5&&(1===e.strategy||3===e.match_length&&4096<e.strstart-e.match_start)&&(e.match_length=2)),e.prev_length>=3&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-3,r=o._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-3),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+3-1])&e.hash_mask,n=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=2,e.strstart++,r&&(v(e,!1),0===e.strm.avail_out))return 1}else if(e.match_available){if((r=o._tr_tally(e,0,e.window[e.strstart-1]))&&v(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return 1}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(r=o._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<2?e.strstart:2,4===t?(v(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(v(e,!1),0===e.strm.avail_out)?1:2}function T(e,t,n,r,i){this.good_length=e,this.max_lazy=t,this.nice_length=n,this.max_chain=r,this.func=i}function k(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=8,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(1146),this.dyn_dtree=new i.Buf16(122),this.bl_tree=new i.Buf16(78),m(this.dyn_ltree),m(this.dyn_dtree),m(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(16),this.heap=new i.Buf16(573),m(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(573),m(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function C(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=2,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?42:d,e.adler=2===t.wrap?0:1,t.last_flush=0,o._tr_init(t),0):h(e,u)}function S(e){var t=C(e);return 0===t&&function(e){e.window_size=2*e.w_size,m(e.head),e.max_lazy_match=r[e.level].max_lazy,e.good_match=r[e.level].good_length,e.nice_match=r[e.level].nice_length,e.max_chain_length=r[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=2,e.match_available=0,e.ins_h=0}(e.state),t}function A(e,t,n,r,o,a){if(!e)return u;var s=1;if(-1===t&&(t=6),r<0?(s=0,r=-r):15<r&&(s=2,r-=16),o<1||9<o||8!==n||r<8||15<r||t<0||9<t||a<0||4<a)return h(e,u);8===r&&(r=9);var l=new k;return(e.state=l).strm=e,l.wrap=s,l.gzhead=null,l.w_bits=r,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=o+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+3-1)/3),l.window=new i.Buf8(2*l.w_size),l.head=new i.Buf16(l.hash_size),l.prev=new i.Buf16(l.w_size),l.lit_bufsize=1<<o+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new i.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=t,l.strategy=a,l.method=n,S(e)}r=[new T(0,0,0,0,(function(e,t){var n=65535;for(n>e.pending_buf_size-5&&(n=e.pending_buf_size-5);;){if(e.lookahead<=1){if(w(e),0===e.lookahead&&0===t)return 1;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var r=e.block_start+n;if((0===e.strstart||e.strstart>=r)&&(e.lookahead=e.strstart-r,e.strstart=r,v(e,!1),0===e.strm.avail_out))return 1;if(e.strstart-e.block_start>=e.w_size-c&&(v(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(v(e,!0),0===e.strm.avail_out?3:4):(e.strstart>e.block_start&&(v(e,!1),e.strm.avail_out),1)})),new T(4,4,8,4,x),new T(4,5,16,8,x),new T(4,6,32,32,x),new T(4,4,16,16,E),new T(8,16,32,32,E),new T(8,16,128,128,E),new T(8,32,128,256,E),new T(32,128,258,1024,E),new T(32,258,258,4096,E)],n.deflateInit=function(e,t){return A(e,t,8,15,8,0)},n.deflateInit2=A,n.deflateReset=S,n.deflateResetKeep=C,n.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?u:(e.state.gzhead=t,0):u},n.deflate=function(e,t){var n,i,a,l;if(!e||!e.state||5<t||t<0)return e?h(e,u):u;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||666===i.status&&4!==t)return h(e,0===e.avail_out?-5:u);if(i.strm=e,n=i.last_flush,i.last_flush=t,42===i.status)if(2===i.wrap)e.adler=0,y(i,31),y(i,139),y(i,8),i.gzhead?(y(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),y(i,255&i.gzhead.time),y(i,i.gzhead.time>>8&255),y(i,i.gzhead.time>>16&255),y(i,i.gzhead.time>>24&255),y(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),y(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(y(i,255&i.gzhead.extra.length),y(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=s(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(y(i,0),y(i,0),y(i,0),y(i,0),y(i,0),y(i,9===i.level?2:2<=i.strategy||i.level<2?4:0),y(i,3),i.status=d);else{var c=8+(i.w_bits-8<<4)<<8;c|=(2<=i.strategy||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(c|=32),c+=31-c%31,i.status=d,_(i,c),0!==i.strstart&&(_(i,e.adler>>>16),_(i,65535&e.adler)),e.adler=1}if(69===i.status)if(i.gzhead.extra){for(a=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),g(e),a=i.pending,i.pending!==i.pending_buf_size));)y(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),g(e),a=i.pending,i.pending===i.pending_buf_size)){l=1;break}l=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,y(i,l)}while(0!==l);i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),0===l&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){a=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),g(e),a=i.pending,i.pending===i.pending_buf_size)){l=1;break}l=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,y(i,l)}while(0!==l);i.gzhead.hcrc&&i.pending>a&&(e.adler=s(e.adler,i.pending_buf,i.pending-a,a)),0===l&&(i.status=103)}else i.status=103;if(103===i.status&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&g(e),i.pending+2<=i.pending_buf_size&&(y(i,255&e.adler),y(i,e.adler>>8&255),e.adler=0,i.status=d)):i.status=d),0!==i.pending){if(g(e),0===e.avail_out)return i.last_flush=-1,0}else if(0===e.avail_in&&p(t)<=p(n)&&4!==t)return h(e,-5);if(666===i.status&&0!==e.avail_in)return h(e,-5);if(0!==e.avail_in||0!==i.lookahead||0!==t&&666!==i.status){var b=2===i.strategy?function(e,t){for(var n;;){if(0===e.lookahead&&(w(e),0===e.lookahead)){if(0===t)return 1;break}if(e.match_length=0,n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,n&&(v(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(v(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(v(e,!1),0===e.strm.avail_out)?1:2}(i,t):3===i.strategy?function(e,t){for(var n,r,i,a,s=e.window;;){if(e.lookahead<=f){if(w(e),e.lookahead<=f&&0===t)return 1;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=3&&0<e.strstart&&(r=s[i=e.strstart-1])===s[++i]&&r===s[++i]&&r===s[++i]){a=e.strstart+f;do{}while(r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&r===s[++i]&&i<a);e.match_length=f-(a-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=3?(n=o._tr_tally(e,1,e.match_length-3),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(n=o._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),n&&(v(e,!1),0===e.strm.avail_out))return 1}return e.insert=0,4===t?(v(e,!0),0===e.strm.avail_out?3:4):e.last_lit&&(v(e,!1),0===e.strm.avail_out)?1:2}(i,t):r[i.level].func(i,t);if(3!==b&&4!==b||(i.status=666),1===b||3===b)return 0===e.avail_out&&(i.last_flush=-1),0;if(2===b&&(1===t?o._tr_align(i):5!==t&&(o._tr_stored_block(i,0,0,!1),3===t&&(m(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),g(e),0===e.avail_out))return i.last_flush=-1,0}return 4!==t?0:i.wrap<=0?1:(2===i.wrap?(y(i,255&e.adler),y(i,e.adler>>8&255),y(i,e.adler>>16&255),y(i,e.adler>>24&255),y(i,255&e.total_in),y(i,e.total_in>>8&255),y(i,e.total_in>>16&255),y(i,e.total_in>>24&255)):(_(i,e.adler>>>16),_(i,65535&e.adler)),g(e),0<i.wrap&&(i.wrap=-i.wrap),0!==i.pending?0:1)},n.deflateEnd=function(e){var t;return e&&e.state?42!==(t=e.state.status)&&69!==t&&73!==t&&91!==t&&103!==t&&t!==d&&666!==t?h(e,u):(e.state=null,t===d?h(e,-3):0):u},n.deflateSetDictionary=function(e,t){var n,r,o,s,l,f,c,d,h=t.length;if(!e||!e.state)return u;if(2===(s=(n=e.state).wrap)||1===s&&42!==n.status||n.lookahead)return u;for(1===s&&(e.adler=a(e.adler,t,h,0)),n.wrap=0,h>=n.w_size&&(0===s&&(m(n.head),n.strstart=0,n.block_start=0,n.insert=0),d=new i.Buf8(n.w_size),i.arraySet(d,t,h-n.w_size,n.w_size,0),t=d,h=n.w_size),l=e.avail_in,f=e.next_in,c=e.input,e.avail_in=h,e.next_in=0,e.input=t,w(n);n.lookahead>=3;){for(r=n.strstart,o=n.lookahead-2;n.ins_h=(n.ins_h<<n.hash_shift^n.window[r+3-1])&n.hash_mask,n.prev[r&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=r,r++,--o;);n.strstart=r,n.lookahead=2,w(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=2,n.match_available=0,e.next_in=f,e.input=c,e.avail_in=l,n.wrap=s,0},n.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./messages":51,"./trees":52}],47:[function(e,t,n){"use strict";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,n){"use strict";t.exports=function(e,t){var n,r,i,o,a,s,l,u,f,c,d,h,p,m,g,v,y,_,b,w,x,E,T,k,C;n=e.state,r=e.next_in,k=e.input,i=r+(e.avail_in-5),o=e.next_out,C=e.output,a=o-(t-e.avail_out),s=o+(e.avail_out-257),l=n.dmax,u=n.wsize,f=n.whave,c=n.wnext,d=n.window,h=n.hold,p=n.bits,m=n.lencode,g=n.distcode,v=(1<<n.lenbits)-1,y=(1<<n.distbits)-1;e:do{p<15&&(h+=k[r++]<<p,p+=8,h+=k[r++]<<p,p+=8),_=m[h&v];t:for(;;){if(h>>>=b=_>>>24,p-=b,0==(b=_>>>16&255))C[o++]=65535&_;else{if(!(16&b)){if(0==(64&b)){_=m[(65535&_)+(h&(1<<b)-1)];continue t}if(32&b){n.mode=12;break e}e.msg="invalid literal/length code",n.mode=30;break e}w=65535&_,(b&=15)&&(p<b&&(h+=k[r++]<<p,p+=8),w+=h&(1<<b)-1,h>>>=b,p-=b),p<15&&(h+=k[r++]<<p,p+=8,h+=k[r++]<<p,p+=8),_=g[h&y];n:for(;;){if(h>>>=b=_>>>24,p-=b,!(16&(b=_>>>16&255))){if(0==(64&b)){_=g[(65535&_)+(h&(1<<b)-1)];continue n}e.msg="invalid distance code",n.mode=30;break e}if(x=65535&_,p<(b&=15)&&(h+=k[r++]<<p,(p+=8)<b&&(h+=k[r++]<<p,p+=8)),l<(x+=h&(1<<b)-1)){e.msg="invalid distance too far back",n.mode=30;break e}if(h>>>=b,p-=b,(b=o-a)<x){if(f<(b=x-b)&&n.sane){e.msg="invalid distance too far back",n.mode=30;break e}if(T=d,(E=0)===c){if(E+=u-b,b<w){for(w-=b;C[o++]=d[E++],--b;);E=o-x,T=C}}else if(c<b){if(E+=u+c-b,(b-=c)<w){for(w-=b;C[o++]=d[E++],--b;);if(E=0,c<w){for(w-=b=c;C[o++]=d[E++],--b;);E=o-x,T=C}}}else if(E+=c-b,b<w){for(w-=b;C[o++]=d[E++],--b;);E=o-x,T=C}for(;2<w;)C[o++]=T[E++],C[o++]=T[E++],C[o++]=T[E++],w-=3;w&&(C[o++]=T[E++],1<w&&(C[o++]=T[E++]))}else{for(E=o-x;C[o++]=C[E++],C[o++]=C[E++],C[o++]=C[E++],2<(w-=3););w&&(C[o++]=C[E++],1<w&&(C[o++]=C[E++]))}break}}break}}while(r<i&&o<s);r-=w=p>>3,h&=(1<<(p-=w<<3))-1,e.next_in=r,e.next_out=o,e.avail_in=r<i?i-r+5:5-(r-i),e.avail_out=o<s?s-o+257:257-(o-s),n.hold=h,n.bits=p}},{}],49:[function(e,t,n){"use strict";var r=e("../utils/common"),i=e("./adler32"),o=e("./crc32"),a=e("./inffast"),s=e("./inftrees"),l=-2;function u(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function f(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new r.Buf16(320),this.work=new r.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function c(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=1,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new r.Buf32(852),t.distcode=t.distdyn=new r.Buf32(592),t.sane=1,t.back=-1,0):l}function d(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,c(e)):l}function h(e,t){var n,r;return e&&e.state?(r=e.state,t<0?(n=0,t=-t):(n=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?l:(null!==r.window&&r.wbits!==t&&(r.window=null),r.wrap=n,r.wbits=t,d(e))):l}function p(e,t){var n,r;return e?(r=new f,(e.state=r).window=null,0!==(n=h(e,t))&&(e.state=null),n):l}var m,g,v=!0;function y(e){if(v){var t;for(m=new r.Buf32(512),g=new r.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(s(1,e.lens,0,288,m,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;s(2,e.lens,0,32,g,0,e.work,{bits:5}),v=!1}e.lencode=m,e.lenbits=9,e.distcode=g,e.distbits=5}function _(e,t,n,i){var o,a=e.state;return null===a.window&&(a.wsize=1<<a.wbits,a.wnext=0,a.whave=0,a.window=new r.Buf8(a.wsize)),i>=a.wsize?(r.arraySet(a.window,t,n-a.wsize,a.wsize,0),a.wnext=0,a.whave=a.wsize):(i<(o=a.wsize-a.wnext)&&(o=i),r.arraySet(a.window,t,n-i,o,a.wnext),(i-=o)?(r.arraySet(a.window,t,n-i,i,0),a.wnext=i,a.whave=a.wsize):(a.wnext+=o,a.wnext===a.wsize&&(a.wnext=0),a.whave<a.wsize&&(a.whave+=o))),0}n.inflateReset=d,n.inflateReset2=h,n.inflateResetKeep=c,n.inflateInit=function(e){return p(e,15)},n.inflateInit2=p,n.inflate=function(e,t){var n,f,c,d,h,p,m,g,v,b,w,x,E,T,k,C,S,A,D,I,N,O,R,j,L=0,P=new r.Buf8(4),B=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return l;12===(n=e.state).mode&&(n.mode=13),h=e.next_out,c=e.output,m=e.avail_out,d=e.next_in,f=e.input,p=e.avail_in,g=n.hold,v=n.bits,b=p,w=m,O=0;e:for(;;)switch(n.mode){case 1:if(0===n.wrap){n.mode=13;break}for(;v<16;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}if(2&n.wrap&&35615===g){P[n.check=0]=255&g,P[1]=g>>>8&255,n.check=o(n.check,P,2,0),v=g=0,n.mode=2;break}if(n.flags=0,n.head&&(n.head.done=!1),!(1&n.wrap)||(((255&g)<<8)+(g>>8))%31){e.msg="incorrect header check",n.mode=30;break}if(8!=(15&g)){e.msg="unknown compression method",n.mode=30;break}if(v-=4,N=8+(15&(g>>>=4)),0===n.wbits)n.wbits=N;else if(N>n.wbits){e.msg="invalid window size",n.mode=30;break}n.dmax=1<<N,e.adler=n.check=1,n.mode=512&g?10:12,v=g=0;break;case 2:for(;v<16;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}if(n.flags=g,8!=(255&n.flags)){e.msg="unknown compression method",n.mode=30;break}if(57344&n.flags){e.msg="unknown header flags set",n.mode=30;break}n.head&&(n.head.text=g>>8&1),512&n.flags&&(P[0]=255&g,P[1]=g>>>8&255,n.check=o(n.check,P,2,0)),v=g=0,n.mode=3;case 3:for(;v<32;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}n.head&&(n.head.time=g),512&n.flags&&(P[0]=255&g,P[1]=g>>>8&255,P[2]=g>>>16&255,P[3]=g>>>24&255,n.check=o(n.check,P,4,0)),v=g=0,n.mode=4;case 4:for(;v<16;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}n.head&&(n.head.xflags=255&g,n.head.os=g>>8),512&n.flags&&(P[0]=255&g,P[1]=g>>>8&255,n.check=o(n.check,P,2,0)),v=g=0,n.mode=5;case 5:if(1024&n.flags){for(;v<16;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}n.length=g,n.head&&(n.head.extra_len=g),512&n.flags&&(P[0]=255&g,P[1]=g>>>8&255,n.check=o(n.check,P,2,0)),v=g=0}else n.head&&(n.head.extra=null);n.mode=6;case 6:if(1024&n.flags&&(p<(x=n.length)&&(x=p),x&&(n.head&&(N=n.head.extra_len-n.length,n.head.extra||(n.head.extra=new Array(n.head.extra_len)),r.arraySet(n.head.extra,f,d,x,N)),512&n.flags&&(n.check=o(n.check,f,x,d)),p-=x,d+=x,n.length-=x),n.length))break e;n.length=0,n.mode=7;case 7:if(2048&n.flags){if(0===p)break e;for(x=0;N=f[d+x++],n.head&&N&&n.length<65536&&(n.head.name+=String.fromCharCode(N)),N&&x<p;);if(512&n.flags&&(n.check=o(n.check,f,x,d)),p-=x,d+=x,N)break e}else n.head&&(n.head.name=null);n.length=0,n.mode=8;case 8:if(4096&n.flags){if(0===p)break e;for(x=0;N=f[d+x++],n.head&&N&&n.length<65536&&(n.head.comment+=String.fromCharCode(N)),N&&x<p;);if(512&n.flags&&(n.check=o(n.check,f,x,d)),p-=x,d+=x,N)break e}else n.head&&(n.head.comment=null);n.mode=9;case 9:if(512&n.flags){for(;v<16;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}if(g!==(65535&n.check)){e.msg="header crc mismatch",n.mode=30;break}v=g=0}n.head&&(n.head.hcrc=n.flags>>9&1,n.head.done=!0),e.adler=n.check=0,n.mode=12;break;case 10:for(;v<32;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}e.adler=n.check=u(g),v=g=0,n.mode=11;case 11:if(0===n.havedict)return e.next_out=h,e.avail_out=m,e.next_in=d,e.avail_in=p,n.hold=g,n.bits=v,2;e.adler=n.check=1,n.mode=12;case 12:if(5===t||6===t)break e;case 13:if(n.last){g>>>=7&v,v-=7&v,n.mode=27;break}for(;v<3;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}switch(n.last=1&g,v-=1,3&(g>>>=1)){case 0:n.mode=14;break;case 1:if(y(n),n.mode=20,6!==t)break;g>>>=2,v-=2;break e;case 2:n.mode=17;break;case 3:e.msg="invalid block type",n.mode=30}g>>>=2,v-=2;break;case 14:for(g>>>=7&v,v-=7&v;v<32;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}if((65535&g)!=(g>>>16^65535)){e.msg="invalid stored block lengths",n.mode=30;break}if(n.length=65535&g,v=g=0,n.mode=15,6===t)break e;case 15:n.mode=16;case 16:if(x=n.length){if(p<x&&(x=p),m<x&&(x=m),0===x)break e;r.arraySet(c,f,d,x,h),p-=x,d+=x,m-=x,h+=x,n.length-=x;break}n.mode=12;break;case 17:for(;v<14;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}if(n.nlen=257+(31&g),g>>>=5,v-=5,n.ndist=1+(31&g),g>>>=5,v-=5,n.ncode=4+(15&g),g>>>=4,v-=4,286<n.nlen||30<n.ndist){e.msg="too many length or distance symbols",n.mode=30;break}n.have=0,n.mode=18;case 18:for(;n.have<n.ncode;){for(;v<3;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}n.lens[B[n.have++]]=7&g,g>>>=3,v-=3}for(;n.have<19;)n.lens[B[n.have++]]=0;if(n.lencode=n.lendyn,n.lenbits=7,R={bits:n.lenbits},O=s(0,n.lens,0,19,n.lencode,0,n.work,R),n.lenbits=R.bits,O){e.msg="invalid code lengths set",n.mode=30;break}n.have=0,n.mode=19;case 19:for(;n.have<n.nlen+n.ndist;){for(;C=(L=n.lencode[g&(1<<n.lenbits)-1])>>>16&255,S=65535&L,!((k=L>>>24)<=v);){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}if(S<16)g>>>=k,v-=k,n.lens[n.have++]=S;else{if(16===S){for(j=k+2;v<j;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}if(g>>>=k,v-=k,0===n.have){e.msg="invalid bit length repeat",n.mode=30;break}N=n.lens[n.have-1],x=3+(3&g),g>>>=2,v-=2}else if(17===S){for(j=k+3;v<j;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}v-=k,N=0,x=3+(7&(g>>>=k)),g>>>=3,v-=3}else{for(j=k+7;v<j;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}v-=k,N=0,x=11+(127&(g>>>=k)),g>>>=7,v-=7}if(n.have+x>n.nlen+n.ndist){e.msg="invalid bit length repeat",n.mode=30;break}for(;x--;)n.lens[n.have++]=N}}if(30===n.mode)break;if(0===n.lens[256]){e.msg="invalid code -- missing end-of-block",n.mode=30;break}if(n.lenbits=9,R={bits:n.lenbits},O=s(1,n.lens,0,n.nlen,n.lencode,0,n.work,R),n.lenbits=R.bits,O){e.msg="invalid literal/lengths set",n.mode=30;break}if(n.distbits=6,n.distcode=n.distdyn,R={bits:n.distbits},O=s(2,n.lens,n.nlen,n.ndist,n.distcode,0,n.work,R),n.distbits=R.bits,O){e.msg="invalid distances set",n.mode=30;break}if(n.mode=20,6===t)break e;case 20:n.mode=21;case 21:if(6<=p&&258<=m){e.next_out=h,e.avail_out=m,e.next_in=d,e.avail_in=p,n.hold=g,n.bits=v,a(e,w),h=e.next_out,c=e.output,m=e.avail_out,d=e.next_in,f=e.input,p=e.avail_in,g=n.hold,v=n.bits,12===n.mode&&(n.back=-1);break}for(n.back=0;C=(L=n.lencode[g&(1<<n.lenbits)-1])>>>16&255,S=65535&L,!((k=L>>>24)<=v);){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}if(C&&0==(240&C)){for(A=k,D=C,I=S;C=(L=n.lencode[I+((g&(1<<A+D)-1)>>A)])>>>16&255,S=65535&L,!(A+(k=L>>>24)<=v);){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}g>>>=A,v-=A,n.back+=A}if(g>>>=k,v-=k,n.back+=k,n.length=S,0===C){n.mode=26;break}if(32&C){n.back=-1,n.mode=12;break}if(64&C){e.msg="invalid literal/length code",n.mode=30;break}n.extra=15&C,n.mode=22;case 22:if(n.extra){for(j=n.extra;v<j;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}n.length+=g&(1<<n.extra)-1,g>>>=n.extra,v-=n.extra,n.back+=n.extra}n.was=n.length,n.mode=23;case 23:for(;C=(L=n.distcode[g&(1<<n.distbits)-1])>>>16&255,S=65535&L,!((k=L>>>24)<=v);){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}if(0==(240&C)){for(A=k,D=C,I=S;C=(L=n.distcode[I+((g&(1<<A+D)-1)>>A)])>>>16&255,S=65535&L,!(A+(k=L>>>24)<=v);){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}g>>>=A,v-=A,n.back+=A}if(g>>>=k,v-=k,n.back+=k,64&C){e.msg="invalid distance code",n.mode=30;break}n.offset=S,n.extra=15&C,n.mode=24;case 24:if(n.extra){for(j=n.extra;v<j;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}n.offset+=g&(1<<n.extra)-1,g>>>=n.extra,v-=n.extra,n.back+=n.extra}if(n.offset>n.dmax){e.msg="invalid distance too far back",n.mode=30;break}n.mode=25;case 25:if(0===m)break e;if(x=w-m,n.offset>x){if((x=n.offset-x)>n.whave&&n.sane){e.msg="invalid distance too far back",n.mode=30;break}E=x>n.wnext?(x-=n.wnext,n.wsize-x):n.wnext-x,x>n.length&&(x=n.length),T=n.window}else T=c,E=h-n.offset,x=n.length;for(m<x&&(x=m),m-=x,n.length-=x;c[h++]=T[E++],--x;);0===n.length&&(n.mode=21);break;case 26:if(0===m)break e;c[h++]=n.length,m--,n.mode=21;break;case 27:if(n.wrap){for(;v<32;){if(0===p)break e;p--,g|=f[d++]<<v,v+=8}if(w-=m,e.total_out+=w,n.total+=w,w&&(e.adler=n.check=n.flags?o(n.check,c,w,h-w):i(n.check,c,w,h-w)),w=m,(n.flags?g:u(g))!==n.check){e.msg="incorrect data check",n.mode=30;break}v=g=0}n.mode=28;case 28:if(n.wrap&&n.flags){for(;v<32;){if(0===p)break e;p--,g+=f[d++]<<v,v+=8}if(g!==(4294967295&n.total)){e.msg="incorrect length check",n.mode=30;break}v=g=0}n.mode=29;case 29:O=1;break e;case 30:O=-3;break e;case 31:return-4;case 32:default:return l}return e.next_out=h,e.avail_out=m,e.next_in=d,e.avail_in=p,n.hold=g,n.bits=v,(n.wsize||w!==e.avail_out&&n.mode<30&&(n.mode<27||4!==t))&&_(e,e.output,e.next_out,w-e.avail_out)?(n.mode=31,-4):(b-=e.avail_in,w-=e.avail_out,e.total_in+=b,e.total_out+=w,n.total+=w,n.wrap&&w&&(e.adler=n.check=n.flags?o(n.check,c,w,e.next_out-w):i(n.check,c,w,e.next_out-w)),e.data_type=n.bits+(n.last?64:0)+(12===n.mode?128:0)+(20===n.mode||15===n.mode?256:0),(0==b&&0===w||4===t)&&0===O&&(O=-5),O)},n.inflateEnd=function(e){if(!e||!e.state)return l;var t=e.state;return t.window&&(t.window=null),e.state=null,0},n.inflateGetHeader=function(e,t){var n;return e&&e.state?0==(2&(n=e.state).wrap)?l:((n.head=t).done=!1,0):l},n.inflateSetDictionary=function(e,t){var n,r=t.length;return e&&e.state?0!==(n=e.state).wrap&&11!==n.mode?l:11===n.mode&&i(1,t,r,0)!==n.check?-3:_(e,t,r,r)?(n.mode=31,-4):(n.havedict=1,0):l},n.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":41,"./adler32":43,"./crc32":45,"./inffast":48,"./inftrees":50}],50:[function(e,t,n){"use strict";var r=e("../utils/common"),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],o=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],a=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,n,l,u,f,c,d){var h,p,m,g,v,y,_,b,w,x=d.bits,E=0,T=0,k=0,C=0,S=0,A=0,D=0,I=0,N=0,O=0,R=null,j=0,L=new r.Buf16(16),P=new r.Buf16(16),B=null,z=0;for(E=0;E<=15;E++)L[E]=0;for(T=0;T<l;T++)L[t[n+T]]++;for(S=x,C=15;1<=C&&0===L[C];C--);if(C<S&&(S=C),0===C)return u[f++]=20971520,u[f++]=20971520,d.bits=1,0;for(k=1;k<C&&0===L[k];k++);for(S<k&&(S=k),E=I=1;E<=15;E++)if(I<<=1,(I-=L[E])<0)return-1;if(0<I&&(0===e||1!==C))return-1;for(P[1]=0,E=1;E<15;E++)P[E+1]=P[E]+L[E];for(T=0;T<l;T++)0!==t[n+T]&&(c[P[t[n+T]]++]=T);if(y=0===e?(R=B=c,19):1===e?(R=i,j-=257,B=o,z-=257,256):(R=a,B=s,-1),E=k,v=f,D=T=O=0,m=-1,g=(N=1<<(A=S))-1,1===e&&852<N||2===e&&592<N)return 1;for(;;){for(_=E-D,w=c[T]<y?(b=0,c[T]):c[T]>y?(b=B[z+c[T]],R[j+c[T]]):(b=96,0),h=1<<E-D,k=p=1<<A;u[v+(O>>D)+(p-=h)]=_<<24|b<<16|w|0,0!==p;);for(h=1<<E-1;O&h;)h>>=1;if(0!==h?(O&=h-1,O+=h):O=0,T++,0==--L[E]){if(E===C)break;E=t[n+c[T]]}if(S<E&&(O&g)!==m){for(0===D&&(D=S),v+=k,I=1<<(A=E-D);A+D<C&&!((I-=L[A+D])<=0);)A++,I<<=1;if(N+=1<<A,1===e&&852<N||2===e&&592<N)return 1;u[m=O&g]=S<<24|A<<16|v-f|0}}return 0!==O&&(u[v+O]=E-D<<24|64<<16|0),d.bits=S,0}},{"../utils/common":41}],51:[function(e,t,n){"use strict";t.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],52:[function(e,t,n){"use strict";var r=e("../utils/common");function i(e){for(var t=e.length;0<=--t;)e[t]=0}var o=256,a=286,s=30,l=15,u=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],f=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],c=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],d=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],h=new Array(576);i(h);var p=new Array(60);i(p);var m=new Array(512);i(m);var g=new Array(256);i(g);var v=new Array(29);i(v);var y,_,b,w=new Array(s);function x(e,t,n,r,i){this.static_tree=e,this.extra_bits=t,this.extra_base=n,this.elems=r,this.max_length=i,this.has_stree=e&&e.length}function E(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function T(e){return e<256?m[e]:m[256+(e>>>7)]}function k(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function C(e,t,n){e.bi_valid>16-n?(e.bi_buf|=t<<e.bi_valid&65535,k(e,e.bi_buf),e.bi_buf=t>>16-e.bi_valid,e.bi_valid+=n-16):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=n)}function S(e,t,n){C(e,n[2*t],n[2*t+1])}function A(e,t){for(var n=0;n|=1&e,e>>>=1,n<<=1,0<--t;);return n>>>1}function D(e,t,n){var r,i,o=new Array(16),a=0;for(r=1;r<=l;r++)o[r]=a=a+n[r-1]<<1;for(i=0;i<=t;i++){var s=e[2*i+1];0!==s&&(e[2*i]=A(o[s]++,s))}}function I(e){var t;for(t=0;t<a;t++)e.dyn_ltree[2*t]=0;for(t=0;t<s;t++)e.dyn_dtree[2*t]=0;for(t=0;t<19;t++)e.bl_tree[2*t]=0;e.dyn_ltree[512]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function N(e){8<e.bi_valid?k(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function O(e,t,n,r){var i=2*t,o=2*n;return e[i]<e[o]||e[i]===e[o]&&r[t]<=r[n]}function R(e,t,n){for(var r=e.heap[n],i=n<<1;i<=e.heap_len&&(i<e.heap_len&&O(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!O(t,r,e.heap[i],e.depth));)e.heap[n]=e.heap[i],n=i,i<<=1;e.heap[n]=r}function j(e,t,n){var r,i,a,s,l=0;if(0!==e.last_lit)for(;r=e.pending_buf[e.d_buf+2*l]<<8|e.pending_buf[e.d_buf+2*l+1],i=e.pending_buf[e.l_buf+l],l++,0===r?S(e,i,t):(S(e,(a=g[i])+o+1,t),0!==(s=u[a])&&C(e,i-=v[a],s),S(e,a=T(--r),n),0!==(s=f[a])&&C(e,r-=w[a],s)),l<e.last_lit;);S(e,256,t)}function L(e,t){var n,r,i,o=t.dyn_tree,a=t.stat_desc.static_tree,s=t.stat_desc.has_stree,u=t.stat_desc.elems,f=-1;for(e.heap_len=0,e.heap_max=573,n=0;n<u;n++)0!==o[2*n]?(e.heap[++e.heap_len]=f=n,e.depth[n]=0):o[2*n+1]=0;for(;e.heap_len<2;)o[2*(i=e.heap[++e.heap_len]=f<2?++f:0)]=1,e.depth[i]=0,e.opt_len--,s&&(e.static_len-=a[2*i+1]);for(t.max_code=f,n=e.heap_len>>1;1<=n;n--)R(e,o,n);for(i=u;n=e.heap[1],e.heap[1]=e.heap[e.heap_len--],R(e,o,1),r=e.heap[1],e.heap[--e.heap_max]=n,e.heap[--e.heap_max]=r,o[2*i]=o[2*n]+o[2*r],e.depth[i]=(e.depth[n]>=e.depth[r]?e.depth[n]:e.depth[r])+1,o[2*n+1]=o[2*r+1]=i,e.heap[1]=i++,R(e,o,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var n,r,i,o,a,s,u=t.dyn_tree,f=t.max_code,c=t.stat_desc.static_tree,d=t.stat_desc.has_stree,h=t.stat_desc.extra_bits,p=t.stat_desc.extra_base,m=t.stat_desc.max_length,g=0;for(o=0;o<=l;o++)e.bl_count[o]=0;for(u[2*e.heap[e.heap_max]+1]=0,n=e.heap_max+1;n<573;n++)m<(o=u[2*u[2*(r=e.heap[n])+1]+1]+1)&&(o=m,g++),u[2*r+1]=o,f<r||(e.bl_count[o]++,a=0,p<=r&&(a=h[r-p]),s=u[2*r],e.opt_len+=s*(o+a),d&&(e.static_len+=s*(c[2*r+1]+a)));if(0!==g){do{for(o=m-1;0===e.bl_count[o];)o--;e.bl_count[o]--,e.bl_count[o+1]+=2,e.bl_count[m]--,g-=2}while(0<g);for(o=m;0!==o;o--)for(r=e.bl_count[o];0!==r;)f<(i=e.heap[--n])||(u[2*i+1]!==o&&(e.opt_len+=(o-u[2*i+1])*u[2*i],u[2*i+1]=o),r--)}}(e,t),D(o,f,e.bl_count)}function P(e,t,n){var r,i,o=-1,a=t[1],s=0,l=7,u=4;for(0===a&&(l=138,u=3),t[2*(n+1)+1]=65535,r=0;r<=n;r++)i=a,a=t[2*(r+1)+1],++s<l&&i===a||(s<u?e.bl_tree[2*i]+=s:0!==i?(i!==o&&e.bl_tree[2*i]++,e.bl_tree[32]++):s<=10?e.bl_tree[34]++:e.bl_tree[36]++,o=i,u=(s=0)===a?(l=138,3):i===a?(l=6,3):(l=7,4))}function B(e,t,n){var r,i,o=-1,a=t[1],s=0,l=7,u=4;for(0===a&&(l=138,u=3),r=0;r<=n;r++)if(i=a,a=t[2*(r+1)+1],!(++s<l&&i===a)){if(s<u)for(;S(e,i,e.bl_tree),0!=--s;);else 0!==i?(i!==o&&(S(e,i,e.bl_tree),s--),S(e,16,e.bl_tree),C(e,s-3,2)):s<=10?(S(e,17,e.bl_tree),C(e,s-3,3)):(S(e,18,e.bl_tree),C(e,s-11,7));o=i,u=(s=0)===a?(l=138,3):i===a?(l=6,3):(l=7,4)}}i(w);var z=!1;function F(e,t,n,i){C(e,0+(i?1:0),3),function(e,t,n,i){N(e),k(e,n),k(e,~n),r.arraySet(e.pending_buf,e.window,t,n,e.pending),e.pending+=n}(e,t,n)}n._tr_init=function(e){z||(function(){var e,t,n,r,i,o=new Array(16);for(r=n=0;r<28;r++)for(v[r]=n,e=0;e<1<<u[r];e++)g[n++]=r;for(g[n-1]=r,r=i=0;r<16;r++)for(w[r]=i,e=0;e<1<<f[r];e++)m[i++]=r;for(i>>=7;r<s;r++)for(w[r]=i<<7,e=0;e<1<<f[r]-7;e++)m[256+i++]=r;for(t=0;t<=l;t++)o[t]=0;for(e=0;e<=143;)h[2*e+1]=8,e++,o[8]++;for(;e<=255;)h[2*e+1]=9,e++,o[9]++;for(;e<=279;)h[2*e+1]=7,e++,o[7]++;for(;e<=287;)h[2*e+1]=8,e++,o[8]++;for(D(h,287,o),e=0;e<s;e++)p[2*e+1]=5,p[2*e]=A(e,5);y=new x(h,u,257,a,l),_=new x(p,f,0,s,l),b=new x(new Array(0),c,0,19,7)}(),z=!0),e.l_desc=new E(e.dyn_ltree,y),e.d_desc=new E(e.dyn_dtree,_),e.bl_desc=new E(e.bl_tree,b),e.bi_buf=0,e.bi_valid=0,I(e)},n._tr_stored_block=F,n._tr_flush_block=function(e,t,n,r){var i,a,s=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,n=4093624447;for(t=0;t<=31;t++,n>>>=1)if(1&n&&0!==e.dyn_ltree[2*t])return 0;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return 1;for(t=32;t<o;t++)if(0!==e.dyn_ltree[2*t])return 1;return 0}(e)),L(e,e.l_desc),L(e,e.d_desc),s=function(e){var t;for(P(e,e.dyn_ltree,e.l_desc.max_code),P(e,e.dyn_dtree,e.d_desc.max_code),L(e,e.bl_desc),t=18;3<=t&&0===e.bl_tree[2*d[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(a=e.static_len+3+7>>>3)<=i&&(i=a)):i=a=n+5,n+4<=i&&-1!==t?F(e,t,n,r):4===e.strategy||a===i?(C(e,2+(r?1:0),3),j(e,h,p)):(C(e,4+(r?1:0),3),function(e,t,n,r){var i;for(C(e,t-257,5),C(e,n-1,5),C(e,r-4,4),i=0;i<r;i++)C(e,e.bl_tree[2*d[i]+1],3);B(e,e.dyn_ltree,t-1),B(e,e.dyn_dtree,n-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,s+1),j(e,e.dyn_ltree,e.dyn_dtree)),I(e),r&&N(e)},n._tr_tally=function(e,t,n){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&n,e.last_lit++,0===t?e.dyn_ltree[2*n]++:(e.matches++,t--,e.dyn_ltree[2*(g[n]+o+1)]++,e.dyn_dtree[2*T(t)]++),e.last_lit===e.lit_bufsize-1},n._tr_align=function(e){C(e,2,3),S(e,256,h),function(e){16===e.bi_valid?(k(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{"../utils/common":41}],53:[function(e,t,n){"use strict";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,n){"use strict";t.exports="function"==typeof r?r:function(){var e=[].slice.apply(arguments);e.splice(1,0,0),setTimeout.apply(null,e)}},{}]},{},[10])(10)}).call(this,n(7).Buffer,n(0),n(11).setImmediate)},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(8),i=n(9),o=n(10);function a(){return l.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return l.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=l.prototype:(null===e&&(e=new l(t)),e.length=t),e}function l(e,t,n){if(!(l.TYPED_ARRAY_SUPPORT||this instanceof l))return new l(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return c(this,e)}return u(this,e,t,n)}function u(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);l.TYPED_ARRAY_SUPPORT?(e=t).__proto__=l.prototype:e=d(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!l.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(t,n),i=(e=s(e,r)).write(t,n);i!==r&&(e=e.slice(0,i));return e}(e,t,n):function(e,t){if(l.isBuffer(t)){var n=0|h(t.length);return 0===(e=s(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?s(e,0):d(e,t);if("Buffer"===t.type&&o(t.data))return d(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function f(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function c(e,t){if(f(t),e=s(e,t<0?0:0|h(t)),!l.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function d(e,t){var n=t.length<0?0:0|h(t.length);e=s(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function h(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function p(e,t){if(l.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return U(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return M(e).length;default:if(r)return U(e).length;t=(""+t).toLowerCase(),r=!0}}function m(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return D(this,t,n);case"utf8":case"utf-8":return C(this,t,n);case"ascii":return S(this,t,n);case"latin1":case"binary":return A(this,t,n);case"base64":return k(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function g(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function v(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=l.from(t,r)),l.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,i);if("number"==typeof t)return t&=255,l.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,i){var o,a=1,s=e.length,l=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;a=2,s/=2,l/=2,n/=2}function u(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var f=-1;for(o=n;o<s;o++)if(u(e,o)===u(t,-1===f?0:o-f)){if(-1===f&&(f=o),o-f+1===l)return f*a}else-1!==f&&(o-=o-f),f=-1}else for(n+l>s&&(n=s-l),o=n;o>=0;o--){for(var c=!0,d=0;d<l;d++)if(u(e,o+d)!==u(t,d)){c=!1;break}if(c)return o}return-1}function _(e,t,n,r){n=Number(n)||0;var i=e.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var a=0;a<r;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function b(e,t,n,r){return H(U(t,e.length-n),e,n,r)}function w(e,t,n,r){return H(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function x(e,t,n,r){return w(e,t,n,r)}function E(e,t,n,r){return H(M(t),e,n,r)}function T(e,t,n,r){return H(function(e,t){for(var n,r,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(t,e.length-n),e,n,r)}function k(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function C(e,t,n){n=Math.min(e.length,n);for(var r=[],i=t;i<n;){var o,a,s,l,u=e[i],f=null,c=u>239?4:u>223?3:u>191?2:1;if(i+c<=n)switch(c){case 1:u<128&&(f=u);break;case 2:128==(192&(o=e[i+1]))&&(l=(31&u)<<6|63&o)>127&&(f=l);break;case 3:o=e[i+1],a=e[i+2],128==(192&o)&&128==(192&a)&&(l=(15&u)<<12|(63&o)<<6|63&a)>2047&&(l<55296||l>57343)&&(f=l);break;case 4:o=e[i+1],a=e[i+2],s=e[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(l=(15&u)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&l<1114112&&(f=l)}null===f?(f=65533,c=1):f>65535&&(f-=65536,r.push(f>>>10&1023|55296),f=56320|1023&f),r.push(f),i+=c}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}t.Buffer=l,t.SlowBuffer=function(e){+e!=e&&(e=0);return l.alloc(+e)},t.INSPECT_MAX_BYTES=50,l.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),l.poolSize=8192,l._augment=function(e){return e.__proto__=l.prototype,e},l.from=function(e,t,n){return u(null,e,t,n)},l.TYPED_ARRAY_SUPPORT&&(l.prototype.__proto__=Uint8Array.prototype,l.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&l[Symbol.species]===l&&Object.defineProperty(l,Symbol.species,{value:null,configurable:!0})),l.alloc=function(e,t,n){return function(e,t,n,r){return f(t),t<=0?s(e,t):void 0!==n?"string"==typeof r?s(e,t).fill(n,r):s(e,t).fill(n):s(e,t)}(null,e,t,n)},l.allocUnsafe=function(e){return c(null,e)},l.allocUnsafeSlow=function(e){return c(null,e)},l.isBuffer=function(e){return!(null==e||!e._isBuffer)},l.compare=function(e,t){if(!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,i=0,o=Math.min(n,r);i<o;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=l.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var a=e[n];if(!l.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,i),i+=a.length}return r},l.byteLength=p,l.prototype._isBuffer=!0,l.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},l.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},l.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},l.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?C(this,0,e):m.apply(this,arguments)},l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},l.prototype.compare=function(e,t,n,r,i){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(r>>>=0),a=(n>>>=0)-(t>>>=0),s=Math.min(o,a),u=this.slice(r,i),f=e.slice(t,n),c=0;c<s;++c)if(u[c]!==f[c]){o=u[c],a=f[c];break}return o<a?-1:a<o?1:0},l.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},l.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},l.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},l.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-t;if((void 0===n||n>i)&&(n=i),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return _(this,e,t,n);case"utf8":case"utf-8":return b(this,e,t,n);case"ascii":return w(this,e,t,n);case"latin1":case"binary":return x(this,e,t,n);case"base64":return E(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function S(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(127&e[i]);return r}function A(e,t,n){var r="";n=Math.min(e.length,n);for(var i=t;i<n;++i)r+=String.fromCharCode(e[i]);return r}function D(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=t;o<n;++o)i+=F(e[o]);return i}function I(e,t,n){for(var r=e.slice(t,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function N(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function O(e,t,n,r,i,o){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function R(e,t,n,r){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-n,2);i<o;++i)e[n+i]=(t&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function j(e,t,n,r){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-n,4);i<o;++i)e[n+i]=t>>>8*(r?i:3-i)&255}function L(e,t,n,r,i,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function P(e,t,n,r,o){return o||L(e,0,n,4),i.write(e,t,n,r,23,4),n+4}function B(e,t,n,r,o){return o||L(e,0,n,8),i.write(e,t,n,r,52,8),n+8}l.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),l.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=l.prototype;else{var i=t-e;n=new l(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+e]}return n},l.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r},l.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=this[e+--t],i=1;t>0&&(i*=256);)r+=this[e+--t]*i;return r},l.prototype.readUInt8=function(e,t){return t||N(e,1,this.length),this[e]},l.prototype.readUInt16LE=function(e,t){return t||N(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUInt16BE=function(e,t){return t||N(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUInt32LE=function(e,t){return t||N(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUInt32BE=function(e,t){return t||N(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=this[e],i=1,o=0;++o<t&&(i*=256);)r+=this[e+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*t)),r},l.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=t,i=1,o=this[e+--r];r>0&&(i*=256);)o+=this[e+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},l.prototype.readInt8=function(e,t){return t||N(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){t||N(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt16BE=function(e,t){t||N(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt32LE=function(e,t){return t||N(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return t||N(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readFloatLE=function(e,t){return t||N(e,4,this.length),i.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return t||N(e,4,this.length),i.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return t||N(e,8,this.length),i.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return t||N(e,8,this.length),i.read(this,e,!1,52,8)},l.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||O(this,e,t,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[t]=255&e;++o<n&&(i*=256);)this[t+o]=e/i&255;return t+n},l.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||O(this,e,t,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+n},l.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,1,255,0),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},l.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):R(this,e,t,!0),t+2},l.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):R(this,e,t,!1),t+2},l.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):j(this,e,t,!0),t+4},l.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):j(this,e,t,!1),t+4},l.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);O(this,e,t,n,i-1,-i)}var o=0,a=1,s=0;for(this[t]=255&e;++o<n&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+n},l.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var i=Math.pow(2,8*n-1);O(this,e,t,n,i-1,-i)}var o=n-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+n},l.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,1,127,-128),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):R(this,e,t,!0),t+2},l.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):R(this,e,t,!1),t+2},l.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,2147483647,-2147483648),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):j(this,e,t,!0),t+4},l.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||O(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):j(this,e,t,!1),t+4},l.prototype.writeFloatLE=function(e,t,n){return P(this,e,t,!0,n)},l.prototype.writeFloatBE=function(e,t,n){return P(this,e,t,!1,n)},l.prototype.writeDoubleLE=function(e,t,n){return B(this,e,t,!0,n)},l.prototype.writeDoubleBE=function(e,t,n){return B(this,e,t,!1,n)},l.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i,o=r-n;if(this===e&&n<t&&t<r)for(i=o-1;i>=0;--i)e[i+t]=this[i+n];else if(o<1e3||!l.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},l.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!l.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var a=l.isBuffer(e)?e:U(new l(e,r).toString()),s=a.length;for(o=0;o<n-t;++o)this[o+t]=a[o%s]}return this};var z=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function U(e,t){var n;t=t||1/0;for(var r=e.length,i=null,o=[],a=0;a<r;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!i){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(t-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function M(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(z,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function H(e,t,n,r){for(var i=0;i<r&&!(i+n>=t.length||i>=e.length);++i)t[i+n]=e[i];return i}}).call(this,n(0))},function(e,t,n){"use strict";t.byteLength=function(e){var t=u(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=u(e),a=r[0],s=r[1],l=new o(function(e,t,n){return 3*(t+n)/4-n}(0,a,s)),f=0,c=s>0?a-4:a;for(n=0;n<c;n+=4)t=i[e.charCodeAt(n)]<<18|i[e.charCodeAt(n+1)]<<12|i[e.charCodeAt(n+2)]<<6|i[e.charCodeAt(n+3)],l[f++]=t>>16&255,l[f++]=t>>8&255,l[f++]=255&t;2===s&&(t=i[e.charCodeAt(n)]<<2|i[e.charCodeAt(n+1)]>>4,l[f++]=255&t);1===s&&(t=i[e.charCodeAt(n)]<<10|i[e.charCodeAt(n+1)]<<4|i[e.charCodeAt(n+2)]>>2,l[f++]=t>>8&255,l[f++]=255&t);return l},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],a=0,s=n-i;a<s;a+=16383)o.push(f(e,a,a+16383>s?s:a+16383));1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,l=a.length;s<l;++s)r[s]=a[s],i[a.charCodeAt(s)]=s;function u(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function f(e,t,n){for(var i,o,a=[],s=t;s<n;s+=3)i=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
t.read=function(e,t,n,r,i){var o,a,s=8*i-r-1,l=(1<<s)-1,u=l>>1,f=-7,c=n?i-1:0,d=n?-1:1,h=e[t+c];for(c+=d,o=h&(1<<-f)-1,h>>=-f,f+=s;f>0;o=256*o+e[t+c],c+=d,f-=8);for(a=o&(1<<-f)-1,o>>=-f,f+=r;f>0;a=256*a+e[t+c],c+=d,f-=8);if(0===o)o=1-u;else{if(o===l)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),o-=u}return(h?-1:1)*a*Math.pow(2,o-r)},t.write=function(e,t,n,r,i,o){var a,s,l,u=8*o-i-1,f=(1<<u)-1,c=f>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:o-1,p=r?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=f):(a=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-a))<1&&(a--,l*=2),(t+=a+c>=1?d/l:d*Math.pow(2,1-c))*l>=2&&(a++,l/=2),a+c>=f?(s=0,a=f):a+c>=1?(s=(t*l-1)*Math.pow(2,i),a+=c):(s=t*Math.pow(2,c-1)*Math.pow(2,i),a=0));i>=8;e[n+h]=255&s,h+=p,s/=256,i-=8);for(a=a<<i|s,u+=i;u>0;e[n+h]=255&a,h+=p,a/=256,u-=8);e[n+h-p]|=128*m}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,i=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(i.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new o(i.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(12),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(0))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,i,o,a,s,l=1,u={},f=!1,c=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){p(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((o=new MessageChannel).port1.onmessage=function(e){p(e.data)},r=function(e){o.port2.postMessage(e)}):c&&"onreadystatechange"in c.createElement("script")?(i=c.documentElement,r=function(e){var t=c.createElement("script");t.onreadystatechange=function(){p(e),t.onreadystatechange=null,i.removeChild(t),t=null},i.appendChild(t)}):r=function(e){setTimeout(p,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&p(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),r=function(t){e.postMessage(a+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var i={callback:e,args:t};return u[l]=i,r(l),l++},d.clearImmediate=h}function h(e){delete u[e]}function p(e){if(f)setTimeout(p,0,e);else{var t=u[e];if(t){f=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{h(e),f=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(0),n(13))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,u=[],f=!1,c=-1;function d(){f&&l&&(f=!1,l.length?u=l.concat(u):c=-1,u.length&&h())}function h(){if(!f){var e=s(d);f=!0;for(var t=u.length;t;){for(l=u,u=[];++c<t;)l&&l[c].run();c=-1,t=u.length}l=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function p(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];u.push(new p(e,t)),1!==u.length||f||s(h)},p.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(1));t.default=class{constructor(e){this.options=e,this.$gameRoundsNav=i.default("#jsGameRoundsNav"),this.$gameRounds=i.default("#jsGameRounds"),this.$gameQuestion=i.default("#jsGameQuestion")}parse(e){this.$gameRoundsNav.html("").css("display","flex"),this.$gameRounds.html(""),this.$gameQuestion.html("");const t=i.default(i.default.parseXML(e.trim())).find("package");i.default("#jsGameHeader").css("display","flex"),i.default("#jsGameName").html(t.attr("name")),i.default("#jsGameDate").html(t.attr("date")),i.default("#jsGameVersion").html(t.attr("version")),i.default("#jsGameId").html(t.attr("id")),this.parseRounds(t)}parseRounds(e){const t=this;e.find("round").each((function(e){const n=i.default(this);i.default("<a>",{class:"nav-link"+(0===e?" active":""),html:n.attr("name"),"data-toggle":"tab",href:"#round"+e}).appendTo(i.default("<li>",{class:"nav-item"}).appendTo(t.$gameRoundsNav));const r=i.default("<div>",{class:"tab-pane fade"+(0===e?" active show":""),id:"round"+e}),o=i.default("<table>",{class:"table table-hover"}).appendTo(r);t.parseThemes(n,o),r.appendTo(t.$gameRounds)}))}parseThemes(e,t){const n=this;e.find("themes").find("theme").each((function(){const e=i.default("<tr>",{}),r=i.default(this),o=r.attr("name");i.default("<td>",{html:o}).appendTo(e),n.parseQuestions(r,o,e),e.appendTo(t)}))}parseQuestions(e,t,n){const r=this;e.find("questions").find("question").each((function(){const e=i.default(this),o=i.default(this).attr("price"),a=e.find("type");i.default("<td>",{class:"question-cell"+(a.length?" question-cell_star":""),html:o,click:function(){if(r.$gameQuestion.html(""),i.default("<h4>",{html:t+", "+o}).appendTo(r.$gameQuestion),a.length>=1){const e=i.default("<div>",{class:"question-type",html:"Ð¢Ð¸Ð¿ Ð²Ð¾Ð¿ÑÐ¾ÑÐ°: "+a.attr("name")}).appendTo(r.$gameQuestion),t=i.default("<div>",{html:""}).appendTo(e);a.find("param").each((function(){i.default("<span>",{html:i.default(this).attr("name")+":"+i.default(this).html()+" "}).appendTo(t)}))}e.find("scenario").find("atom").each((function(){const e=i.default(this),t=e.html(),n=e.attr("type");"image"===n?i.default("<img>",{src:"data:image/jpeg;charset=utf-8;base64, "+r.options.get_data("Images/"+encodeURI(t).substr(1)),alt:t,title:t,width:"100%"}).appendTo(r.$gameQuestion):"voice"===n?i.default("<audio>",{src:"data:audio/mp3;charset=utf-8;base64, "+r.options.get_data("Audio/"+encodeURI(t).substr(1)),controls:!0}).appendTo(r.$gameQuestion):i.default("<div>",{html:t}).appendTo(r.$gameQuestion)}));const n=i.default("<div>",{class:"answer",html:"<h5>ÐÑÐ²ÐµÑ<h5>"}).appendTo(r.$gameQuestion);i.default("<div>",{class:"spoiler",html:e.find("right").find("answer").html()}).appendTo(n)}}).appendTo(n)}))}}},function(e,t,n){var r=n(16),i=n(17);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};r(i,o);e.exports=i.locals||{}},function(e,t,n){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},o=function(){var e={};return function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}e[t]=n}return e[t]}}(),a=[];function s(e){for(var t=-1,n=0;n<a.length;n++)if(a[n].identifier===e){t=n;break}return t}function l(e,t){for(var n={},r=[],i=0;i<e.length;i++){var o=e[i],l=t.base?o[0]+t.base:o[0],u=n[l]||0,f="".concat(l," ").concat(u);n[l]=u+1;var c=s(f),d={css:o[1],media:o[2],sourceMap:o[3]};-1!==c?(a[c].references++,a[c].updater(d)):a.push({identifier:f,updater:g(d,t),references:1}),r.push(f)}return r}function u(e){var t=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=n.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){t.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var f,c=(f=[],function(e,t){return f[e]=t,f.filter(Boolean).join("\n")});function d(e,t,n,r){var i=n?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=c(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function h(e,t,n){var r=n.css,i=n.media,o=n.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,m=0;function g(e,t){var n,r,i;if(t.singleton){var o=m++;n=p||(p=u(t)),r=d.bind(null,n,o,!1),i=d.bind(null,n,o,!0)}else n=u(t),r=h.bind(null,n,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)};return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var n=l(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<n.length;r++){var i=s(n[r]);a[i].references--}for(var o=l(e,t),u=0;u<n.length;u++){var f=s(n[u]);0===a[f].references&&(a[f].updater(),a.splice(f,1))}n=o}}}},function(e,t,n){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvb3RzdHJhcC9kaXN0L2pzL2Jvb3RzdHJhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcG9wcGVyLmpzL2Rpc3QvZXNtL3BvcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9NYWluLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc3ppcC9kaXN0L2pzemlwLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29tcG9uZW50cy9Db250ZW50WG1sLnRzIiwid2VicGFjazovLy8uL3NyYy9jc3MvYXBwLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZyIsInRoaXMiLCJGdW5jdGlvbiIsImUiLCJ3aW5kb3ciLCJnbG9iYWwiLCJmYWN0b3J5IiwiZG9jdW1lbnQiLCJ3IiwiRXJyb3IiLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJzbGljZSIsImZsYXQiLCJhcnJheSIsImNvbmNhdCIsImFwcGx5IiwicHVzaCIsImluZGV4T2YiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0IiwiaXNGdW5jdGlvbiIsIm9iaiIsIm5vZGVUeXBlIiwiaXNXaW5kb3ciLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwidHlwZSIsInNyYyIsIm5vbmNlIiwibm9Nb2R1bGUiLCJET01FdmFsIiwiY29kZSIsIm5vZGUiLCJkb2MiLCJ2YWwiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImhlYWQiLCJhcHBlbmRDaGlsZCIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInRvVHlwZSIsImpRdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwiaW5pdCIsImlzQXJyYXlMaWtlIiwibGVuZ3RoIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwiZWxlbXMiLCJyZXQiLCJtZXJnZSIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJtYXAiLCJlbGVtIiwiYXJndW1lbnRzIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJldmVuIiwiZ3JlcCIsIl9lbGVtIiwib2RkIiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsInVuZGVmaW5lZCIsImV4cGFuZG8iLCJNYXRoIiwicmFuZG9tIiwicmVwbGFjZSIsImlzUmVhZHkiLCJlcnJvciIsIm1zZyIsIm5vb3AiLCJwcm90byIsIkN0b3IiLCJpc0VtcHR5T2JqZWN0IiwiZ2xvYmFsRXZhbCIsIm1ha2VBcnJheSIsInJlc3VsdHMiLCJpbkFycmF5Iiwic2Vjb25kIiwiaW52ZXJ0IiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwiZ3VpZCIsIml0ZXJhdG9yIiwic3BsaXQiLCJfaSIsInRvTG93ZXJDYXNlIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsIkRhdGUiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiZG9uZSIsImNsYXNzQ2FjaGUiLCJjcmVhdGVDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInNvcnRPcmRlciIsImEiLCJiIiwicG9wIiwicHVzaE5hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJ0cmltIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsIm5vZGVOYW1lIiwiZGlyIiwibmV4dCIsImNoaWxkTm9kZXMiLCJlbHMiLCJzZWVkIiwibmlkIiwibWF0Y2giLCJncm91cHMiLCJuZXdTZWxlY3RvciIsIm5ld0NvbnRleHQiLCJvd25lckRvY3VtZW50IiwiZXhlYyIsImdldEVsZW1lbnRCeUlkIiwiaWQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJxc2EiLCJ0ZXN0IiwidGVzdENvbnRleHQiLCJzY29wZSIsInRvU2VsZWN0b3IiLCJqb2luIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwia2V5cyIsImNhY2hlIiwiY2FjaGVMZW5ndGgiLCJzaGlmdCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImVsIiwiYWRkSGFuZGxlIiwiYXR0cnMiLCJoYW5kbGVyIiwiYXR0ckhhbmRsZSIsInNpYmxpbmdDaGVjayIsImN1ciIsImRpZmYiLCJzb3VyY2VJbmRleCIsIm5leHRTaWJsaW5nIiwiY3JlYXRlSW5wdXRQc2V1ZG8iLCJjcmVhdGVCdXR0b25Qc2V1ZG8iLCJjcmVhdGVEaXNhYmxlZFBzZXVkbyIsImlzRGlzYWJsZWQiLCJjcmVhdGVQb3NpdGlvbmFsUHNldWRvIiwiYXJndW1lbnQiLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2UiLCJuYW1lc3BhY2VVUkkiLCJkb2N1bWVudEVsZW1lbnQiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiLCJjbGFzc05hbWUiLCJjcmVhdGVDb21tZW50IiwiZ2V0QnlJZCIsImdldEVsZW1lbnRzQnlOYW1lIiwiZmlsdGVyIiwiYXR0cklkIiwiZmluZCIsImdldEF0dHJpYnV0ZU5vZGUiLCJ0YWciLCJ0bXAiLCJpbnB1dCIsImlubmVySFRNTCIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwidW5zaGlmdCIsImV4cHIiLCJlbGVtZW50cyIsImF0dHIiLCJzcGVjaWZpZWQiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsInJlc3VsdCIsIndoYXQiLCJfYXJndW1lbnQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwiX2NvbnRleHQiLCJ4bWwiLCJ1bmlxdWVDYWNoZSIsIm91dGVyQ2FjaGUiLCJub2RlSW5kZXgiLCJzdGFydCIsInBhcmVudCIsInVzZUNhY2hlIiwibGFzdENoaWxkIiwidW5pcXVlSUQiLCJwc2V1ZG8iLCJhcmdzIiwic2V0RmlsdGVycyIsImlkeCIsIm1hdGNoZWQiLCJtYXRjaGVyIiwidW5tYXRjaGVkIiwibGFuZyIsImVsZW1MYW5nIiwiaGFzaCIsImxvY2F0aW9uIiwiYWN0aXZlRWxlbWVudCIsImhhc0ZvY3VzIiwiaHJlZiIsInRhYkluZGV4IiwiY2hlY2tlZCIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsIl9tYXRjaEluZGV4ZXMiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJ0ZW1wIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwiaW1wbGljaXRSZWxhdGl2ZSIsIm1hdGNoQ29udGV4dCIsIm1hdGNoQW55Q29udGV4dCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJzZXRNYXRjaGVycyIsImVsZW1lbnRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwibWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzIiwidG9rZW4iLCJjb21waWxlZCIsIl9uYW1lIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJzZWxmIiwicm9vdGpRdWVyeSIsInJvb3QiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJoYXMiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsImluZGV4IiwicHJldkFsbCIsImFkZCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsImNvbnRlbnQiLCJyZXZlcnNlIiwicm5vdGh0bWx3aGl0ZSIsIklkZW50aXR5IiwidiIsIlRocm93ZXIiLCJleCIsImFkb3B0VmFsdWUiLCJyZXNvbHZlIiwicmVqZWN0Iiwibm9WYWx1ZSIsIm1ldGhvZCIsInByb21pc2UiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsIl8iLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJlbXB0eSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwiY29uc29sZSIsIndhcm4iLCJtZXNzYWdlIiwicmVhZHlFeGNlcHRpb24iLCJyZWFkeUxpc3QiLCJjb21wbGV0ZWQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiX2tleSIsInJtc1ByZWZpeCIsInJkYXNoQWxwaGEiLCJmY2FtZWxDYXNlIiwiX2FsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImNvbmZpZ3VyYWJsZSIsInNldCIsImRhdGEiLCJwcm9wIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwicGFyc2UiLCJnZXREYXRhIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJob29rcyIsIl9xdWV1ZUhvb2tzIiwic3RvcCIsInNldHRlciIsImNsZWFyUXVldWUiLCJjb3VudCIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsInN0eWxlIiwiZGlzcGxheSIsImNzcyIsImFkanVzdENTUyIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwiZGVmYXVsdERpc3BsYXlNYXAiLCJnZXREZWZhdWx0RGlzcGxheSIsImJvZHkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIm9wdGlvbiIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJleHBlY3RTeW5jIiwiZXJyIiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJvbiIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwiZXZlbnQiLCJvZmYiLCJsZXZlcmFnZU5hdGl2ZSIsIm5vdEFzeW5jIiwic2F2ZWQiLCJpc1RyaWdnZXIiLCJkZWxlZ2F0ZVR5cGUiLCJzdG9wUHJvcGFnYXRpb24iLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJwcmV2ZW50RGVmYXVsdCIsInRyaWdnZXIiLCJFdmVudCIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJoYW5kbGVPYmoiLCJoYW5kbGVycyIsIm5hbWVzcGFjZXMiLCJvcmlnVHlwZSIsImVsZW1EYXRhIiwiaGFuZGxlIiwidHJpZ2dlcmVkIiwiZGlzcGF0Y2giLCJiaW5kVHlwZSIsImRlbGVnYXRlQ291bnQiLCJzZXR1cCIsIm1hcHBlZFR5cGVzIiwib3JpZ0NvdW50IiwidGVhcmRvd24iLCJyZW1vdmVFdmVudCIsIm5hdGl2ZUV2ZW50IiwiaGFuZGxlclF1ZXVlIiwiZml4IiwiZGVsZWdhdGVUYXJnZXQiLCJwcmVEaXNwYXRjaCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiY3VycmVudFRhcmdldCIsImlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkIiwicm5hbWVzcGFjZSIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJidXR0b24iLCJhZGRQcm9wIiwiaG9vayIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJwcm9wcyIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZWxhdGVkVGFyZ2V0IiwidGltZVN0YW1wIiwibm93IiwiaXNTaW11bGF0ZWQiLCJhbHRLZXkiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNoYW5nZWRUb3VjaGVzIiwiY3RybEtleSIsImRldGFpbCIsImV2ZW50UGhhc2UiLCJtZXRhS2V5IiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwidmlldyIsImNoYXJDb2RlIiwia2V5Q29kZSIsImJ1dHRvbnMiLCJjbGllbnRYIiwiY2xpZW50WSIsIm9mZnNldFgiLCJvZmZzZXRZIiwicG9pbnRlcklkIiwicG9pbnRlclR5cGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJmb2N1cyIsImJsdXIiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyY2xlYW5TY3JpcHQiLCJtYW5pcHVsYXRpb25UYXJnZXQiLCJkaXNhYmxlU2NyaXB0IiwicmVzdG9yZVNjcmlwdCIsImNsb25lQ29weUV2ZW50IiwiZGVzdCIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsImh0bWwiLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybnVtbm9ucHgiLCJnZXRTdHlsZXMiLCJvcGVuZXIiLCJnZXRDb21wdXRlZFN0eWxlIiwic3dhcCIsIm9sZCIsInJib3hTdHlsZSIsImN1ckNTUyIsImNvbXB1dGVkIiwid2lkdGgiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJjb21wdXRlU3R5bGVUZXN0cyIsImNvbnRhaW5lciIsImNzc1RleHQiLCJkaXZTdHlsZSIsInBpeGVsUG9zaXRpb25WYWwiLCJyZWxpYWJsZU1hcmdpbkxlZnRWYWwiLCJyb3VuZFBpeGVsTWVhc3VyZXMiLCJtYXJnaW5MZWZ0IiwicmlnaHQiLCJwaXhlbEJveFN0eWxlc1ZhbCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwicG9zaXRpb24iLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJwYXJzZUZsb2F0IiwicmVsaWFibGVUckRpbWVuc2lvbnNWYWwiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsImJveFNpemluZ1JlbGlhYmxlIiwicGl4ZWxQb3NpdGlvbiIsInJlbGlhYmxlTWFyZ2luTGVmdCIsInNjcm9sbGJveFNpemUiLCJyZWxpYWJsZVRyRGltZW5zaW9ucyIsInRhYmxlIiwidHJDaGlsZCIsInRyU3R5bGUiLCJoZWlnaHQiLCJwYXJzZUludCIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImZpbmFsIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJjZWlsIiwiZ2V0V2lkdGhPckhlaWdodCIsInZhbHVlSXNCb3JkZXJCb3giLCJvZmZzZXRQcm9wIiwiZ2V0Q2xpZW50UmVjdHMiLCJUd2VlbiIsImVhc2luZyIsImNzc0hvb2tzIiwib3BhY2l0eSIsIm9yaWdOYW1lIiwiaXNDdXN0b21Qcm9wIiwic2V0UHJvcGVydHkiLCJpc0Zpbml0ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNjcm9sbGJveFNpemVCdWdneSIsImxlZnQiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwicHJlZml4Iiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsInByb3BIb29rcyIsInJ1biIsInBlcmNlbnQiLCJlYXNlZCIsImR1cmF0aW9uIiwicG9zIiwic3RlcCIsImZ4Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJhZGRDbGFzcyIsImNsYXNzZXMiLCJjdXJWYWx1ZSIsImNsYXp6IiwiZmluYWxWYWx1ZSIsInJlbW92ZUNsYXNzIiwidG9nZ2xlQ2xhc3MiLCJzdGF0ZVZhbCIsImlzVmFsaWRWYWx1ZSIsImNsYXNzTmFtZXMiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwidmFsdWVPckZ1bmN0aW9uIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VyaWFsaXplIiwic2VyaWFsaXplQXJyYXkiLCJyMjAiLCJyaGFzaCIsInJhbnRpQ2FjaGUiLCJyaGVhZGVycyIsInJub0NvbnRlbnQiLCJycHJvdG9jb2wiLCJ0cmFuc3BvcnRzIiwiYWxsVHlwZXMiLCJvcmlnaW5BbmNob3IiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0ZWQiLCJzZWVraW5nVHJhbnNwb3J0IiwiaW5zcGVjdCIsInByZWZpbHRlck9yRmFjdG9yeSIsImRhdGFUeXBlT3JUcmFuc3BvcnQiLCJhamF4RXh0ZW5kIiwiZmxhdE9wdGlvbnMiLCJhamF4U2V0dGluZ3MiLCJhY3RpdmUiLCJsYXN0TW9kaWZpZWQiLCJldGFnIiwidXJsIiwiaXNMb2NhbCIsInByb3RvY29sIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwicmVzcG9uc2UiLCJtb2RpZmllZCIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJvZmZzZXRIZWlnaHQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJpc05hTiIsInRyaW0iLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIlBvcHBlciIsIl9pbnRlcm9wRGVmYXVsdExlZ2FjeSIsIiRfX2RlZmF1bHQiLCJQb3BwZXJfX2RlZmF1bHQiLCJfZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJfY3JlYXRlQ2xhc3MiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9leHRlbmRzIiwiYXNzaWduIiwidHJhbnNpdGlvbkVuZEVtdWxhdG9yIiwiX3RoaXMiLCJjYWxsZWQiLCJVdGlsIiwiVFJBTlNJVElPTl9FTkQiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsImdldFVJRCIsImdldFNlbGVjdG9yRnJvbUVsZW1lbnQiLCJlbGVtZW50IiwiaHJlZkF0dHIiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uRGVsYXkiLCJmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiIsImZsb2F0VHJhbnNpdGlvbkRlbGF5IiwicmVmbG93Iiwic3VwcG9ydHNUcmFuc2l0aW9uRW5kIiwiQm9vbGVhbiIsImlzRWxlbWVudCIsInR5cGVDaGVja0NvbmZpZyIsImNvbXBvbmVudE5hbWUiLCJjb25maWciLCJjb25maWdUeXBlcyIsImV4cGVjdGVkVHlwZXMiLCJ2YWx1ZVR5cGUiLCJmaW5kU2hhZG93Um9vdCIsImF0dGFjaFNoYWRvdyIsIlNoYWRvd1Jvb3QiLCJqUXVlcnlEZXRlY3Rpb24iLCJ2ZXJzaW9uIiwiZW11bGF0ZVRyYW5zaXRpb25FbmQiLCJOQU1FIiwiSlFVRVJZX05PX0NPTkZMSUNUIiwiQWxlcnQiLCJfZWxlbWVudCIsIl9wcm90byIsImNsb3NlIiwicm9vdEVsZW1lbnQiLCJfZ2V0Um9vdEVsZW1lbnQiLCJfdHJpZ2dlckNsb3NlRXZlbnQiLCJfcmVtb3ZlRWxlbWVudCIsImRpc3Bvc2UiLCJjbG9zZUV2ZW50IiwiX2Rlc3Ryb3lFbGVtZW50IiwiX2pRdWVyeUludGVyZmFjZSIsIiRlbGVtZW50IiwiX2hhbmRsZURpc21pc3MiLCJhbGVydEluc3RhbmNlIiwiSlFVRVJZX05PX0NPTkZMSUNUJDEiLCJCdXR0b24iLCJzaG91bGRBdm9pZFRyaWdnZXJDaGFuZ2UiLCJ0cmlnZ2VyQ2hhbmdlRXZlbnQiLCJhZGRBcmlhUHJlc3NlZCIsImNsYXNzTGlzdCIsImhhc0F0dHJpYnV0ZSIsImF2b2lkVHJpZ2dlckNoYW5nZSIsImluaXRpYWxCdXR0b24iLCJpbnB1dEJ0biIsInRhZ05hbWUiLCJfbGVuIiwiX2J1dHRvbiIsIk5BTUUkMiIsIkVWRU5UX0tFWSQyIiwiSlFVRVJZX05PX0NPTkZMSUNUJDIiLCJEZWZhdWx0Iiwia2V5Ym9hcmQiLCJzbGlkZSIsInBhdXNlIiwidG91Y2giLCJEZWZhdWx0VHlwZSIsIlBvaW50ZXJUeXBlIiwiVE9VQ0giLCJQRU4iLCJDYXJvdXNlbCIsIl9pdGVtcyIsIl9pbnRlcnZhbCIsIl9hY3RpdmVFbGVtZW50IiwiX2lzUGF1c2VkIiwiX2lzU2xpZGluZyIsInRvdWNoVGltZW91dCIsInRvdWNoU3RhcnRYIiwidG91Y2hEZWx0YVgiLCJfY29uZmlnIiwiX2dldENvbmZpZyIsIl9pbmRpY2F0b3JzRWxlbWVudCIsIl90b3VjaFN1cHBvcnRlZCIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwiX3BvaW50ZXJFdmVudCIsIlBvaW50ZXJFdmVudCIsIk1TUG9pbnRlckV2ZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiY3ljbGUiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJ2aXNpYmlsaXR5U3RhdGUiLCJhY3RpdmVJbmRleCIsIl9nZXRJdGVtSW5kZXgiLCJkaXJlY3Rpb24iLCJfaGFuZGxlU3dpcGUiLCJhYnNEZWx0YXgiLCJhYnMiLCJfdGhpczIiLCJfa2V5ZG93biIsIl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzIiwiX3RoaXMzIiwibW92ZSIsIl9nZXRJdGVtQnlEaXJlY3Rpb24iLCJpc05leHREaXJlY3Rpb24iLCJpc1ByZXZEaXJlY3Rpb24iLCJsYXN0SXRlbUluZGV4IiwiaXRlbUluZGV4IiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwiZXZlbnREaXJlY3Rpb25OYW1lIiwidGFyZ2V0SW5kZXgiLCJmcm9tSW5kZXgiLCJzbGlkZUV2ZW50IiwiZnJvbSIsIl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50IiwiaW5kaWNhdG9ycyIsIm5leHRJbmRpY2F0b3IiLCJkaXJlY3Rpb25hbENsYXNzTmFtZSIsIm9yZGVyQ2xhc3NOYW1lIiwiX3RoaXM0IiwiYWN0aXZlRWxlbWVudEluZGV4IiwibmV4dEVsZW1lbnQiLCJuZXh0RWxlbWVudEluZGV4IiwiaXNDeWNsaW5nIiwic2xpZEV2ZW50IiwibmV4dEVsZW1lbnRJbnRlcnZhbCIsImRlZmF1bHRJbnRlcnZhbCIsIkNMQVNTX05BTUVfQUNUSVZFJDEiLCJhY3Rpb24iLCJyaWRlIiwiX2RhdGFBcGlDbGlja0hhbmRsZXIiLCJzbGlkZUluZGV4IiwiY2Fyb3VzZWxzIiwiJGNhcm91c2VsIiwiTkFNRSQzIiwiSlFVRVJZX05PX0NPTkZMSUNUJDMiLCJEZWZhdWx0JDEiLCJEZWZhdWx0VHlwZSQxIiwiQ29sbGFwc2UiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsInRvZ2dsZUxpc3QiLCJmaWx0ZXJFbGVtZW50IiwiZm91bmRFbGVtIiwiX3NlbGVjdG9yIiwiX3BhcmVudCIsIl9nZXRQYXJlbnQiLCJfYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzIiwiYWN0aXZlcyIsImFjdGl2ZXNEYXRhIiwic3RhcnRFdmVudCIsIl9nZXREaW1lbnNpb24iLCJzZXRUcmFuc2l0aW9uaW5nIiwic2Nyb2xsU2l6ZSIsIkNMQVNTX05BTUVfQ09MTEFQU0UiLCJ0cmlnZ2VyQXJyYXlMZW5ndGgiLCJpc1RyYW5zaXRpb25pbmciLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJ0cmlnZ2VyQXJyYXkiLCJpc09wZW4iLCIkdHJpZ2dlciIsIiR0YXJnZXQiLCJOQU1FJDQiLCJKUVVFUllfTk9fQ09ORkxJQ1QkNCIsIlJFR0VYUF9LRVlET1dOIiwiQVJST1dfVVBfS0VZQ09ERSIsIkRlZmF1bHQkMiIsImZsaXAiLCJib3VuZGFyeSIsInJlZmVyZW5jZSIsInBvcHBlckNvbmZpZyIsIkRlZmF1bHRUeXBlJDIiLCJEcm9wZG93biIsIl9wb3BwZXIiLCJfbWVudSIsIl9nZXRNZW51RWxlbWVudCIsIl9pbk5hdmJhciIsIl9kZXRlY3ROYXZiYXIiLCJpc0FjdGl2ZSIsIl9jbGVhck1lbnVzIiwidXNlUG9wcGVyIiwic2hvd0V2ZW50IiwiX2dldFBhcmVudEZyb21FbGVtZW50IiwicmVmZXJlbmNlRWxlbWVudCIsIl9nZXRQb3BwZXJDb25maWciLCJoaWRlRXZlbnQiLCJkZXN0cm95IiwidXBkYXRlIiwic2NoZWR1bGVVcGRhdGUiLCJfZ2V0UGxhY2VtZW50IiwiJHBhcmVudERyb3Bkb3duIiwicGxhY2VtZW50IiwiX2dldE9mZnNldCIsIm9mZnNldHMiLCJtb2RpZmllcnMiLCJlbmFibGVkIiwicHJldmVudE92ZXJmbG93IiwiYm91bmRhcmllc0VsZW1lbnQiLCJhcHBseVN0eWxlIiwidG9nZ2xlcyIsImNsaWNrRXZlbnQiLCJkcm9wZG93bk1lbnUiLCJfZGF0YUFwaUtleWRvd25IYW5kbGVyIiwiaXRlbXMiLCJpdGVtIiwiRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNCIsIkpRVUVSWV9OT19DT05GTElDVCQ1IiwiRGVmYXVsdCQzIiwiYmFja2Ryb3AiLCJEZWZhdWx0VHlwZSQzIiwiTW9kYWwiLCJfZGlhbG9nIiwiX2JhY2tkcm9wIiwiX2lzU2hvd24iLCJfaXNCb2R5T3ZlcmZsb3dpbmciLCJfaWdub3JlQmFja2Ryb3BDbGljayIsIl9zY3JvbGxiYXJXaWR0aCIsIl9jaGVja1Njcm9sbGJhciIsIl9zZXRTY3JvbGxiYXIiLCJfYWRqdXN0RGlhbG9nIiwiX3NldEVzY2FwZUV2ZW50IiwiX3NldFJlc2l6ZUV2ZW50IiwiX3Nob3dCYWNrZHJvcCIsIl9zaG93RWxlbWVudCIsInRyYW5zaXRpb24iLCJfaGlkZU1vZGFsIiwiZm9yRWFjaCIsImh0bWxFbGVtZW50IiwiaGFuZGxlVXBkYXRlIiwiX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24iLCJoaWRlRXZlbnRQcmV2ZW50ZWQiLCJpc01vZGFsT3ZlcmZsb3dpbmciLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJtb2RhbFRyYW5zaXRpb25EdXJhdGlvbiIsIm1vZGFsQm9keSIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJfZW5mb3JjZUZvY3VzIiwic2hvd25FdmVudCIsInRyYW5zaXRpb25Db21wbGV0ZSIsIl90aGlzNSIsIl90aGlzNiIsIl90aGlzNyIsIl90aGlzOCIsIl9yZXNldEFkanVzdG1lbnRzIiwiX3Jlc2V0U2Nyb2xsYmFyIiwiX3JlbW92ZUJhY2tkcm9wIiwiX3RoaXM5IiwiYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24iLCJjYWxsYmFja1JlbW92ZSIsIl9iYWNrZHJvcFRyYW5zaXRpb25EdXJhdGlvbiIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiaW5uZXJXaWR0aCIsIl9nZXRTY3JvbGxiYXJXaWR0aCIsIl90aGlzMTAiLCJmaXhlZENvbnRlbnQiLCJzdGlja3lDb250ZW50IiwiYWN0dWFsUGFkZGluZyIsImNhbGN1bGF0ZWRQYWRkaW5nIiwiYWN0dWFsTWFyZ2luIiwibWFyZ2luUmlnaHQiLCJjYWxjdWxhdGVkTWFyZ2luIiwic2Nyb2xsRGl2Iiwic2Nyb2xsYmFyV2lkdGgiLCJjbGllbnRXaWR0aCIsIl90aGlzMTEiLCJ1cmlBdHRycyIsIkRlZmF1bHRXaGl0ZWxpc3QiLCJhcmVhIiwiYnIiLCJlbSIsImhyIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImg2IiwiaW1nIiwibGkiLCJvbCIsInByZSIsInNtYWxsIiwic3BhbiIsInN1YiIsInN1cCIsInN0cm9uZyIsInUiLCJ1bCIsIlNBRkVfVVJMX1BBVFRFUk4iLCJEQVRBX1VSTF9QQVRURVJOIiwic2FuaXRpemVIdG1sIiwidW5zYWZlSHRtbCIsIndoaXRlTGlzdCIsInNhbml0aXplRm4iLCJjcmVhdGVkRG9jdW1lbnQiLCJ3aGl0ZWxpc3RLZXlzIiwiX2xvb3AiLCJlbE5hbWUiLCJhdHRyaWJ1dGVMaXN0Iiwid2hpdGVsaXN0ZWRBdHRyaWJ1dGVzIiwiYWxsb3dlZEF0dHJpYnV0ZUxpc3QiLCJhdHRyTmFtZSIsInJlZ0V4cCIsImF0dHJSZWdleCIsImFsbG93ZWRBdHRyaWJ1dGUiLCJOQU1FJDYiLCJKUVVFUllfTk9fQ09ORkxJQ1QkNiIsIkJTQ0xTX1BSRUZJWF9SRUdFWCIsIkRJU0FMTE9XRURfQVRUUklCVVRFUyIsIkRlZmF1bHRUeXBlJDQiLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZmFsbGJhY2tQbGFjZW1lbnQiLCJzYW5pdGl6ZSIsIkF0dGFjaG1lbnRNYXAiLCJBVVRPIiwiVE9QIiwiUklHSFQiLCJCT1RUT00iLCJMRUZUIiwiRGVmYXVsdCQ0IiwiSElERSIsIkhJRERFTiIsIlNIT1ciLCJTSE9XTiIsIklOU0VSVEVEIiwiQ0xJQ0siLCJGT0NVU0lOIiwiRk9DVVNPVVQiLCJNT1VTRUVOVEVSIiwiTU9VU0VMRUFWRSIsIlRvb2x0aXAiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwidGlwIiwiX3NldExpc3RlbmVycyIsImVuYWJsZSIsInRvZ2dsZUVuYWJsZWQiLCJkYXRhS2V5IiwiREFUQV9LRVkiLCJfZ2V0RGVsZWdhdGVDb25maWciLCJfaXNXaXRoQWN0aXZlVHJpZ2dlciIsIl9lbnRlciIsIl9sZWF2ZSIsImdldFRpcEVsZW1lbnQiLCJFVkVOVF9LRVkiLCJfaGlkZU1vZGFsSGFuZGxlciIsImlzV2l0aENvbnRlbnQiLCJzaGFkb3dSb290IiwiaXNJblRoZURvbSIsInRpcElkIiwic2V0Q29udGVudCIsImF0dGFjaG1lbnQiLCJfZ2V0QXR0YWNobWVudCIsImFkZEF0dGFjaG1lbnRDbGFzcyIsIl9nZXRDb250YWluZXIiLCJfZml4VHJhbnNpdGlvbiIsInByZXZIb3ZlclN0YXRlIiwiX2NsZWFuVGlwQ2xhc3MiLCJnZXRUaXRsZSIsIkNMQVNTX1BSRUZJWCIsInNldEVsZW1lbnRDb250ZW50IiwiQ0xBU1NfTkFNRV9GQURFJDIiLCJiZWhhdmlvciIsImFycm93Iiwib25DcmVhdGUiLCJvcmlnaW5hbFBsYWNlbWVudCIsIl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UiLCJvblVwZGF0ZSIsImV2ZW50SW4iLCJldmVudE91dCIsIl9maXhUaXRsZSIsInRpdGxlVHlwZSIsImRhdGFBdHRyaWJ1dGVzIiwiJHRpcCIsInRhYkNsYXNzIiwicG9wcGVyRGF0YSIsImluc3RhbmNlIiwicG9wcGVyIiwiaW5pdENvbmZpZ0FuaW1hdGlvbiIsIk5BTUUkNyIsIkpRVUVSWV9OT19DT05GTElDVCQ3IiwiQlNDTFNfUFJFRklYX1JFR0VYJDEiLCJEZWZhdWx0JDUiLCJEZWZhdWx0VHlwZSQ1IiwiRXZlbnQkMSIsIlBvcG92ZXIiLCJfVG9vbHRpcCIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9fcHJvdG9fXyIsIl9nZXRDb250ZW50IiwiQ0xBU1NfUFJFRklYJDEiLCJDTEFTU19OQU1FX0ZBREUkMyIsIk5BTUUkOCIsIkpRVUVSWV9OT19DT05GTElDVCQ4IiwiRGVmYXVsdCQ2IiwiRGVmYXVsdFR5cGUkNiIsIlNjcm9sbFNweSIsIl9zY3JvbGxFbGVtZW50IiwiX29mZnNldHMiLCJfdGFyZ2V0cyIsIl9hY3RpdmVUYXJnZXQiLCJfc2Nyb2xsSGVpZ2h0IiwiX3Byb2Nlc3MiLCJyZWZyZXNoIiwiYXV0b01ldGhvZCIsIm9mZnNldE1ldGhvZCIsIm9mZnNldEJhc2UiLCJfZ2V0U2Nyb2xsVG9wIiwiX2dldFNjcm9sbEhlaWdodCIsInRhcmdldFNlbGVjdG9yIiwidGFyZ2V0QkNSIiwiX2dldE9mZnNldEhlaWdodCIsImlubmVySGVpZ2h0IiwibWF4U2Nyb2xsIiwiX2FjdGl2YXRlIiwiX2NsZWFyIiwicXVlcmllcyIsIiRsaW5rIiwiU0VMRUNUT1JfTkFWX0xJTktTIiwic2Nyb2xsU3B5cyIsIiRzcHkiLCJKUVVFUllfTk9fQ09ORkxJQ1QkOSIsIlRhYiIsInByZXZpb3VzIiwibGlzdEVsZW1lbnQiLCJpdGVtU2VsZWN0b3IiLCJoaWRkZW5FdmVudCIsIl90cmFuc2l0aW9uQ29tcGxldGUiLCJkcm9wZG93bkNoaWxkIiwiZHJvcGRvd25FbGVtZW50IiwiZHJvcGRvd25Ub2dnbGVMaXN0IiwiJHRoaXMiLCJKUVVFUllfTk9fQ09ORkxJQ1QkYSIsIkRlZmF1bHRUeXBlJDciLCJhdXRvaGlkZSIsIkRlZmF1bHQkNyIsIlRvYXN0IiwiX2NsZWFyVGltZW91dCIsIl9jbG9zZSIsIlNjcm9sbHNweSIsImlzQnJvd3NlciIsInRpbWVvdXREdXJhdGlvbiIsImxvbmdlclRpbWVvdXRCcm93c2VycyIsInVzZXJBZ2VudCIsImRlYm91bmNlIiwiUHJvbWlzZSIsInNjaGVkdWxlZCIsImZ1bmN0aW9uVG9DaGVjayIsImdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eSIsImdldFBhcmVudE5vZGUiLCJnZXRTY3JvbGxQYXJlbnQiLCJfZ2V0U3R5bGVDb21wdXRlZFByb3AiLCJnZXRSZWZlcmVuY2VOb2RlIiwicmVmZXJlbmNlTm9kZSIsImlzSUUxMSIsIk1TSW5wdXRNZXRob2RDb250ZXh0IiwiZG9jdW1lbnRNb2RlIiwiaXNJRTEwIiwiaXNJRSIsImdldE9mZnNldFBhcmVudCIsIm5vT2Zmc2V0UGFyZW50IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwiZ2V0Um9vdCIsImZpbmRDb21tb25PZmZzZXRQYXJlbnQiLCJlbGVtZW50MSIsImVsZW1lbnQyIiwib3JkZXIiLCJET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkciLCJyYW5nZSIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJzZXRFbmQiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsImVsZW1lbnQxcm9vdCIsImdldFNjcm9sbCIsInNpZGUiLCJ1cHBlclNpZGUiLCJzY3JvbGxpbmdFbGVtZW50IiwiaW5jbHVkZVNjcm9sbCIsIm1vZGlmaWVyIiwiYm90dG9tIiwiZ2V0Qm9yZGVyc1NpemUiLCJheGlzIiwic2lkZUEiLCJzaWRlQiIsImdldFNpemUiLCJjb21wdXRlZFN0eWxlIiwiZ2V0V2luZG93U2l6ZXMiLCJjbGFzc0NhbGxDaGVjayIsImNyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImdldENsaWVudFJlY3QiLCJzaXplcyIsImhvcml6U2Nyb2xsYmFyIiwidmVydFNjcm9sbGJhciIsImdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZSIsImZpeGVkUG9zaXRpb24iLCJpc0hUTUwiLCJjaGlsZHJlblJlY3QiLCJwYXJlbnRSZWN0Iiwic2Nyb2xsUGFyZW50IiwiYm9yZGVyVG9wV2lkdGgiLCJib3JkZXJMZWZ0V2lkdGgiLCJtYXJnaW5Ub3AiLCJnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUiLCJleGNsdWRlU2Nyb2xsIiwicmVsYXRpdmVPZmZzZXQiLCJpc0ZpeGVkIiwiZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJnZXRCb3VuZGFyaWVzIiwiYm91bmRhcmllcyIsImJvdW5kYXJpZXNOb2RlIiwiX2dldFdpbmRvd1NpemVzIiwiaXNQYWRkaW5nTnVtYmVyIiwiZ2V0QXJlYSIsIl9yZWYiLCJjb21wdXRlQXV0b1BsYWNlbWVudCIsInJlZlJlY3QiLCJyZWN0cyIsInNvcnRlZEFyZWFzIiwiZmlsdGVyZWRBcmVhcyIsIl9yZWYyIiwiY29tcHV0ZWRQbGFjZW1lbnQiLCJ2YXJpYXRpb24iLCJnZXRSZWZlcmVuY2VPZmZzZXRzIiwiY29tbW9uT2Zmc2V0UGFyZW50IiwiZ2V0T3V0ZXJTaXplcyIsIngiLCJtYXJnaW5Cb3R0b20iLCJ5IiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJnZXRQb3BwZXJPZmZzZXRzIiwicmVmZXJlbmNlT2Zmc2V0cyIsInBvcHBlclJlY3QiLCJwb3BwZXJPZmZzZXRzIiwiaXNIb3JpeiIsIm1haW5TaWRlIiwic2Vjb25kYXJ5U2lkZSIsIm1lYXN1cmVtZW50Iiwic2Vjb25kYXJ5TWVhc3VyZW1lbnQiLCJydW5Nb2RpZmllcnMiLCJlbmRzIiwiZmluZEluZGV4IiwiaXNEZXN0cm95ZWQiLCJhcnJvd1N0eWxlcyIsImZsaXBwZWQiLCJwb3NpdGlvbkZpeGVkIiwiaXNDcmVhdGVkIiwiaXNNb2RpZmllckVuYWJsZWQiLCJtb2RpZmllck5hbWUiLCJzb21lIiwiZ2V0U3VwcG9ydGVkUHJvcGVydHlOYW1lIiwicHJlZml4ZXMiLCJ1cHBlclByb3AiLCJjaGFyQXQiLCJ0b0NoZWNrIiwid2lsbENoYW5nZSIsImRpc2FibGVFdmVudExpc3RlbmVycyIsInJlbW92ZU9uRGVzdHJveSIsImdldFdpbmRvdyIsInNldHVwRXZlbnRMaXN0ZW5lcnMiLCJ1cGRhdGVCb3VuZCIsInBhc3NpdmUiLCJzY3JvbGxFbGVtZW50IiwiYXR0YWNoVG9TY3JvbGxQYXJlbnRzIiwic2Nyb2xsUGFyZW50cyIsImlzQm9keSIsImV2ZW50c0VuYWJsZWQiLCJlbmFibGVFdmVudExpc3RlbmVycyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwic2V0U3R5bGVzIiwiaXNGaXJlZm94IiwiaXNNb2RpZmllclJlcXVpcmVkIiwicmVxdWVzdGluZ05hbWUiLCJyZXF1ZXN0ZWROYW1lIiwicmVxdWVzdGluZyIsImlzUmVxdWlyZWQiLCJfcmVxdWVzdGluZyIsInJlcXVlc3RlZCIsInBsYWNlbWVudHMiLCJ2YWxpZFBsYWNlbWVudHMiLCJjbG9ja3dpc2UiLCJjb3VudGVyIiwiQkVIQVZJT1JTIiwicGFyc2VPZmZzZXQiLCJiYXNlUGxhY2VtZW50IiwidXNlSGVpZ2h0IiwiZnJhZ21lbnRzIiwiZnJhZyIsImRpdmlkZXIiLCJzZWFyY2giLCJzcGxpdFJlZ2V4Iiwib3BzIiwib3AiLCJtZXJnZVdpdGhQcmV2aW91cyIsInJlZHVjZSIsInN0ciIsInRvVmFsdWUiLCJpbmRleDIiLCJEZWZhdWx0cyIsInNoaWZ0dmFyaWF0aW9uIiwiX2RhdGEkb2Zmc2V0cyIsImlzVmVydGljYWwiLCJzaGlmdE9mZnNldHMiLCJ0cmFuc2Zvcm1Qcm9wIiwicG9wcGVyU3R5bGVzIiwidHJhbnNmb3JtIiwicHJpb3JpdHkiLCJwcmltYXJ5IiwiZXNjYXBlV2l0aFJlZmVyZW5jZSIsInNlY29uZGFyeSIsIm1pbiIsImtlZXBUb2dldGhlciIsImZsb29yIiwib3BTaWRlIiwiX2RhdGEkb2Zmc2V0cyRhcnJvdyIsImFycm93RWxlbWVudCIsInNpZGVDYXBpdGFsaXplZCIsImFsdFNpZGUiLCJhcnJvd0VsZW1lbnRTaXplIiwiY2VudGVyIiwicG9wcGVyTWFyZ2luU2lkZSIsInBvcHBlckJvcmRlclNpZGUiLCJzaWRlVmFsdWUiLCJwbGFjZW1lbnRPcHBvc2l0ZSIsImZsaXBPcmRlciIsInJlZk9mZnNldHMiLCJvdmVybGFwc1JlZiIsIm92ZXJmbG93c0xlZnQiLCJvdmVyZmxvd3NSaWdodCIsIm92ZXJmbG93c1RvcCIsIm92ZXJmbG93c0JvdHRvbSIsIm92ZXJmbG93c0JvdW5kYXJpZXMiLCJmbGlwcGVkVmFyaWF0aW9uQnlSZWYiLCJmbGlwVmFyaWF0aW9ucyIsImZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQiLCJmbGlwVmFyaWF0aW9uc0J5Q29udGVudCIsImZsaXBwZWRWYXJpYXRpb24iLCJnZXRPcHBvc2l0ZVZhcmlhdGlvbiIsImlubmVyIiwic3VidHJhY3RMZW5ndGgiLCJib3VuZCIsImNvbXB1dGVTdHlsZSIsImxlZ2FjeUdwdUFjY2VsZXJhdGlvbk9wdGlvbiIsImdwdUFjY2VsZXJhdGlvbiIsIm9mZnNldFBhcmVudFJlY3QiLCJzaG91bGRSb3VuZCIsIm5vUm91bmQiLCJyZWZlcmVuY2VXaWR0aCIsInBvcHBlcldpZHRoIiwiaXNWYXJpYXRpb24iLCJob3Jpem9udGFsVG9JbnRlZ2VyIiwidmVydGljYWxUb0ludGVnZXIiLCJnZXRSb3VuZGVkT2Zmc2V0cyIsImRldmljZVBpeGVsUmF0aW8iLCJwcmVmaXhlZFByb3BlcnR5IiwiaW52ZXJ0VG9wIiwiaW52ZXJ0TGVmdCIsIm9uTG9hZCIsIm1vZGlmaWVyT3B0aW9ucyIsIlV0aWxzIiwiUG9wcGVyVXRpbHMiLCIkcmVzdWx0IiwiQ1giLCJnZXRfZGF0YSIsImZpbGVzIiwiaGFuZGxlRmlsZSIsIiR0aXRsZSIsImRhdGVCZWZvcmUiLCJsb2FkQXN5bmMiLCJ6aXAiLCJkYXRlQWZ0ZXIiLCJyZWxhdGl2ZVBhdGgiLCJ6aXBFbnRyeSIsInN0YXJ0c1dpdGgiLCJ0eHQiLCJoIiwiMSIsImVuY29kZSIsImYiLCJnZXRUeXBlT2YiLCJkZWNvZGUiLCJzdWJzdHIiLCJ1aW50OGFycmF5IiwiVWludDhBcnJheSIsIjIiLCJjb21wcmVzc2VkU2l6ZSIsInVuY29tcHJlc3NlZFNpemUiLCJjcmMzMiIsImNvbXByZXNzaW9uIiwiY29tcHJlc3NlZENvbnRlbnQiLCJnZXRDb250ZW50V29ya2VyIiwidW5jb21wcmVzc1dvcmtlciIsInN0cmVhbUluZm8iLCJkYXRhX2xlbmd0aCIsImdldENvbXByZXNzZWRXb3JrZXIiLCJ3aXRoU3RyZWFtSW5mbyIsImNyZWF0ZVdvcmtlckZyb20iLCJjb21wcmVzc1dvcmtlciIsIjMiLCJTVE9SRSIsIm1hZ2ljIiwiREVGTEFURSIsIjQiLCI1IiwiYmFzZTY0IiwiY3JlYXRlRm9sZGVycyIsImRhdGUiLCJjb21wcmVzc2lvbk9wdGlvbnMiLCJjb21tZW50IiwidW5peFBlcm1pc3Npb25zIiwiZG9zUGVybWlzc2lvbnMiLCI2IiwibGllIiwiNyIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJfcGFrbyIsIl9wYWtvQWN0aW9uIiwiX3Bha29PcHRpb25zIiwibWV0YSIsImluaGVyaXRzIiwicHJvY2Vzc0NodW5rIiwiX2NyZWF0ZVBha28iLCJ0cmFuc2Zvcm1UbyIsImZsdXNoIiwiY2xlYW5VcCIsImxldmVsIiwib25EYXRhIiwicGFrbyIsIjgiLCJBIiwiTyIsInV0ZjhlbmNvZGUiLCJJIiwiayIsIlMiLCJ6IiwiQyIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsIkIiLCJFIiwiZmlsZVJlY29yZCIsIlIiLCJMT0NBTF9GSUxFX0hFQURFUiIsImRpclJlY29yZCIsIkNFTlRSQUxfRklMRV9IRUFERVIiLCJieXRlc1dyaXR0ZW4iLCJ6aXBDb21tZW50IiwiemlwUGxhdGZvcm0iLCJlbmNvZGVGaWxlTmFtZSIsInN0cmVhbUZpbGVzIiwiYWNjdW11bGF0ZSIsImNvbnRlbnRCdWZmZXIiLCJkaXJSZWNvcmRzIiwiY3VycmVudFNvdXJjZU9mZnNldCIsImVudHJpZXNDb3VudCIsImN1cnJlbnRGaWxlIiwiX3NvdXJjZXMiLCJvcGVuZWRTb3VyY2UiLCJjbG9zZWRTb3VyY2UiLCJEQVRBX0RFU0NSSVBUT1IiLCJDRU5UUkFMX0RJUkVDVE9SWV9FTkQiLCJwcmVwYXJlTmV4dFNvdXJjZSIsImlzUGF1c2VkIiwicmVzdW1lIiwicmVnaXN0ZXJQcmV2aW91cyIsImdlbmVyYXRlZEVycm9yIiwiOSIsImdlbmVyYXRlV29ya2VyIiwicGxhdGZvcm0iLCJfY29tcHJlc3NXb3JrZXIiLCIxMCIsImRlZmF1bHRzIiwiZXh0ZXJuYWwiLCIxMSIsImRlY29tcHJlc3NlZCIsImNoZWNrQ1JDMzIiLCJvcHRpbWl6ZWRCaW5hcnlTdHJpbmciLCJkZWNvZGVGaWxlTmFtZSIsInV0ZjhkZWNvZGUiLCJpc05vZGUiLCJpc1N0cmVhbSIsInByZXBhcmVDb250ZW50IiwiYWxsIiwiZmlsZU5hbWVTdHIiLCJmaWxlQ29tbWVudFN0ciIsIjEyIiwiX3Vwc3RyZWFtRW5kZWQiLCJfYmluZFN0cmVhbSIsIl9zdHJlYW0iLCIxMyIsIlJlYWRhYmxlIiwiX2hlbHBlciIsImVtaXQiLCJfcmVhZCIsIjE0IiwiQnVmZmVyIiwibmV3QnVmZmVyRnJvbSIsImFsbG9jQnVmZmVyIiwiYWxsb2MiLCJmaWxsIiwiaXNCdWZmZXIiLCIxNSIsInN1YnN0cmluZyIsImxhc3RJbmRleE9mIiwiZm9sZGVyIiwiZ2VuZXJhdGUiLCJnZW5lcmF0ZUludGVybmFsU3RyZWFtIiwiY2hlY2tTdXBwb3J0IiwiZ2VuZXJhdGVBc3luYyIsImdlbmVyYXRlTm9kZVN0cmVhbSIsInRvTm9kZWpzU3RyZWFtIiwiMTYiLCJzdHJlYW0iLCIxNyIsImJ5dGVBdCIsInplcm8iLCJsYXN0SW5kZXhPZlNpZ25hdHVyZSIsInJlYWRBbmRDaGVja1NpZ25hdHVyZSIsInJlYWREYXRhIiwiY2hlY2tPZmZzZXQiLCIxOCIsImNoZWNrSW5kZXgiLCJzZXRJbmRleCIsInJlYWRJbnQiLCJyZWFkU3RyaW5nIiwicmVhZERhdGUiLCJVVEMiLCIxOSIsIjIwIiwiMjEiLCJzdWJhcnJheSIsIjIyIiwiMjMiLCJaSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9MT0NBVE9SIiwiWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EIiwiMjQiLCJkZXN0VHlwZSIsIjI1IiwiMjYiLCJwcm9wTmFtZSIsIjI3IiwiZGF0YUlzUmVhZHkiLCJfdGlja1NjaGVkdWxlZCIsIl90aWNrQW5kUmVwZWF0IiwiaXNGaW5pc2hlZCIsIl90aWNrIiwiMjgiLCJleHRyYVN0cmVhbUluZm8iLCJpc0xvY2tlZCIsIl9saXN0ZW5lcnMiLCJtZXJnZVN0cmVhbUluZm8iLCIyOSIsIm5vZGVzdHJlYW0iLCJfaW50ZXJuYWxUeXBlIiwiX291dHB1dFR5cGUiLCJfbWltZVR5cGUiLCJfd29ya2VyIiwibmV3QmxvYiIsIm9iamVjdE1vZGUiLCIzMCIsImFycmF5YnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJub2RlYnVmZmVyIiwiYmxvYiIsIkJsb2IiLCJzaXplIiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1vekJsb2JCdWlsZGVyIiwiTVNCbG9iQnVpbGRlciIsImdldEJsb2IiLCIzMSIsImxlZnRPdmVyIiwiYXBwbHlGcm9tQ2hhckNvZGUiLCJVdGY4RGVjb2RlV29ya2VyIiwiVXRmOEVuY29kZVdvcmtlciIsIjMyIiwic3RyaW5naWZ5QnlDaHVuayIsInN0cmluZ2lmeUJ5Q2hhciIsImFwcGx5Q2FuQmVVc2VkIiwiYnVmZmVyIiwiYnl0ZUxlbmd0aCIsIk1BWF9WQUxVRV8xNkJJVFMiLCJNQVhfVkFMVUVfMzJCSVRTIiwicHJldHR5IiwiRmlsZVJlYWRlciIsInJlYWRBc0FycmF5QnVmZmVyIiwiMzMiLCJsb2FkT3B0aW9ucyIsImNoZWNrU2lnbmF0dXJlIiwicmVhZGVyIiwiaXNTaWduYXR1cmUiLCJyZWFkQmxvY2tFbmRPZkNlbnRyYWwiLCJkaXNrTnVtYmVyIiwiZGlza1dpdGhDZW50cmFsRGlyU3RhcnQiLCJjZW50cmFsRGlyUmVjb3Jkc09uVGhpc0Rpc2siLCJjZW50cmFsRGlyUmVjb3JkcyIsImNlbnRyYWxEaXJTaXplIiwiY2VudHJhbERpck9mZnNldCIsInppcENvbW1lbnRMZW5ndGgiLCJyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbCIsInppcDY0RW5kT2ZDZW50cmFsU2l6ZSIsInppcDY0RXh0ZW5zaWJsZURhdGEiLCJyZWFkQmxvY2taaXA2NEVuZE9mQ2VudHJhbExvY2F0b3IiLCJkaXNrV2l0aFppcDY0Q2VudHJhbERpclN0YXJ0IiwicmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpciIsImRpc2tzQ291bnQiLCJyZWFkTG9jYWxGaWxlcyIsImxvY2FsSGVhZGVyT2Zmc2V0IiwicmVhZExvY2FsUGFydCIsImhhbmRsZVVURjgiLCJwcm9jZXNzQXR0cmlidXRlcyIsInJlYWRDZW50cmFsRGlyIiwiemlwNjQiLCJyZWFkQ2VudHJhbFBhcnQiLCJyZWFkRW5kT2ZDZW50cmFsIiwicHJlcGFyZVJlYWRlciIsIjM0IiwiaXNFbmNyeXB0ZWQiLCJiaXRGbGFnIiwidXNlVVRGOCIsImZpbGVOYW1lTGVuZ3RoIiwiZmlsZU5hbWUiLCJjb21wcmVzc2lvbk1ldGhvZCIsInZlcnNpb25NYWRlQnkiLCJleHRyYUZpZWxkc0xlbmd0aCIsImZpbGVDb21tZW50TGVuZ3RoIiwiZGlza051bWJlclN0YXJ0IiwiaW50ZXJuYWxGaWxlQXR0cmlidXRlcyIsImV4dGVybmFsRmlsZUF0dHJpYnV0ZXMiLCJyZWFkRXh0cmFGaWVsZHMiLCJwYXJzZVpJUDY0RXh0cmFGaWVsZCIsImZpbGVDb21tZW50IiwiZXh0cmFGaWVsZHMiLCJmaW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoIiwiZmluZEV4dHJhRmllbGRVbmljb2RlQ29tbWVudCIsIjM1IiwiX2RhdGFCaW5hcnkiLCJpbnRlcm5hbFN0cmVhbSIsIl9kZWNvbXByZXNzV29ya2VyIiwibm9kZVN0cmVhbSIsIjM2IiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInNldEltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3J0MiIsInBvc3RNZXNzYWdlIiwiMzciLCJvdXRjb21lIiwiY2FsbEZ1bGZpbGxlZCIsIm90aGVyQ2FsbEZ1bGZpbGxlZCIsImNhbGxSZWplY3RlZCIsIm90aGVyQ2FsbFJlamVjdGVkIiwiZmluYWxseSIsInJhY2UiLCJpbW1lZGlhdGUiLCIzOCIsIjM5IiwiY2h1bmtTaXplIiwid2luZG93Qml0cyIsIm1lbUxldmVsIiwic3RyYXRlZ3kiLCJnemlwIiwiZW5kZWQiLCJjaHVua3MiLCJzdHJtIiwiYXZhaWxfb3V0IiwiZGVmbGF0ZUluaXQyIiwiaGVhZGVyIiwiZGVmbGF0ZVNldEhlYWRlciIsImRpY3Rpb25hcnkiLCJzdHJpbmcyYnVmIiwiZGVmbGF0ZVNldERpY3Rpb25hcnkiLCJfZGljdF9zZXQiLCJuZXh0X2luIiwiYXZhaWxfaW4iLCJvdXRwdXQiLCJCdWY4IiwibmV4dF9vdXQiLCJkZWZsYXRlIiwib25FbmQiLCJidWYyYmluc3RyaW5nIiwic2hyaW5rQnVmIiwiZGVmbGF0ZUVuZCIsImZsYXR0ZW5DaHVua3MiLCJEZWZsYXRlIiwiZGVmbGF0ZVJhdyIsIjQwIiwiaW5mbGF0ZUluaXQyIiwiWl9PSyIsImluZmxhdGVHZXRIZWFkZXIiLCJaX0ZJTklTSCIsIlpfTk9fRkxVU0giLCJiaW5zdHJpbmcyYnVmIiwiaW5mbGF0ZSIsIlpfTkVFRF9ESUNUIiwiaW5mbGF0ZVNldERpY3Rpb25hcnkiLCJaX0JVRl9FUlJPUiIsIlpfU1RSRUFNX0VORCIsIlpfU1lOQ19GTFVTSCIsInV0Zjhib3JkZXIiLCJidWYyc3RyaW5nIiwiYXJyYXlTZXQiLCJpbmZsYXRlRW5kIiwiSW5mbGF0ZSIsImluZmxhdGVSYXciLCJ1bmd6aXAiLCI0MSIsIkludDMyQXJyYXkiLCJzZXRUeXBlZCIsIkJ1ZjE2IiwiQnVmMzIiLCI0MiIsIjQzIiwiNDQiLCJaX1BBUlRJQUxfRkxVU0giLCJaX0ZVTExfRkxVU0giLCJaX0JMT0NLIiwiWl9UUkVFUyIsIlpfRVJSTk8iLCJaX1NUUkVBTV9FUlJPUiIsIlpfREFUQV9FUlJPUiIsIlpfTk9fQ09NUFJFU1NJT04iLCJaX0JFU1RfU1BFRUQiLCJaX0JFU1RfQ09NUFJFU1NJT04iLCJaX0RFRkFVTFRfQ09NUFJFU1NJT04iLCJaX0ZJTFRFUkVEIiwiWl9IVUZGTUFOX09OTFkiLCJaX1JMRSIsIlpfRklYRUQiLCJaX0RFRkFVTFRfU1RSQVRFR1kiLCJaX0JJTkFSWSIsIlpfVEVYVCIsIlpfVU5LTk9XTiIsIlpfREVGTEFURUQiLCI0NSIsIjQ2IiwiVCIsIkQiLCJGIiwicGVuZGluZyIsInBlbmRpbmdfYnVmIiwicGVuZGluZ19vdXQiLCJ0b3RhbF9vdXQiLCJOIiwiX3RyX2ZsdXNoX2Jsb2NrIiwiYmxvY2tfc3RhcnQiLCJzdHJzdGFydCIsIlUiLCJQIiwiTCIsIm1heF9jaGFpbl9sZW5ndGgiLCJwcmV2X2xlbmd0aCIsIm5pY2VfbWF0Y2giLCJ3X3NpemUiLCJ3X21hc2siLCJnb29kX21hdGNoIiwibG9va2FoZWFkIiwibWF0Y2hfc3RhcnQiLCJ3aW5kb3dfc2l6ZSIsImhhc2hfc2l6ZSIsImFkbGVyIiwidG90YWxfaW4iLCJpbnNfaCIsImhhc2hfc2hpZnQiLCJoYXNoX21hc2siLCJaIiwibWF0Y2hfbGVuZ3RoIiwiX3RyX3RhbGx5IiwibWF4X2xhenlfbWF0Y2giLCJsYXN0X2xpdCIsIlciLCJwcmV2X21hdGNoIiwibWF0Y2hfYXZhaWxhYmxlIiwiTSIsImdvb2RfbGVuZ3RoIiwibWF4X2xhenkiLCJuaWNlX2xlbmd0aCIsIm1heF9jaGFpbiIsIkgiLCJwZW5kaW5nX2J1Zl9zaXplIiwiZ3poZWFkIiwiZ3ppbmRleCIsImxhc3RfZmx1c2giLCJ3X2JpdHMiLCJoYXNoX2JpdHMiLCJkeW5fbHRyZWUiLCJkeW5fZHRyZWUiLCJibF90cmVlIiwibF9kZXNjIiwiZF9kZXNjIiwiYmxfZGVzYyIsImJsX2NvdW50IiwiaGVhcCIsImhlYXBfbGVuIiwiaGVhcF9tYXgiLCJsX2J1ZiIsImxpdF9idWZzaXplIiwiZF9idWYiLCJvcHRfbGVuIiwic3RhdGljX2xlbiIsImJpX2J1ZiIsImJpX3ZhbGlkIiwiRyIsImRhdGFfdHlwZSIsIl90cl9pbml0IiwiSyIsIlkiLCJkZWZsYXRlSW5pdCIsImRlZmxhdGVSZXNldCIsImRlZmxhdGVSZXNldEtlZXAiLCJoY3JjIiwib3MiLCJfdHJfYWxpZ24iLCJfdHJfc3RvcmVkX2Jsb2NrIiwiZGVmbGF0ZUluZm8iLCI0NyIsInhmbGFncyIsImV4dHJhX2xlbiIsIjQ4IiwiZG1heCIsIndzaXplIiwid2hhdmUiLCJ3bmV4dCIsImJpdHMiLCJsZW5jb2RlIiwiZGlzdGNvZGUiLCJsZW5iaXRzIiwiZGlzdGJpdHMiLCJzYW5lIiwiNDkiLCJoYXZlZGljdCIsImZsYWdzIiwidG90YWwiLCJ3Yml0cyIsIm5jb2RlIiwibmxlbiIsIm5kaXN0IiwiaGF2ZSIsImxlbnMiLCJ3b3JrIiwibGVuZHluIiwiZGlzdGR5biIsImJhY2siLCJ3YXMiLCJpbmZsYXRlUmVzZXQiLCJpbmZsYXRlUmVzZXQyIiwiaW5mbGF0ZVJlc2V0S2VlcCIsImluZmxhdGVJbml0IiwiaW5mbGF0ZUluZm8iLCI1MCIsIjUxIiwiNTIiLCJzdGF0aWNfdHJlZSIsImV4dHJhX2JpdHMiLCJleHRyYV9iYXNlIiwibWF4X2xlbmd0aCIsImhhc19zdHJlZSIsImR5bl90cmVlIiwibWF4X2NvZGUiLCJzdGF0X2Rlc2MiLCJYIiwiViIsInEiLCJKIiwiNTMiLCI1NCIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsIlJhbmdlRXJyb3IiLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJieXRlT2Zmc2V0IiwiZnJvbUFycmF5TGlrZSIsImZyb21BcnJheUJ1ZmZlciIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsIndyaXRlIiwiZnJvbVN0cmluZyIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzbG93VG9TdHJpbmciLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJhcnJheUluZGV4T2YiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJyZWFkIiwiYnVmIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJOdW1iZXIiLCJzdHJMZW4iLCJ1dGY4V3JpdGUiLCJibGl0QnVmZmVyIiwiYXNjaWlXcml0ZSIsImJ5dGVBcnJheSIsImFzY2lpVG9CeXRlcyIsImxhdGluMVdyaXRlIiwiYmFzZTY0V3JpdGUiLCJ1Y3MyV3JpdGUiLCJ1bml0cyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJJTlNQRUNUX01BWF9CWVRFUyIsImZvbyIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJlcXVhbHMiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJ0b0pTT04iLCJfYXJyIiwib3V0IiwidG9IZXgiLCJieXRlcyIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5Iiwic3RyaW5ndHJpbSIsImJhc2U2NGNsZWFuIiwiZHN0IiwiYjY0IiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJOYU4iLCJydCIsImxvZyIsIkxOMiIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsIl9vblRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImF0dGFjaFRvIiwibmV4dFRpY2siLCJydW5JZlByZXNlbnQiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwidGFzayIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjdXJyZW50UXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwidmVyc2lvbnMiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsInVtYXNrIiwiJGdhbWVSb3VuZHNOYXYiLCIkZ2FtZVJvdW5kcyIsIiRnYW1lUXVlc3Rpb24iLCIkcGFja2FnZSIsInBhcnNlUm91bmRzIiwiJHJvdW5kIiwiJHJvdW5kRWwiLCIkdGFibGUiLCJwYXJzZVRoZW1lcyIsIiR0ciIsIiR0aGVtZSIsInRoZW1lTmFtZSIsInBhcnNlUXVlc3Rpb25zIiwiJHF1ZXN0aW9uIiwicXVlc3Rpb25QcmljZSIsIiR0eXBlIiwiJHF1ZXN0aW9uVHlwZSIsIiRwYXJhbXMiLCIkYXRvbSIsImVuY29kZVVSSSIsIiRhbnN3ZXIiLCJhcGkiLCJkZWZhdWx0IiwibG9jYWxzIiwibWVtbyIsImlzT2xkSUUiLCJhdG9iIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInN0eWxlU2hlZXQiLCJjc3NOb2RlIiwiYXBwbHlUb1RhZyIsImJ0b2EiLCJ1bmVzY2FwZSIsInN0cmluZ2lmeSIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZUluZGV4IiwicmVtb3ZlU3R5bGVFbGVtZW50IiwibmV3T2JqIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIs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S0FLTnJlLEVBQU9ELFFBQVUsU0FBVXdMLEVBQU1qRSxJQUMvQkEsRUFBVUEsR0FBVyxJQUdSd2dGLFdBQTBDLGtCQUF0QnhnRixFQUFRd2dGLFlBQ3ZDeGdGLEVBQVF3Z0YsVUFBWTFCLEtBSXRCLElBQUkrQixFQUFrQnhCLEVBRHRCcDdFLEVBQU9BLEdBQVEsR0FDMEJqRSxHQUN6QyxPQUFPLFNBQWdCOGdGLEdBR3JCLEdBRkFBLEVBQVVBLEdBQVcsR0FFMkIsbUJBQTVDem5GLE9BQU9rQixVQUFVMEIsU0FBU25ELEtBQUtnb0YsR0FBbkMsQ0FJQSxJQUFLLElBQUlub0YsRUFBSSxFQUFHQSxFQUFJa29GLEVBQWdCemlGLE9BQVF6RixJQUFLLENBQy9DLElBQ0k4YixFQUFRMnFFLEVBREt5QixFQUFnQmxvRixJQUVqQ3dtRixFQUFZMXFFLEdBQU9pckUsYUFLckIsSUFGQSxJQUFJcUIsRUFBcUIxQixFQUFheUIsRUFBUzlnRixHQUV0Q2lDLEVBQUssRUFBR0EsRUFBSzQrRSxFQUFnQnppRixPQUFRNkQsSUFBTSxDQUNsRCxJQUVJKytFLEVBQVM1QixFQUZLeUIsRUFBZ0I1K0UsSUFJSyxJQUFuQ2s5RSxFQUFZNkIsR0FBUXRCLGFBQ3RCUCxFQUFZNkIsR0FBUXJCLFVBRXBCUixFQUFZci9FLE9BQU9raEYsRUFBUSxJQUkvQkgsRUFBa0JFLE0iLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIpO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjUuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMjAtMDUtMDRUMjI6NDlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG5cbnZhciBzbGljZSA9IGFyci5zbGljZTtcblxudmFyIGZsYXQgPSBhcnIuZmxhdCA/IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5mbGF0LmNhbGwoIGFycmF5ICk7XG59IDogZnVuY3Rpb24oIGFycmF5ICkge1xuXHRyZXR1cm4gYXJyLmNvbmNhdC5hcHBseSggW10sIGFycmF5ICk7XG59O1xuXG5cbnZhciBwdXNoID0gYXJyLnB1c2g7XG5cbnZhciBpbmRleE9mID0gYXJyLmluZGV4T2Y7XG5cbnZhciBjbGFzczJ0eXBlID0ge307XG5cbnZhciB0b1N0cmluZyA9IGNsYXNzMnR5cGUudG9TdHJpbmc7XG5cbnZhciBoYXNPd24gPSBjbGFzczJ0eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgZm5Ub1N0cmluZyA9IGhhc093bi50b1N0cmluZztcblxudmFyIE9iamVjdEZ1bmN0aW9uU3RyaW5nID0gZm5Ub1N0cmluZy5jYWxsKCBPYmplY3QgKTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiBpc0Z1bmN0aW9uKCBvYmogKSB7XG5cbiAgICAgIC8vIFN1cHBvcnQ6IENocm9tZSA8PTU3LCBGaXJlZm94IDw9NTJcbiAgICAgIC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuICAgICAgLy8gKGkuZS4sIGB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvYmplY3RcIiApID09PSBcImZ1bmN0aW9uXCJgKS5cbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gY2xhc3NpZnkgKmFueSogRE9NIG5vZGUgYXMgYSBmdW5jdGlvbi5cbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIG9iai5ub2RlVHlwZSAhPT0gXCJudW1iZXJcIjtcbiAgfTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNS4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gZmxhdCggcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSApO1xuXG5mdW5jdGlvbiBpc0FycmF5TGlrZSggb2JqICkge1xuXG5cdC8vIFN1cHBvcnQ6IHJlYWwgaU9TIDguMiBvbmx5IChub3QgcmVwcm9kdWNpYmxlIGluIHNpbXVsYXRvcilcblx0Ly8gYGluYCBjaGVjayB1c2VkIHRvIHByZXZlbnQgSklUIGVycm9yIChnaC0yMTQ1KVxuXHQvLyBoYXNPd24gaXNuJ3QgdXNlZCBoZXJlIGR1ZSB0byBmYWxzZSBuZWdhdGl2ZXNcblx0Ly8gcmVnYXJkaW5nIE5vZGVsaXN0IGxlbmd0aCBpbiBJRVxuXHR2YXIgbGVuZ3RoID0gISFvYmogJiYgXCJsZW5ndGhcIiBpbiBvYmogJiYgb2JqLmxlbmd0aCxcblx0XHR0eXBlID0gdG9UeXBlKCBvYmogKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIG9iaiApIHx8IGlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjIuMy41XG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanMuZm91bmRhdGlvbi9cbiAqXG4gKiBEYXRlOiAyMDIwLTAzLTE0XG4gKi9cbiggZnVuY3Rpb24oIHdpbmRvdyApIHtcbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICgge30gKS5oYXNPd25Qcm9wZXJ0eSxcblx0YXJyID0gW10sXG5cdHBvcCA9IGFyci5wb3AsXG5cdHB1c2hOYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbIGkgXSA9PT0gZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiAtMTtcblx0fSxcblxuXHRib29sZWFucyA9IFwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufFwiICtcblx0XHRcImlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIixcblxuXHQvLyBSZWd1bGFyIGV4cHJlc3Npb25zXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXN5bnRheC0zLyNpZGVudC10b2tlbi1kaWFncmFtXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcW1xcXFxkYS1mQS1GXXsxLDZ9XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIj98XFxcXFxcXFxbXlxcXFxyXFxcXG5cXFxcZl18W1xcXFx3LV18W15cXDAtXFxcXHg3Zl0pK1wiLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdXG5cdFx0Ly8gb3Igc3RyaW5ncyBbY2FwdHVyZSAzIG9yIGNhcHR1cmUgNF1cIlxuXHRcdFwiKig/OicoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcInwoXCIgKyBpZGVudGlmaWVyICsgXCIpKXwpXCIgK1xuXHRcdHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLFxuXG5cdHBzZXVkb3MgPSBcIjooXCIgKyBpZGVudGlmaWVyICsgXCIpKD86XFxcXCgoXCIgK1xuXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblxuXHRcdC8vIDIuIHNpbXBsZSAoY2FwdHVyZSA2KVxuXHRcdFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiICsgYXR0cmlidXRlcyArIFwiKSopfFwiICtcblxuXHRcdC8vIDMuIGFueXRoaW5nIGVsc2UgKGNhcHR1cmUgMilcblx0XHRcIi4qXCIgK1xuXHRcdFwiKVxcXFwpfClcIixcblxuXHQvLyBMZWFkaW5nIGFuZCBub24tZXNjYXBlZCB0cmFpbGluZyB3aGl0ZXNwYWNlLCBjYXB0dXJpbmcgc29tZSBub24td2hpdGVzcGFjZSBjaGFyYWN0ZXJzIHByZWNlZGluZyB0aGUgbGF0dGVyXG5cdHJ3aGl0ZXNwYWNlID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwiK1wiLCBcImdcIiApLFxuXHRydHJpbSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXCIgKSxcblx0cmRlc2NlbmQgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCJ8PlwiICksXG5cblx0cnBzZXVkbyA9IG5ldyBSZWdFeHAoIHBzZXVkb3MgKSxcblx0cmlkZW50aWZpZXIgPSBuZXcgUmVnRXhwKCBcIl5cIiArIGlkZW50aWZpZXIgKyBcIiRcIiApLFxuXG5cdG1hdGNoRXhwciA9IHtcblx0XHRcIklEXCI6IG5ldyBSZWdFeHAoIFwiXiMoXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIkNMQVNTXCI6IG5ldyBSZWdFeHAoIFwiXlxcXFwuKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgaWRlbnRpZmllciArIFwifFsqXSlcIiApLFxuXHRcdFwiQVRUUlwiOiBuZXcgUmVnRXhwKCBcIl5cIiArIGF0dHJpYnV0ZXMgKSxcblx0XHRcIlBTRVVET1wiOiBuZXcgUmVnRXhwKCBcIl5cIiArIHBzZXVkb3MgKSxcblx0XHRcIkNISUxEXCI6IG5ldyBSZWdFeHAoIFwiXjoob25seXxmaXJzdHxsYXN0fG50aHxudGgtbGFzdCktKGNoaWxkfG9mLXR5cGUpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIiArIHdoaXRlc3BhY2UgKyBcIiooPzooWystXXwpXCIgK1xuXHRcdFx0d2hpdGVzcGFjZSArIFwiKihcXFxcZCspfCkpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KVwiLCBcImlcIiApLFxuXHRcdFwiYm9vbFwiOiBuZXcgUmVnRXhwKCBcIl4oPzpcIiArIGJvb2xlYW5zICsgXCIpJFwiLCBcImlcIiApLFxuXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIipbPit+XXw6KGV2ZW58b2RkfGVxfGd0fGx0fG50aHxmaXJzdHxsYXN0KSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKigoPzotXFxcXGQpP1xcXFxkKilcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpKD89W14tXXwkKVwiLCBcImlcIiApXG5cdH0sXG5cblx0cmh0bWwgPSAvSFRNTCQvaSxcblx0cmlucHV0cyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJoZWFkZXIgPSAvXmhcXGQkL2ksXG5cblx0cm5hdGl2ZSA9IC9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8sXG5cblx0Ly8gRWFzaWx5LXBhcnNlYWJsZS9yZXRyaWV2YWJsZSBJRCBvciBUQUcgb3IgQ0xBU1Mgc2VsZWN0b3JzXG5cdHJxdWlja0V4cHIgPSAvXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxcblxuXHRyc2libGluZyA9IC9bK35dLyxcblxuXHQvLyBDU1MgZXNjYXBlc1xuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9DU1MyMS9zeW5kYXRhLmh0bWwjZXNjYXBlZC1jaGFyYWN0ZXJzXG5cdHJ1bmVzY2FwZSA9IG5ldyBSZWdFeHAoIFwiXFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98XFxcXFxcXFwoW15cXFxcclxcXFxuXFxcXGZdKVwiLCBcImdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggZXNjYXBlLCBub25IZXggKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGUuc2xpY2UoIDEgKSAtIDB4MTAwMDA7XG5cblx0XHRyZXR1cm4gbm9uSGV4ID9cblxuXHRcdFx0Ly8gU3RyaXAgdGhlIGJhY2tzbGFzaCBwcmVmaXggZnJvbSBhIG5vbi1oZXggZXNjYXBlIHNlcXVlbmNlXG5cdFx0XHRub25IZXggOlxuXG5cdFx0XHQvLyBSZXBsYWNlIGEgaGV4YWRlY2ltYWwgZXNjYXBlIHNlcXVlbmNlIHdpdGggdGhlIGVuY29kZWQgVW5pY29kZSBjb2RlIHBvaW50XG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExK1xuXHRcdFx0Ly8gRm9yIHZhbHVlcyBvdXRzaWRlIHRoZSBCYXNpYyBNdWx0aWxpbmd1YWwgUGxhbmUgKEJNUCksIG1hbnVhbGx5IGNvbnN0cnVjdCBhXG5cdFx0XHQvLyBzdXJyb2dhdGUgcGFpclxuXHRcdFx0aGlnaCA8IDAgP1xuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCA+PiAxMCB8IDB4RDgwMCwgaGlnaCAmIDB4M0ZGIHwgMHhEQzAwICk7XG5cdH0sXG5cblx0Ly8gQ1NTIHN0cmluZy9pZGVudGlmaWVyIHNlcmlhbGl6YXRpb25cblx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNjb21tb24tc2VyaWFsaXppbmctaWRpb21zXG5cdHJjc3Nlc2NhcGUgPSAvKFtcXDAtXFx4MWZcXHg3Zl18Xi0/XFxkKXxeLSR8W15cXDAtXFx4MWZcXHg3Zi1cXHVGRkZGXFx3LV0vZyxcblx0ZmNzc2VzY2FwZSA9IGZ1bmN0aW9uKCBjaCwgYXNDb2RlUG9pbnQgKSB7XG5cdFx0aWYgKCBhc0NvZGVQb2ludCApIHtcblxuXHRcdFx0Ly8gVSswMDAwIE5VTEwgYmVjb21lcyBVK0ZGRkQgUkVQTEFDRU1FTlQgQ0hBUkFDVEVSXG5cdFx0XHRpZiAoIGNoID09PSBcIlxcMFwiICkge1xuXHRcdFx0XHRyZXR1cm4gXCJcXHVGRkZEXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnRyb2wgY2hhcmFjdGVycyBhbmQgKGRlcGVuZGVudCB1cG9uIHBvc2l0aW9uKSBudW1iZXJzIGdldCBlc2NhcGVkIGFzIGNvZGUgcG9pbnRzXG5cdFx0XHRyZXR1cm4gY2guc2xpY2UoIDAsIC0xICkgKyBcIlxcXFxcIiArXG5cdFx0XHRcdGNoLmNoYXJDb2RlQXQoIGNoLmxlbmd0aCAtIDEgKS50b1N0cmluZyggMTYgKSArIFwiIFwiO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyIHBvdGVudGlhbGx5LXNwZWNpYWwgQVNDSUkgY2hhcmFjdGVycyBnZXQgYmFja3NsYXNoLWVzY2FwZWRcblx0XHRyZXR1cm4gXCJcXFxcXCIgKyBjaDtcblx0fSxcblxuXHQvLyBVc2VkIGZvciBpZnJhbWVzXG5cdC8vIFNlZSBzZXREb2N1bWVudCgpXG5cdC8vIFJlbW92aW5nIHRoZSBmdW5jdGlvbiB3cmFwcGVyIGNhdXNlcyBhIFwiUGVybWlzc2lvbiBEZW5pZWRcIlxuXHQvLyBlcnJvciBpbiBJRVxuXHR1bmxvYWRIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG5cdFx0c2V0RG9jdW1lbnQoKTtcblx0fSxcblxuXHRpbkRpc2FibGVkRmllbGRzZXQgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZpZWxkc2V0XCI7XG5cdFx0fSxcblx0XHR7IGRpcjogXCJwYXJlbnROb2RlXCIsIG5leHQ6IFwibGVnZW5kXCIgfVxuXHQpO1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoIGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkgKSxcblx0XHRwcmVmZXJyZWREb2MuY2hpbGROb2Rlc1xuXHQpO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaE5hdGl2ZS5hcHBseSggdGFyZ2V0LCBzbGljZS5jYWxsKCBlbHMgKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKCB0YXJnZXRbIGorKyBdID0gZWxzWyBpKysgXSApICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtLCBpLCBlbGVtLCBuaWQsIG1hdGNoLCBncm91cHMsIG5ld1NlbGVjdG9yLFxuXHRcdG5ld0NvbnRleHQgPSBjb250ZXh0ICYmIGNvbnRleHQub3duZXJEb2N1bWVudCxcblxuXHRcdC8vIG5vZGVUeXBlIGRlZmF1bHRzIHRvIDksIHNpbmNlIGNvbnRleHQgZGVmYXVsdHMgdG8gZG9jdW1lbnRcblx0XHRub2RlVHlwZSA9IGNvbnRleHQgPyBjb250ZXh0Lm5vZGVUeXBlIDogOTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBSZXR1cm4gZWFybHkgZnJvbSBjYWxscyB3aXRoIGludmFsaWQgc2VsZWN0b3Igb3IgY29udGV4dFxuXHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiB8fCAhc2VsZWN0b3IgfHxcblx0XHRub2RlVHlwZSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSAmJiBub2RlVHlwZSAhPT0gMTEgKSB7XG5cblx0XHRyZXR1cm4gcmVzdWx0cztcblx0fVxuXG5cdC8vIFRyeSB0byBzaG9ydGN1dCBmaW5kIG9wZXJhdGlvbnMgKGFzIG9wcG9zZWQgdG8gZmlsdGVycykgaW4gSFRNTCBkb2N1bWVudHNcblx0aWYgKCAhc2VlZCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHRcdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdFx0aWYgKCBkb2N1bWVudElzSFRNTCApIHtcblxuXHRcdFx0Ly8gSWYgdGhlIHNlbGVjdG9yIGlzIHN1ZmZpY2llbnRseSBzaW1wbGUsIHRyeSB1c2luZyBhIFwiZ2V0KkJ5KlwiIERPTSBtZXRob2Rcblx0XHRcdC8vIChleGNlcHRpbmcgRG9jdW1lbnRGcmFnbWVudCBjb250ZXh0LCB3aGVyZSB0aGUgbWV0aG9kcyBkb24ndCBleGlzdClcblx0XHRcdGlmICggbm9kZVR5cGUgIT09IDExICYmICggbWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoICggbSA9IG1hdGNoWyAxIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvY3VtZW50IGNvbnRleHRcblx0XHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoIGVsZW0gPSBuZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKCBtICkgKSAmJlxuXHRcdFx0XHRcdFx0XHRjb250YWlucyggY29udGV4dCwgZWxlbSApICYmXG5cdFx0XHRcdFx0XHRcdGVsZW0uaWQgPT09IG0gKSB7XG5cblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUeXBlIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAyIF0gKSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggc2VsZWN0b3IgKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHRcdC8vIENsYXNzIHNlbGVjdG9yXG5cdFx0XHRcdH0gZWxzZSBpZiAoICggbSA9IG1hdGNoWyAzIF0gKSAmJiBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiZcblx0XHRcdFx0XHRjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIG0gKSApO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRha2UgYWR2YW50YWdlIG9mIHF1ZXJ5U2VsZWN0b3JBbGxcblx0XHRcdGlmICggc3VwcG9ydC5xc2EgJiZcblx0XHRcdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXSAmJlxuXHRcdFx0XHQoICFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApICkgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA4IG9ubHlcblx0XHRcdFx0Ly8gRXhjbHVkZSBvYmplY3QgZWxlbWVudHNcblx0XHRcdFx0KCBub2RlVHlwZSAhPT0gMSB8fCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhlIHRlY2huaXF1ZSBoYXMgdG8gYmUgdXNlZCBhcyB3ZWxsIHdoZW4gYSBsZWFkaW5nIGNvbWJpbmF0b3IgaXMgdXNlZFxuXHRcdFx0XHQvLyBhcyBzdWNoIHNlbGVjdG9ycyBhcmUgbm90IHJlY29nbml6ZWQgYnkgcXVlcnlTZWxlY3RvckFsbC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0KCByZGVzY2VuZC50ZXN0KCBzZWxlY3RvciApIHx8IHJjb21iaW5hdG9ycy50ZXN0KCBzZWxlY3RvciApICkgKSB7XG5cblx0XHRcdFx0XHQvLyBFeHBhbmQgY29udGV4dCBmb3Igc2libGluZyBzZWxlY3RvcnNcblx0XHRcdFx0XHRuZXdDb250ZXh0ID0gcnNpYmxpbmcudGVzdCggc2VsZWN0b3IgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHxcblx0XHRcdFx0XHRcdGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBXZSBjYW4gdXNlIDpzY29wZSBpbnN0ZWFkIG9mIHRoZSBJRCBoYWNrIGlmIHRoZSBicm93c2VyXG5cdFx0XHRcdFx0Ly8gc3VwcG9ydHMgaXQgJiBpZiB3ZSdyZSBub3QgY2hhbmdpbmcgdGhlIGNvbnRleHQuXG5cdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICE9PSBjb250ZXh0IHx8ICFzdXBwb3J0LnNjb3BlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFx0aWYgKCAoIG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSApICkge1xuXHRcdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgKCBuaWQgPSBleHBhbmRvICkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1sgaSBdID0gKCBuaWQgPyBcIiNcIiArIG5pZCA6IFwiOnNjb3BlXCIgKSArIFwiIFwiICtcblx0XHRcdFx0XHRcdFx0dG9TZWxlY3RvciggZ3JvdXBzWyBpIF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gVXNlIChrZXkgKyBcIiBcIikgdG8gYXZvaWQgY29sbGlzaW9uIHdpdGggbmF0aXZlIHByb3RvdHlwZSBwcm9wZXJ0aWVzIChzZWUgSXNzdWUgIzE1Nylcblx0XHRpZiAoIGtleXMucHVzaCgga2V5ICsgXCIgXCIgKSA+IEV4cHIuY2FjaGVMZW5ndGggKSB7XG5cblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuICggY2FjaGVbIGtleSArIFwiIFwiIF0gPSB2YWx1ZSApO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImZpZWxkc2V0XCIgKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBlbCApO1xuXHR9IGNhdGNoICggZSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblxuXHRcdC8vIHJlbGVhc2UgbWVtb3J5IGluIElFXG5cdFx0ZWwgPSBudWxsO1xuXHR9XG59XG5cbi8qKlxuICogQWRkcyB0aGUgc2FtZSBoYW5kbGVyIGZvciBhbGwgb2YgdGhlIHNwZWNpZmllZCBhdHRyc1xuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJzIFBpcGUtc2VwYXJhdGVkIGxpc3Qgb2YgYXR0cmlidXRlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlciBUaGUgbWV0aG9kIHRoYXQgd2lsbCBiZSBhcHBsaWVkXG4gKi9cbmZ1bmN0aW9uIGFkZEhhbmRsZSggYXR0cnMsIGhhbmRsZXIgKSB7XG5cdHZhciBhcnIgPSBhdHRycy5zcGxpdCggXCJ8XCIgKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFyclsgaSBdIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLm5leHRTaWJsaW5nICkgKSB7XG5cdFx0XHRpZiAoIGN1ciA9PT0gYiApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBhID8gMSA6IC0xO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgaW5wdXQgdHlwZXNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0UHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IHR5cGU7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBidXR0b25zXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVCdXR0b25Qc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gKCBuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIiApICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdGluRGlzYWJsZWRGaWVsZHNldCggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHR2YXIgaixcblx0XHRcdFx0bWF0Y2hJbmRleGVzID0gZm4oIFtdLCBzZWVkLmxlbmd0aCwgYXJndW1lbnQgKSxcblx0XHRcdFx0aSA9IG1hdGNoSW5kZXhlcy5sZW5ndGg7XG5cblx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgaW5kZXhlc1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggc2VlZFsgKCBqID0gbWF0Y2hJbmRleGVzWyBpIF0gKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbIGogXSA9ICEoIG1hdGNoZXNbIGogXSA9IHNlZWRbIGogXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9ICk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0cHJldlVudGlsOiBmdW5jdGlvbiggZWxlbSwgX2ksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGlmICggZWxlbS5jb250ZW50RG9jdW1lbnQgIT0gbnVsbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMStcblx0XHRcdC8vIDxvYmplY3Q+IGVsZW1lbnRzIHdpdGggbm8gYGRhdGFgIGF0dHJpYnV0ZSBoYXMgYW4gb2JqZWN0XG5cdFx0XHQvLyBgY29udGVudERvY3VtZW50YCB3aXRoIGEgYG51bGxgIHByb3RvdHlwZS5cblx0XHRcdGdldFByb3RvKCBlbGVtLmNvbnRlbnREb2N1bWVudCApICkge1xuXG5cdFx0XHRyZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG5cdFx0Ly8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG5cdFx0Ly8gZG9uJ3Qgc3VwcG9ydCBpdC5cblx0XHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcblx0XHRcdGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1lcmdlKCBbXSwgZWxlbS5jaGlsZE5vZGVzICk7XG5cdH1cbn0sIGZ1bmN0aW9uKCBuYW1lLCBmbiApIHtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggdW50aWwsIHNlbGVjdG9yICkge1xuXHRcdHZhciBtYXRjaGVkID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRtYXRjaGVkID0galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIG1hdGNoZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHRoaXMubGVuZ3RoID4gMSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGR1cGxpY2F0ZXNcblx0XHRcdGlmICggIWd1YXJhbnRlZWRVbmlxdWVbIG5hbWUgXSApIHtcblx0XHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0bWF0Y2hlZC5yZXZlcnNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkICk7XG5cdH07XG59ICk7XG52YXIgcm5vdGh0bWx3aGl0ZSA9ICggL1teXFx4MjBcXHRcXHJcXG5cXGZdKy9nICk7XG5cblxuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lc1xuZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIHtcblx0dmFyIG9iamVjdCA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdLCBmdW5jdGlvbiggXywgZmxhZyApIHtcblx0XHRvYmplY3RbIGZsYWcgXSA9IHRydWU7XG5cdH0gKTtcblx0cmV0dXJuIG9iamVjdDtcbn1cblxuLypcbiAqIENyZWF0ZSBhIGNhbGxiYWNrIGxpc3QgdXNpbmcgdGhlIGZvbGxvd2luZyBwYXJhbWV0ZXJzOlxuICpcbiAqXHRvcHRpb25zOiBhbiBvcHRpb25hbCBsaXN0IG9mIHNwYWNlLXNlcGFyYXRlZCBvcHRpb25zIHRoYXQgd2lsbCBjaGFuZ2UgaG93XG4gKlx0XHRcdHRoZSBjYWxsYmFjayBsaXN0IGJlaGF2ZXMgb3IgYSBtb3JlIHRyYWRpdGlvbmFsIG9wdGlvbiBvYmplY3RcbiAqXG4gKiBCeSBkZWZhdWx0IGEgY2FsbGJhY2sgbGlzdCB3aWxsIGFjdCBsaWtlIGFuIGV2ZW50IGNhbGxiYWNrIGxpc3QgYW5kIGNhbiBiZVxuICogXCJmaXJlZFwiIG11bHRpcGxlIHRpbWVzLlxuICpcbiAqIFBvc3NpYmxlIG9wdGlvbnM6XG4gKlxuICpcdG9uY2U6XHRcdFx0d2lsbCBlbnN1cmUgdGhlIGNhbGxiYWNrIGxpc3QgY2FuIG9ubHkgYmUgZmlyZWQgb25jZSAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHRtZW1vcnk6XHRcdFx0d2lsbCBrZWVwIHRyYWNrIG9mIHByZXZpb3VzIHZhbHVlcyBhbmQgd2lsbCBjYWxsIGFueSBjYWxsYmFjayBhZGRlZFxuICpcdFx0XHRcdFx0YWZ0ZXIgdGhlIGxpc3QgaGFzIGJlZW4gZmlyZWQgcmlnaHQgYXdheSB3aXRoIHRoZSBsYXRlc3QgXCJtZW1vcml6ZWRcIlxuICpcdFx0XHRcdFx0dmFsdWVzIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdHVuaXF1ZTpcdFx0XHR3aWxsIGVuc3VyZSBhIGNhbGxiYWNrIGNhbiBvbmx5IGJlIGFkZGVkIG9uY2UgKG5vIGR1cGxpY2F0ZSBpbiB0aGUgbGlzdClcbiAqXG4gKlx0c3RvcE9uRmFsc2U6XHRpbnRlcnJ1cHQgY2FsbGluZ3Mgd2hlbiBhIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAqXG4gKi9cbmpRdWVyeS5DYWxsYmFja3MgPSBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHQvLyBDb252ZXJ0IG9wdGlvbnMgZnJvbSBTdHJpbmctZm9ybWF0dGVkIHRvIE9iamVjdC1mb3JtYXR0ZWQgaWYgbmVlZGVkXG5cdC8vICh3ZSBjaGVjayBpbiBjYWNoZSBmaXJzdClcblx0b3B0aW9ucyA9IHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiID9cblx0XHRjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgOlxuXHRcdGpRdWVyeS5leHRlbmQoIHt9LCBvcHRpb25zICk7XG5cblx0dmFyIC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IGlzIGN1cnJlbnRseSBmaXJpbmdcblx0XHRmaXJpbmcsXG5cblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgZm9yIG5vbi1mb3JnZXR0YWJsZSBsaXN0c1xuXHRcdG1lbW9yeSxcblxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cblx0XHQvLyBGbGFnIHRvIHByZXZlbnQgZmlyaW5nXG5cdFx0bG9ja2VkLFxuXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cblx0XHQvLyBRdWV1ZSBvZiBleGVjdXRpb24gZGF0YSBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHF1ZXVlID0gW10sXG5cblx0XHQvLyBJbmRleCBvZiBjdXJyZW50bHkgZmlyaW5nIGNhbGxiYWNrIChtb2RpZmllZCBieSBhZGQvcmVtb3ZlIGFzIG5lZWRlZClcblx0XHRmaXJpbmdJbmRleCA9IC0xLFxuXG5cdFx0Ly8gRmlyZSBjYWxsYmFja3Ncblx0XHRmaXJlID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuZm9yY2Ugc2luZ2xlLWZpcmluZ1xuXHRcdFx0bG9ja2VkID0gbG9ja2VkIHx8IG9wdGlvbnMub25jZTtcblxuXHRcdFx0Ly8gRXhlY3V0ZSBjYWxsYmFja3MgZm9yIGFsbCBwZW5kaW5nIGV4ZWN1dGlvbnMsXG5cdFx0XHQvLyByZXNwZWN0aW5nIGZpcmluZ0luZGV4IG92ZXJyaWRlcyBhbmQgcnVudGltZSBjaGFuZ2VzXG5cdFx0XHRmaXJlZCA9IGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IHF1ZXVlLmxlbmd0aDsgZmlyaW5nSW5kZXggPSAtMSApIHtcblx0XHRcdFx0bWVtb3J5ID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdFx0d2hpbGUgKCArK2ZpcmluZ0luZGV4IDwgbGlzdC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBSdW4gY2FsbGJhY2sgYW5kIGNoZWNrIGZvciBlYXJseSB0ZXJtaW5hdGlvblxuXHRcdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggbWVtb3J5WyAwIF0sIG1lbW9yeVsgMSBdICkgPT09IGZhbHNlICYmXG5cdFx0XHRcdFx0XHRvcHRpb25zLnN0b3BPbkZhbHNlICkge1xuXG5cdFx0XHRcdFx0XHQvLyBKdW1wIHRvIGVuZCBhbmQgZm9yZ2V0IHRoZSBkYXRhIHNvIC5hZGQgZG9lc24ndCByZS1maXJlXG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoO1xuXHRcdFx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvcmdldCB0aGUgZGF0YSBpZiB3ZSdyZSBkb25lIHdpdGggaXRcblx0XHRcdGlmICggIW9wdGlvbnMubWVtb3J5ICkge1xuXHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0ZmlyaW5nID0gZmFsc2U7XG5cblx0XHRcdC8vIENsZWFuIHVwIGlmIHdlJ3JlIGRvbmUgZmlyaW5nIGZvciBnb29kXG5cdFx0XHRpZiAoIGxvY2tlZCApIHtcblxuXHRcdFx0XHQvLyBLZWVwIGFuIGVtcHR5IGxpc3QgaWYgd2UgaGF2ZSBkYXRhIGZvciBmdXR1cmUgYWRkIGNhbGxzXG5cdFx0XHRcdGlmICggbWVtb3J5ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIHRoaXMgb2JqZWN0IGlzIHNwZW50XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bGlzdCA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gQWN0dWFsIENhbGxiYWNrcyBvYmplY3Rcblx0XHRzZWxmID0ge1xuXG5cdFx0XHQvLyBBZGQgYSBjYWxsYmFjayBvciBhIGNvbGxlY3Rpb24gb2YgY2FsbGJhY2tzIHRvIHRoZSBsaXN0XG5cdFx0XHRhZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBoYXZlIG1lbW9yeSBmcm9tIGEgcGFzdCBydW4sIHdlIHNob3VsZCBmaXJlIGFmdGVyIGFkZGluZ1xuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdJbmRleCA9IGxpc3QubGVuZ3RoIC0gMTtcblx0XHRcdFx0XHRcdHF1ZXVlLnB1c2goIG1lbW9yeSApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdCggZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiB0b1R5cGUoIGFyZyApICE9PSBcInN0cmluZ1wiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHR9ICkoIGFyZ3VtZW50cyApO1xuXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYSBjYWxsYmFjayBmcm9tIHRoZSBsaXN0XG5cdFx0XHRyZW1vdmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdHZhciBpbmRleDtcblx0XHRcdFx0XHR3aGlsZSAoICggaW5kZXggPSBqUXVlcnkuaW5BcnJheSggYXJnLCBsaXN0LCBpbmRleCApICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdGlmICggaW5kZXggPD0gZmlyaW5nSW5kZXggKSB7XG5cdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/XG5cdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGZuLCBsaXN0ICkgPiAtMSA6XG5cdFx0XHRcdFx0bGlzdC5sZW5ndGggPiAwO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGFsbCBjYWxsYmFja3MgZnJvbSB0aGUgbGlzdFxuXHRcdFx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGxpc3QgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZSBhbmQgLmFkZFxuXHRcdFx0Ly8gQWJvcnQgYW55IGN1cnJlbnQvcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHQvLyBDbGVhciBhbGwgY2FsbGJhY2tzIGFuZCB2YWx1ZXNcblx0XHRcdGRpc2FibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIWxpc3Q7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlXG5cdFx0XHQvLyBBbHNvIGRpc2FibGUgLmFkZCB1bmxlc3Mgd2UgaGF2ZSBtZW1vcnkgKHNpbmNlIGl0IHdvdWxkIGhhdmUgbm8gZWZmZWN0KVxuXHRcdFx0Ly8gQWJvcnQgYW55IHBlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0bG9jazogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGlmICggIW1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGxvY2tlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWxvY2tlZDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCAhbG9ja2VkICkge1xuXHRcdFx0XHRcdGFyZ3MgPSBhcmdzIHx8IFtdO1xuXHRcdFx0XHRcdGFyZ3MgPSBbIGNvbnRleHQsIGFyZ3Muc2xpY2UgPyBhcmdzLnNsaWNlKCkgOiBhcmdzIF07XG5cdFx0XHRcdFx0cXVldWUucHVzaCggYXJncyApO1xuXHRcdFx0XHRcdGlmICggIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmUoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgdGhlIGNhbGxiYWNrcyBoYXZlIGFscmVhZHkgYmVlbiBjYWxsZWQgYXQgbGVhc3Qgb25jZVxuXHRcdFx0ZmlyZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFmaXJlZDtcblx0XHRcdH1cblx0XHR9O1xuXG5cdHJldHVybiBzZWxmO1xufTtcblxuXG5mdW5jdGlvbiBJZGVudGl0eSggdiApIHtcblx0cmV0dXJuIHY7XG59XG5mdW5jdGlvbiBUaHJvd2VyKCBleCApIHtcblx0dGhyb3cgZXg7XG59XG5cbmZ1bmN0aW9uIGFkb3B0VmFsdWUoIHZhbHVlLCByZXNvbHZlLCByZWplY3QsIG5vVmFsdWUgKSB7XG5cdHZhciBtZXRob2Q7XG5cblx0dHJ5IHtcblxuXHRcdC8vIENoZWNrIGZvciBwcm9taXNlIGFzcGVjdCBmaXJzdCB0byBwcml2aWxlZ2Ugc3luY2hyb25vdXMgYmVoYXZpb3Jcblx0XHRpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnRoZW4gKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlLCByZXNvbHZlLCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIG5vbi10aGVuYWJsZXNcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb250cm9sIGByZXNvbHZlYCBhcmd1bWVudHMgYnkgbGV0dGluZyBBcnJheSNzbGljZSBjYXN0IGJvb2xlYW4gYG5vVmFsdWVgIHRvIGludGVnZXI6XG5cdFx0XHQvLyAqIGZhbHNlOiBbIHZhbHVlIF0uc2xpY2UoIDAgKSA9PiByZXNvbHZlKCB2YWx1ZSApXG5cdFx0XHQvLyAqIHRydWU6IFsgdmFsdWUgXS5zbGljZSggMSApID0+IHJlc29sdmUoKVxuXHRcdFx0cmVzb2x2ZS5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0uc2xpY2UoIG5vVmFsdWUgKSApO1xuXHRcdH1cblxuXHQvLyBGb3IgUHJvbWlzZXMvQSssIGNvbnZlcnQgZXhjZXB0aW9ucyBpbnRvIHJlamVjdGlvbnNcblx0Ly8gU2luY2UgalF1ZXJ5LndoZW4gZG9lc24ndCB1bndyYXAgdGhlbmFibGVzLCB3ZSBjYW4gc2tpcCB0aGUgZXh0cmEgY2hlY2tzIGFwcGVhcmluZyBpblxuXHQvLyBEZWZlcnJlZCN0aGVuIHRvIGNvbmRpdGlvbmFsbHkgc3VwcHJlc3MgcmVqZWN0aW9uLlxuXHR9IGNhdGNoICggdmFsdWUgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCBvbmx5XG5cdFx0Ly8gU3RyaWN0IG1vZGUgZnVuY3Rpb25zIGludm9rZWQgd2l0aG91dCAuY2FsbC8uYXBwbHkgZ2V0IGdsb2JhbC1vYmplY3QgY29udGV4dFxuXHRcdHJlamVjdC5hcHBseSggdW5kZWZpbmVkLCBbIHZhbHVlIF0gKTtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cblx0XHRcdFx0Ly8gYWN0aW9uLCBhZGQgbGlzdGVuZXIsIGNhbGxiYWNrcyxcblx0XHRcdFx0Ly8gLi4uIC50aGVuIGhhbmRsZXJzLCBhcmd1bWVudCBpbmRleCwgW2ZpbmFsIHN0YXRlXVxuXHRcdFx0XHRbIFwibm90aWZ5XCIsIFwicHJvZ3Jlc3NcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSwgMiBdLFxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDAsIFwicmVzb2x2ZWRcIiBdLFxuXHRcdFx0XHRbIFwicmVqZWN0XCIsIFwiZmFpbFwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMSwgXCJyZWplY3RlZFwiIF1cblx0XHRcdF0sXG5cdFx0XHRzdGF0ZSA9IFwicGVuZGluZ1wiLFxuXHRcdFx0cHJvbWlzZSA9IHtcblx0XHRcdFx0c3RhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBzdGF0ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0YWx3YXlzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5kb25lKCBhcmd1bWVudHMgKS5mYWlsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblx0XHRcdFx0XCJjYXRjaFwiOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHByb21pc2UudGhlbiggbnVsbCwgZm4gKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdHBpcGU6IGZ1bmN0aW9uKCAvKiBmbkRvbmUsIGZuRmFpbCwgZm5Qcm9ncmVzcyAqLyApIHtcblx0XHRcdFx0XHR2YXIgZm5zID0gYXJndW1lbnRzO1xuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIF9pLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwgX2tleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdFx0KVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIGV2ZW50IGlzIG5hbWVzcGFjZWQsIHRoZW4gZWFjaCBoYW5kbGVyIGlzIG9ubHkgaW52b2tlZCBpZiBpdCBpc1xuXHRcdFx0XHQvLyBzcGVjaWFsbHkgdW5pdmVyc2FsIG9yIGl0cyBuYW1lc3BhY2VzIGFyZSBhIHN1cGVyc2V0IG9mIHRoZSBldmVudCdzLlxuXHRcdFx0XHRpZiAoICFldmVudC5ybmFtZXNwYWNlIHx8IGhhbmRsZU9iai5uYW1lc3BhY2UgPT09IGZhbHNlIHx8XG5cdFx0XHRcdFx0ZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogaXNGdW5jdGlvbiggaG9vayApID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFsgbmFtZSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggdGhpcywgbmFtZSwge1xuXHRcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHdyaXRhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGZpeDogZnVuY3Rpb24oIG9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0cmV0dXJuIG9yaWdpbmFsRXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0b3JpZ2luYWxFdmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cdH0sXG5cblx0c3BlY2lhbDoge1xuXHRcdGxvYWQ6IHtcblxuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IHRvIGVuc3VyZSBjb3JyZWN0IHN0YXRlIGZvciBjaGVja2FibGUgaW5wdXRzXG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBDbGFpbSB0aGUgZmlyc3QgaGFuZGxlclxuXHRcdFx0XHRpZiAoIHJjaGVja2FibGVUeXBlLnRlc3QoIGVsLnR5cGUgKSAmJlxuXHRcdFx0XHRcdGVsLmNsaWNrICYmIG5vZGVOYW1lKCBlbCwgXCJpbnB1dFwiICkgKSB7XG5cblx0XHRcdFx0XHQvLyBkYXRhUHJpdi5zZXQoIGVsLCBcImNsaWNrXCIsIC4uLiApXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIsIHJldHVyblRydWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0sXG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbiggZGF0YSApIHtcblxuXHRcdFx0XHQvLyBGb3IgbXV0dWFsIGNvbXByZXNzaWJpbGl0eSB3aXRoIF9kZWZhdWx0LCByZXBsYWNlIGB0aGlzYCBhY2Nlc3Mgd2l0aCBhIGxvY2FsIHZhci5cblx0XHRcdFx0Ly8gYHx8IGRhdGFgIGlzIGRlYWQgY29kZSBtZWFudCBvbmx5IHRvIHByZXNlcnZlIHRoZSB2YXJpYWJsZSB0aHJvdWdoIG1pbmlmaWNhdGlvbi5cblx0XHRcdFx0dmFyIGVsID0gdGhpcyB8fCBkYXRhO1xuXG5cdFx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyaW5nIGEgY2xpY2tcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0bGV2ZXJhZ2VOYXRpdmUoIGVsLCBcImNsaWNrXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgc3VwcHJlc3MgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHQvLyBBbHNvIHByZXZlbnQgaXQgaWYgd2UncmUgY3VycmVudGx5IGluc2lkZSBhIGxldmVyYWdlZCBuYXRpdmUtZXZlbnQgc3RhY2tcblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cdFx0XHRcdHJldHVybiByY2hlY2thYmxlVHlwZS50ZXN0KCB0YXJnZXQudHlwZSApICYmXG5cdFx0XHRcdFx0dGFyZ2V0LmNsaWNrICYmIG5vZGVOYW1lKCB0YXJnZXQsIFwiaW5wdXRcIiApICYmXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0YXJnZXQsIFwiY2xpY2tcIiApIHx8XG5cdFx0XHRcdFx0bm9kZU5hbWUoIHRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBFbnN1cmUgdGhlIHByZXNlbmNlIG9mIGFuIGV2ZW50IGxpc3RlbmVyIHRoYXQgaGFuZGxlcyBtYW51YWxseS10cmlnZ2VyZWRcbi8vIHN5bnRoZXRpYyBldmVudHMgYnkgaW50ZXJydXB0aW5nIHByb2dyZXNzIHVudGlsIHJlaW52b2tlZCBpbiByZXNwb25zZSB0b1xuLy8gKm5hdGl2ZSogZXZlbnRzIHRoYXQgaXQgZmlyZXMgZGlyZWN0bHksIGVuc3VyaW5nIHRoYXQgc3RhdGUgY2hhbmdlcyBoYXZlXG4vLyBhbHJlYWR5IG9jY3VycmVkIGJlZm9yZSBvdGhlciBsaXN0ZW5lcnMgYXJlIGludm9rZWQuXG5mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZSggZWwsIHR5cGUsIGV4cGVjdFN5bmMgKSB7XG5cblx0Ly8gTWlzc2luZyBleHBlY3RTeW5jIGluZGljYXRlcyBhIHRyaWdnZXIgY2FsbCwgd2hpY2ggbXVzdCBmb3JjZSBzZXR1cCB0aHJvdWdoIGpRdWVyeS5ldmVudC5hZGRcblx0aWYgKCAhZXhwZWN0U3luYyApIHtcblx0XHRpZiAoIGRhdGFQcml2LmdldCggZWwsIHR5cGUgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHJldHVyblRydWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVnaXN0ZXIgdGhlIGNvbnRyb2xsZXIgYXMgYSBzcGVjaWFsIHVuaXZlcnNhbCBoYW5kbGVyIGZvciBhbGwgZXZlbnQgbmFtZXNwYWNlc1xuXHRkYXRhUHJpdi5zZXQoIGVsLCB0eXBlLCBmYWxzZSApO1xuXHRqUXVlcnkuZXZlbnQuYWRkKCBlbCwgdHlwZSwge1xuXHRcdG5hbWVzcGFjZTogZmFsc2UsXG5cdFx0aGFuZGxlcjogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIG5vdEFzeW5jLCByZXN1bHQsXG5cdFx0XHRcdHNhdmVkID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdGlmICggKCBldmVudC5pc1RyaWdnZXIgJiAxICkgJiYgdGhpc1sgdHlwZSBdICkge1xuXG5cdFx0XHRcdC8vIEludGVycnVwdCBwcm9jZXNzaW5nIG9mIHRoZSBvdXRlciBzeW50aGV0aWMgLnRyaWdnZXIoKWVkIGV2ZW50XG5cdFx0XHRcdC8vIFNhdmVkIGRhdGEgc2hvdWxkIGJlIGZhbHNlIGluIHN1Y2ggY2FzZXMsIGJ1dCBtaWdodCBiZSBhIGxlZnRvdmVyIGNhcHR1cmUgb2JqZWN0XG5cdFx0XHRcdC8vIGZyb20gYW4gYXN5bmMgbmF0aXZlIGhhbmRsZXIgKGdoLTQzNTApXG5cdFx0XHRcdGlmICggIXNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGFyZ3VtZW50cyBmb3IgdXNlIHdoZW4gaGFuZGxpbmcgdGhlIGlubmVyIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRcdC8vIFRoZXJlIHdpbGwgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBhcmd1bWVudCAoYW4gZXZlbnQgb2JqZWN0KSwgc28gdGhpcyBhcnJheVxuXHRcdFx0XHRcdC8vIHdpbGwgbm90IGJlIGNvbmZ1c2VkIHdpdGggYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdC5cblx0XHRcdFx0XHRzYXZlZCA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwgc2F2ZWQgKTtcblxuXHRcdFx0XHRcdC8vIFRyaWdnZXIgdGhlIG5hdGl2ZSBldmVudCBhbmQgY2FwdHVyZSBpdHMgcmVzdWx0XG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0Ly8gZm9jdXMoKSBhbmQgYmx1cigpIGFyZSBhc3luY2hyb25vdXNcblx0XHRcdFx0XHRub3RBc3luYyA9IGV4cGVjdFN5bmMoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHR0aGlzWyB0eXBlIF0oKTtcblx0XHRcdFx0XHRyZXN1bHQgPSBkYXRhUHJpdi5nZXQoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgfHwgbm90QXN5bmMgKSB7XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIGZhbHNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHJlc3VsdCA9IHt9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNhdmVkICE9PSByZXN1bHQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhbmNlbCB0aGUgb3V0ZXIgc3ludGhldGljIGV2ZW50XG5cdFx0XHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0LnZhbHVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGlzIGlzIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCBmb3IgYW4gZXZlbnQgd2l0aCBhIGJ1YmJsaW5nIHN1cnJvZ2F0ZVxuXHRcdFx0XHQvLyAoZm9jdXMgb3IgYmx1ciksIGFzc3VtZSB0aGF0IHRoZSBzdXJyb2dhdGUgYWxyZWFkeSBwcm9wYWdhdGVkIGZyb20gdHJpZ2dlcmluZyB0aGVcblx0XHRcdFx0Ly8gbmF0aXZlIGV2ZW50IGFuZCBwcmV2ZW50IHRoYXQgZnJvbSBoYXBwZW5pbmcgYWdhaW4gaGVyZS5cblx0XHRcdFx0Ly8gVGhpcyB0ZWNobmljYWxseSBnZXRzIHRoZSBvcmRlcmluZyB3cm9uZyB3LnIudC4gdG8gYC50cmlnZ2VyKClgIChpbiB3aGljaCB0aGVcblx0XHRcdFx0Ly8gYnViYmxpbmcgc3Vycm9nYXRlIHByb3BhZ2F0ZXMgKmFmdGVyKiB0aGUgbm9uLWJ1YmJsaW5nIGJhc2UpLCBidXQgdGhhdCBzZWVtc1xuXHRcdFx0XHQvLyBsZXNzIGJhZCB0aGFuIGR1cGxpY2F0aW9uLlxuXHRcdFx0XHR9IGVsc2UgaWYgKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge30gKS5kZWxlZ2F0ZVR5cGUgKSB7XG5cdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIG5hdGl2ZSBldmVudCB0cmlnZ2VyZWQgYWJvdmUsIGV2ZXJ5dGhpbmcgaXMgbm93IGluIG9yZGVyXG5cdFx0XHQvLyBGaXJlIGFuIGlubmVyIHN5bnRoZXRpYyBldmVudCB3aXRoIHRoZSBvcmlnaW5hbCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHNhdmVkLmxlbmd0aCApIHtcblxuXHRcdFx0XHQvLyAuLi5hbmQgY2FwdHVyZSB0aGUgcmVzdWx0XG5cdFx0XHRcdGRhdGFQcml2LnNldCggdGhpcywgdHlwZSwge1xuXHRcdFx0XHRcdHZhbHVlOiBqUXVlcnkuZXZlbnQudHJpZ2dlcihcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTErXG5cdFx0XHRcdFx0XHQvLyBFeHRlbmQgd2l0aCB0aGUgcHJvdG90eXBlIHRvIHJlc2V0IHRoZSBhYm92ZSBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmV4dGVuZCggc2F2ZWRbIDAgXSwgalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSApLFxuXHRcdFx0XHRcdFx0c2F2ZWQuc2xpY2UoIDEgKSxcblx0XHRcdFx0XHRcdHRoaXNcblx0XHRcdFx0XHQpXG5cdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBBYm9ydCBoYW5kbGluZyBvZiB0aGUgbmF0aXZlIGV2ZW50XG5cdFx0XHRcdGV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNvZGU6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxualF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIHR5cGUsIGRlbGVnYXRlVHlwZSApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSA9IHtcblxuXHRcdC8vIFV0aWxpemUgbmF0aXZlIGV2ZW50IGlmIHBvc3NpYmxlIHNvIGJsdXIvZm9jdXMgc2VxdWVuY2UgaXMgY29ycmVjdFxuXHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJmb2N1c1wiLCAuLi4gKVxuXHRcdFx0Ly8gZGF0YVByaXYuc2V0KCB0aGlzLCBcImJsdXJcIiwgLi4uIClcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlLCBleHBlY3RTeW5jICk7XG5cblx0XHRcdC8vIFJldHVybiBmYWxzZSB0byBhbGxvdyBub3JtYWwgcHJvY2Vzc2luZyBpbiB0aGUgY2FsbGVyXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRm9yY2Ugc2V0dXAgYmVmb3JlIHRyaWdnZXJcblx0XHRcdGxldmVyYWdlTmF0aXZlKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdC8vIFJldHVybiBub24tZmFsc2UgdG8gYWxsb3cgbm9ybWFsIGV2ZW50LXBhdGggcHJvcGFnYXRpb25cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRkZWxlZ2F0ZVR5cGU6IGRlbGVnYXRlVHlwZVxuXHR9O1xufSApO1xuXG4vLyBDcmVhdGUgbW91c2VlbnRlci9sZWF2ZSBldmVudHMgdXNpbmcgbW91c2VvdmVyL291dCBhbmQgZXZlbnQtdGltZSBjaGVja3Ncbi8vIHNvIHRoYXQgZXZlbnQgZGVsZWdhdGlvbiB3b3JrcyBpbiBqUXVlcnkuXG4vLyBEbyB0aGUgc2FtZSBmb3IgcG9pbnRlcmVudGVyL3BvaW50ZXJsZWF2ZSBhbmQgcG9pbnRlcm92ZXIvcG9pbnRlcm91dFxuLy9cbi8vIFN1cHBvcnQ6IFNhZmFyaSA3IG9ubHlcbi8vIFNhZmFyaSBzZW5kcyBtb3VzZWVudGVyIHRvbyBvZnRlbjsgc2VlOlxuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDcwMjU4XG4vLyBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidWcgKGl0IGV4aXN0ZWQgaW4gb2xkZXIgQ2hyb21lIHZlcnNpb25zIGFzIHdlbGwpLlxualF1ZXJ5LmVhY2goIHtcblx0bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIixcblx0bW91c2VsZWF2ZTogXCJtb3VzZW91dFwiLFxuXHRwb2ludGVyZW50ZXI6IFwicG9pbnRlcm92ZXJcIixcblx0cG9pbnRlcmxlYXZlOiBcInBvaW50ZXJvdXRcIlxufSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIG9yaWcgXSA9IHtcblx0XHRkZWxlZ2F0ZVR5cGU6IGZpeCxcblx0XHRiaW5kVHlwZTogZml4LFxuXG5cdFx0aGFuZGxlOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHR2YXIgcmV0LFxuXHRcdFx0XHR0YXJnZXQgPSB0aGlzLFxuXHRcdFx0XHRyZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldCxcblx0XHRcdFx0aGFuZGxlT2JqID0gZXZlbnQuaGFuZGxlT2JqO1xuXG5cdFx0XHQvLyBGb3IgbW91c2VlbnRlci9sZWF2ZSBjYWxsIHRoZSBoYW5kbGVyIGlmIHJlbGF0ZWQgaXMgb3V0c2lkZSB0aGUgdGFyZ2V0LlxuXHRcdFx0Ly8gTkI6IE5vIHJlbGF0ZWRUYXJnZXQgaWYgdGhlIG1vdXNlIGxlZnQvZW50ZXJlZCB0aGUgYnJvd3NlciB3aW5kb3dcblx0XHRcdGlmICggIXJlbGF0ZWQgfHwgKCByZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkgKSApIHtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGhhbmRsZU9iai5vcmlnVHlwZTtcblx0XHRcdFx0cmV0ID0gaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRldmVudC50eXBlID0gZml4O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIG9uKCB0aGlzLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCAxICk7XG5cdH0sXG5cdG9mZjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZm4gKSB7XG5cdFx0dmFyIGhhbmRsZU9iaiwgdHlwZTtcblx0XHRpZiAoIHR5cGVzICYmIHR5cGVzLnByZXZlbnREZWZhdWx0ICYmIHR5cGVzLmhhbmRsZU9iaiApIHtcblxuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlICsgXCIuXCIgKyBoYW5kbGVPYmoubmFtZXNwYWNlIDpcblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUsXG5cdFx0XHRcdGhhbmRsZU9iai5zZWxlY3Rvcixcblx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXJcblx0XHRcdCk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCB0eXBlb2YgdHlwZXMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcyBbLCBmbl0gKVxuXHRcdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbnZhclxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSwgRWRnZSAxMiAtIDEzIG9ubHlcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIGVsZW0gKS5jaGlsZHJlbiggXCJ0Ym9keVwiIClbIDAgXSB8fCBlbGVtO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9ICggZWxlbS5nZXRBdHRyaWJ1dGUoIFwidHlwZVwiICkgIT09IG51bGwgKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdGlmICggKCBlbGVtLnR5cGUgfHwgXCJcIiApLnNsaWNlKCAwLCA1ICkgPT09IFwidHJ1ZS9cIiApIHtcblx0XHRlbGVtLnR5cGUgPSBlbGVtLnR5cGUuc2xpY2UoIDUgKTtcblx0fSBlbHNlIHtcblx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggXCJ0eXBlXCIgKTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5mdW5jdGlvbiBjbG9uZUNvcHlFdmVudCggc3JjLCBkZXN0ICkge1xuXHR2YXIgaSwgbCwgdHlwZSwgcGRhdGFPbGQsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuZ2V0KCBzcmMgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRhdGFQcml2LnJlbW92ZSggZGVzdCwgXCJoYW5kbGUgZXZlbnRzXCIgKTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGZsYXQoIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHQvLyBXZSBjYW4ndCBjbG9uZU5vZGUgZnJhZ21lbnRzIHRoYXQgY29udGFpbiBjaGVja2VkLCBpbiBXZWJLaXRcblx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHRhcmdzWyAwIF0gPSB2YWx1ZS5jYWxsKCB0aGlzLCBpbmRleCwgc2VsZi5odG1sKCkgKTtcblx0XHRcdH1cblx0XHRcdGRvbU1hbmlwKCBzZWxmLCBhcmdzLCBjYWxsYmFjaywgaWdub3JlZCApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggbCApIHtcblx0XHRmcmFnbWVudCA9IGJ1aWxkRnJhZ21lbnQoIGFyZ3MsIGNvbGxlY3Rpb25bIDAgXS5vd25lckRvY3VtZW50LCBmYWxzZSwgY29sbGVjdGlvbiwgaWdub3JlZCApO1xuXHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdGlmICggZnJhZ21lbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGZpcnN0O1xuXHRcdH1cblxuXHRcdC8vIFJlcXVpcmUgZWl0aGVyIG5ldyBjb250ZW50IG9yIGFuIGludGVyZXN0IGluIGlnbm9yZWQgZWxlbWVudHMgdG8gaW52b2tlIHRoZSBjYWxsYmFja1xuXHRcdGlmICggZmlyc3QgfHwgaWdub3JlZCApIHtcblx0XHRcdHNjcmlwdHMgPSBqUXVlcnkubWFwKCBnZXRBbGwoIGZyYWdtZW50LCBcInNjcmlwdFwiICksIGRpc2FibGVTY3JpcHQgKTtcblx0XHRcdGhhc1NjcmlwdHMgPSBzY3JpcHRzLmxlbmd0aDtcblxuXHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbVxuXHRcdFx0Ly8gaW5zdGVhZCBvZiB0aGUgZmlyc3QgYmVjYXVzZSBpdCBjYW4gZW5kIHVwXG5cdFx0XHQvLyBiZWluZyBlbXB0aWVkIGluY29ycmVjdGx5IGluIGNlcnRhaW4gc2l0dWF0aW9ucyAoIzgwNzApLlxuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRub2RlID0gZnJhZ21lbnQ7XG5cblx0XHRcdFx0aWYgKCBpICE9PSBpTm9DbG9uZSApIHtcblx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHQvLyBLZWVwIHJlZmVyZW5jZXMgdG8gY2xvbmVkIHNjcmlwdHMgZm9yIGxhdGVyIHJlc3RvcmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggc2NyaXB0cywgZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjYWxsYmFjay5jYWxsKCBjb2xsZWN0aW9uWyBpIF0sIG5vZGUsIGkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBoYXNTY3JpcHRzICkge1xuXHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdC8vIFJlZW5hYmxlIHNjcmlwdHNcblx0XHRcdFx0alF1ZXJ5Lm1hcCggc2NyaXB0cywgcmVzdG9yZVNjcmlwdCApO1xuXG5cdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBoYXNTY3JpcHRzOyBpKysgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IHNjcmlwdHNbIGkgXTtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdCFkYXRhUHJpdi5hY2Nlc3MoIG5vZGUsIFwiZ2xvYmFsRXZhbFwiICkgJiZcblx0XHRcdFx0XHRcdGpRdWVyeS5jb250YWlucyggZG9jLCBub2RlICkgKSB7XG5cblx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgJiYgKCBub2RlLnR5cGUgfHwgXCJcIiApLnRvTG93ZXJDYXNlKCkgICE9PSBcIm1vZHVsZVwiICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICYmICFub2RlLm5vTW9kdWxlICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMsIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5vbmNlOiBub2RlLm5vbmNlIHx8IG5vZGUuZ2V0QXR0cmlidXRlKCBcIm5vbmNlXCIgKVxuXHRcdFx0XHRcdFx0XHRcdH0sIGRvYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciBzd2FwID0gZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGNhbGxiYWNrICkge1xuXHR2YXIgcmV0LCBuYW1lLFxuXHRcdG9sZCA9IHt9O1xuXG5cdC8vIFJlbWVtYmVyIHRoZSBvbGQgdmFsdWVzLCBhbmQgaW5zZXJ0IHRoZSBuZXcgb25lc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0b2xkWyBuYW1lIF0gPSBlbGVtLnN0eWxlWyBuYW1lIF07XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb3B0aW9uc1sgbmFtZSBdO1xuXHR9XG5cblx0cmV0ID0gY2FsbGJhY2suY2FsbCggZWxlbSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG52YXIgcmJveFN0eWxlID0gbmV3IFJlZ0V4cCggY3NzRXhwYW5kLmpvaW4oIFwifFwiICksIFwiaVwiICk7XG5cblxuXG4oIGZ1bmN0aW9uKCkge1xuXG5cdC8vIEV4ZWN1dGluZyBib3RoIHBpeGVsUG9zaXRpb24gJiBib3hTaXppbmdSZWxpYWJsZSB0ZXN0cyByZXF1aXJlIG9ubHkgb25lIGxheW91dFxuXHQvLyBzbyB0aGV5J3JlIGV4ZWN1dGVkIGF0IHRoZSBzYW1lIHRpbWUgdG8gc2F2ZSB0aGUgc2Vjb25kIGNvbXB1dGF0aW9uLlxuXHRmdW5jdGlvbiBjb21wdXRlU3R5bGVUZXN0cygpIHtcblxuXHRcdC8vIFRoaXMgaXMgYSBzaW5nbGV0b24sIHdlIG5lZWQgdG8gZXhlY3V0ZSBpdCBvbmx5IG9uY2Vcblx0XHRpZiAoICFkaXYgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDtcIiArXG5cdFx0XHRcIm1hcmdpbi10b3A6MXB4O3BhZGRpbmc6MDtib3JkZXI6MFwiO1xuXHRcdGRpdi5zdHlsZS5jc3NUZXh0ID1cblx0XHRcdFwicG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3g7b3ZlcmZsb3c6c2Nyb2xsO1wiICtcblx0XHRcdFwibWFyZ2luOmF1dG87Ym9yZGVyOjFweDtwYWRkaW5nOjFweDtcIiArXG5cdFx0XHRcIndpZHRoOjYwJTt0b3A6MSVcIjtcblx0XHRkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRcdHZhciBkaXZTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCBkaXYgKTtcblx0XHRwaXhlbFBvc2l0aW9uVmFsID0gZGl2U3R5bGUudG9wICE9PSBcIjElXCI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBGaXJlZm94IDw9MyAtIDQ0XG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5tYXJnaW5MZWZ0ICkgPT09IDEyO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgU2FmYXJpIDw9OS4xIC0gMTAuMSwgaU9TIDw9Ny4wIC0gOS4zXG5cdFx0Ly8gU29tZSBzdHlsZXMgY29tZSBiYWNrIHdpdGggcGVyY2VudGFnZSB2YWx1ZXMsIGV2ZW4gdGhvdWdoIHRoZXkgc2hvdWxkbid0XG5cdFx0ZGl2LnN0eWxlLnJpZ2h0ID0gXCI2MCVcIjtcblx0XHRwaXhlbEJveFN0eWxlc1ZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUucmlnaHQgKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHRcdC8vIERldGVjdCBtaXNyZXBvcnRpbmcgb2YgY29udGVudCBkaW1lbnNpb25zIGZvciBib3gtc2l6aW5nOmJvcmRlci1ib3ggZWxlbWVudHNcblx0XHRib3hTaXppbmdSZWxpYWJsZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUud2lkdGggKSA9PT0gMzY7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHQvLyBEZXRlY3Qgb3ZlcmZsb3c6c2Nyb2xsIHNjcmV3aW5lc3MgKGdoLTM2OTkpXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NjRcblx0XHQvLyBEb24ndCBnZXQgdHJpY2tlZCB3aGVuIHpvb20gYWZmZWN0cyBvZmZzZXRXaWR0aCAoZ2gtNDAyOSlcblx0XHRkaXYuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG5cdFx0c2Nyb2xsYm94U2l6ZVZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2Lm9mZnNldFdpZHRoIC8gMyApID09PSAxMjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHRmdW5jdGlvbiByb3VuZFBpeGVsTWVhc3VyZXMoIG1lYXN1cmUgKSB7XG5cdFx0cmV0dXJuIE1hdGgucm91bmQoIHBhcnNlRmxvYXQoIG1lYXN1cmUgKSApO1xuXHR9XG5cblx0dmFyIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLCBzY3JvbGxib3hTaXplVmFsLCBwaXhlbEJveFN0eWxlc1ZhbCxcblx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCwgcmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gQmVoYXZpb3IgaW4gSUUgOSBpcyBtb3JlIHN1YnRsZSB0aGFuIGluIG5ld2VyIHZlcnNpb25zICYgaXQgcGFzc2VzXG5cdFx0Ly8gc29tZSB2ZXJzaW9ucyBvZiB0aGlzIHRlc3Q7IG1ha2Ugc3VyZSBub3QgdG8gbWFrZSBpdCBwYXNzIHRoZXJlIVxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciB0YWJsZSwgdHIsIHRyQ2hpbGQsIHRyU3R5bGU7XG5cdFx0XHRpZiAoIHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHRhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0YWJsZVwiICk7XG5cdFx0XHRcdHRyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJ0clwiICk7XG5cdFx0XHRcdHRyQ2hpbGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0XHRcdFx0dGFibGUuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweFwiO1xuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9IHBhcnNlSW50KCB0clN0eWxlLmhlaWdodCApID4gMztcblxuXHRcdFx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIHRhYmxlICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVUckRpbWVuc2lvbnNWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBfZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXG5cdFx0Ly8gSWYgb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIHVua25vd24sIHRoZW4gd2UgY2FuJ3QgZGV0ZXJtaW5lIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXJcblx0XHQvLyBVc2UgYW4gZXhwbGljaXQgemVybyB0byBhdm9pZCBOYU4gKGdoLTM5NjQpXG5cdFx0KSApIHx8IDA7XG5cdH1cblxuXHRyZXR1cm4gZGVsdGE7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKSB7XG5cblx0Ly8gU3RhcnQgd2l0aCBjb21wdXRlZCBzdHlsZVxuXHR2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cblx0XHQvLyBUbyBhdm9pZCBmb3JjaW5nIGEgcmVmbG93LCBvbmx5IGZldGNoIGJveFNpemluZyBpZiB3ZSBuZWVkIGl0IChnaC00MzIyKS5cblx0XHQvLyBGYWtlIGNvbnRlbnQtYm94IHVudGlsIHdlIGtub3cgaXQncyBuZWVkZWQgdG8ga25vdyB0aGUgdHJ1ZSB2YWx1ZS5cblx0XHRib3hTaXppbmdOZWVkZWQgPSAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpIHx8IGV4dHJhLFxuXHRcdGlzQm9yZGVyQm94ID0gYm94U2l6aW5nTmVlZGVkICYmXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveCxcblxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgZGltZW5zaW9uLCBzdHlsZXMgKSxcblx0XHRvZmZzZXRQcm9wID0gXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKTtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIFVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3guXG5cdGlmICggKCAhc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpICYmIGlzQm9yZGVyQm94IHx8XG5cblx0XHQvLyBTdXBwb3J0OiBJRSAxMCAtIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdC8vIElFL0VkZ2UgbWlzcmVwb3J0IGBnZXRDb21wdXRlZFN0eWxlYCBvZiB0YWJsZSByb3dzIHdpdGggd2lkdGgvaGVpZ2h0XG5cdFx0Ly8gc2V0IGluIENTUyB3aGlsZSBgb2Zmc2V0KmAgcHJvcGVydGllcyByZXBvcnQgY29ycmVjdCB2YWx1ZXMuXG5cdFx0Ly8gSW50ZXJlc3RpbmdseSwgaW4gc29tZSBjYXNlcyBJRSA5IGRvZXNuJ3Qgc3VmZmVyIGZyb20gdGhpcyBpc3N1ZS5cblx0XHQhc3VwcG9ydC5yZWxpYWJsZVRyRGltZW5zaW9ucygpICYmIG5vZGVOYW1lKCBlbGVtLCBcInRyXCIgKSB8fFxuXG5cdFx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdFx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRcdHZhbCA9PT0gXCJhdXRvXCIgfHxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHRcdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoZSBlbGVtZW50IGlzIHZpc2libGUgJiBjb25uZWN0ZWRcblx0XHRlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiO1xuXG5cdFx0Ly8gV2hlcmUgYXZhaWxhYmxlLCBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgYXBwcm94aW1hdGUgYm9yZGVyIGJveCBkaW1lbnNpb25zLlxuXHRcdC8vIFdoZXJlIG5vdCBhdmFpbGFibGUgKGUuZy4sIFNWRyksIGFzc3VtZSB1bnJlbGlhYmxlIGJveC1zaXppbmcgYW5kIGludGVycHJldCB0aGVcblx0XHQvLyByZXRyaWV2ZWQgdmFsdWUgYXMgYSBjb250ZW50IGJveCBkaW1lbnNpb24uXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IG9mZnNldFByb3AgaW4gZWxlbTtcblx0XHRpZiAoIHZhbHVlSXNCb3JkZXJCb3ggKSB7XG5cdFx0XHR2YWwgPSBlbGVtWyBvZmZzZXRQcm9wIF07XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIFwiXCIgYW5kIGF1dG9cblx0dmFsID0gcGFyc2VGbG9hdCggdmFsICkgfHwgMDtcblxuXHQvLyBBZGp1c3QgZm9yIHRoZSBlbGVtZW50J3MgYm94IG1vZGVsXG5cdHJldHVybiAoIHZhbCArXG5cdFx0Ym94TW9kZWxBZGp1c3RtZW50KFxuXHRcdFx0ZWxlbSxcblx0XHRcdGRpbWVuc2lvbixcblx0XHRcdGV4dHJhIHx8ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSxcblx0XHRcdHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0XHRzdHlsZXMsXG5cblx0XHRcdC8vIFByb3ZpZGUgdGhlIGN1cnJlbnQgY29tcHV0ZWQgc2l6ZSB0byByZXF1ZXN0IHNjcm9sbCBndXR0ZXIgY2FsY3VsYXRpb24gKGdoLTM1ODkpXG5cdFx0XHR2YWxcblx0XHQpXG5cdCkgKyBcInB4XCI7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBBZGQgaW4gc3R5bGUgcHJvcGVydHkgaG9va3MgZm9yIG92ZXJyaWRpbmcgdGhlIGRlZmF1bHRcblx0Ly8gYmVoYXZpb3Igb2YgZ2V0dGluZyBhbmQgc2V0dGluZyBhIHN0eWxlIHByb3BlcnR5XG5cdGNzc0hvb2tzOiB7XG5cdFx0b3BhY2l0eToge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnRcIjogdHJ1ZSxcblx0XHRcImNvbHVtbkNvdW50XCI6IHRydWUsXG5cdFx0XCJmaWxsT3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwiZmxleEdyb3dcIjogdHJ1ZSxcblx0XHRcImZsZXhTaHJpbmtcIjogdHJ1ZSxcblx0XHRcImZvbnRXZWlnaHRcIjogdHJ1ZSxcblx0XHRcImdyaWRBcmVhXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uRW5kXCI6IHRydWUsXG5cdFx0XCJncmlkQ29sdW1uU3RhcnRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dFbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRSb3dTdGFydFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0Ly8gVGhlIGlzQ3VzdG9tUHJvcCBjaGVjayBjYW4gYmUgcmVtb3ZlZCBpbiBqUXVlcnkgNC4wIHdoZW4gd2Ugb25seSBhdXRvLWFwcGVuZFxuXHRcdFx0Ly8gXCJweFwiIHRvIGEgZmV3IGhhcmRjb2RlZCB2YWx1ZXMuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwibnVtYmVyXCIgJiYgIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gbW9kaWZ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gVHJ5IHByZWZpeGVkIG5hbWUgZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgbmFtZVxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IFwibm9ybWFsXCIgdG8gY29tcHV0ZWQgdmFsdWVcblx0XHRpZiAoIHZhbCA9PT0gXCJub3JtYWxcIiAmJiBuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSApIHtcblx0XHRcdHZhbCA9IGNzc05vcm1hbFRyYW5zZm9ybVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIE1ha2UgbnVtZXJpYyBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBpc0Zpbml0ZSggbnVtICkgPyBudW0gfHwgMCA6IHZhbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiaGVpZ2h0XCIsIFwid2lkdGhcIiBdLCBmdW5jdGlvbiggX2ksIGRpbWVuc2lvbiApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBkaW1lbnNpb24gXSA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCwgZXh0cmEgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXG5cdFx0XHRcdC8vIENlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBidXQgaXQgbXVzdCBoYXZlIGEgY3VycmVudCBkaXNwbGF5IHN0eWxlIHRoYXQgd291bGQgYmVuZWZpdFxuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrXG5cdFx0XHRcdFx0Ly8gVGFibGUgY29sdW1ucyBpbiBTYWZhcmkgaGF2ZSBub24temVybyBvZmZzZXRXaWR0aCAmIHplcm9cblx0XHRcdFx0XHQvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB1bmxlc3MgZGlzcGxheSBpcyBjaGFuZ2VkLlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdFx0XHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGEgZGlzY29ubmVjdGVkIG5vZGVcblx0XHRcdFx0XHQvLyBpbiBJRSB0aHJvd3MgYW4gZXJyb3IuXG5cdFx0XHRcdFx0KCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCB8fCAhZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCApID9cblx0XHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHRcdCkgKyBcInB4XCI7XG5cdFx0fVxuXHR9XG4pO1xuXG4vLyBUaGVzZSBob29rcyBhcmUgdXNlZCBieSBhbmltYXRlIHRvIGV4cGFuZCBwcm9wZXJ0aWVzXG5qUXVlcnkuZWFjaCgge1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gQXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoIFwiIFwiICkgOiBbIHZhbHVlIF07XG5cblx0XHRcdGZvciAoIDsgaSA8IDQ7IGkrKyApIHtcblx0XHRcdFx0ZXhwYW5kZWRbIHByZWZpeCArIGNzc0V4cGFuZFsgaSBdICsgc3VmZml4IF0gPVxuXHRcdFx0XHRcdHBhcnRzWyBpIF0gfHwgcGFydHNbIGkgLSAyIF0gfHwgcGFydHNbIDAgXTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV4cGFuZGVkO1xuXHRcdH1cblx0fTtcblxuXHRpZiAoIHByZWZpeCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoXG5cdFx0XHRcdFx0alF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gfHxcblx0XHRcdFx0XHR0d2Vlbi5lbGVtLnN0eWxlWyBmaW5hbFByb3BOYW1lKCB0d2Vlbi5wcm9wICkgXSAhPSBudWxsICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IERhdGUubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRpID0gMCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH07XG5cblx0Ly8gSWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBvdGhlcndpc2Ugc3RlcCB2YWx1ZSBpcyAyIHRvIHNraXAgb3ZlciBMZWZ0IGFuZCBSaWdodFxuXHRpbmNsdWRlV2lkdGggPSBpbmNsdWRlV2lkdGggPyAxIDogMDtcblx0Zm9yICggOyBpIDwgNDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdICkuY29uY2F0KCBBbmltYXRpb24udHdlZW5lcnNbIFwiKlwiIF0gKSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0aWYgKCAoIHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkgKSApIHtcblxuXHRcdFx0Ly8gV2UncmUgZG9uZSB3aXRoIHRoaXMgcHJvcGVydHlcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFByZWZpbHRlciggZWxlbSwgcHJvcHMsIG9wdHMgKSB7XG5cdHZhciBwcm9wLCB2YWx1ZSwgdG9nZ2xlLCBob29rcywgb2xkZmlyZSwgcHJvcFR3ZWVuLCByZXN0b3JlRGlzcGxheSwgZGlzcGxheSxcblx0XHRpc0JveCA9IFwid2lkdGhcIiBpbiBwcm9wcyB8fCBcImhlaWdodFwiIGluIHByb3BzLFxuXHRcdGFuaW0gPSB0aGlzLFxuXHRcdG9yaWcgPSB7fSxcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGUsXG5cdFx0aGlkZGVuID0gZWxlbS5ub2RlVHlwZSAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSxcblx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJmeHNob3dcIiApO1xuXG5cdC8vIFF1ZXVlLXNraXBwaW5nIGFuaW1hdGlvbnMgaGlqYWNrIHRoZSBmeCBob29rc1xuXHRpZiAoICFvcHRzLnF1ZXVlICkge1xuXHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCBcImZ4XCIgKTtcblx0XHRpZiAoIGhvb2tzLnVucXVldWVkID09IG51bGwgKSB7XG5cdFx0XHRob29rcy51bnF1ZXVlZCA9IDA7XG5cdFx0XHRvbGRmaXJlID0gaG9va3MuZW1wdHkuZmlyZTtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhaG9va3MudW5xdWV1ZWQgKSB7XG5cdFx0XHRcdFx0b2xkZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRob29rcy51bnF1ZXVlZCsrO1xuXG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbnN1cmUgdGhlIGNvbXBsZXRlIGhhbmRsZXIgaXMgY2FsbGVkIGJlZm9yZSB0aGlzIGNvbXBsZXRlc1xuXHRcdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBEZXRlY3Qgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy50ZXN0KCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBQcmV0ZW5kIHRvIGJlIGhpZGRlbiBpZiB0aGlzIGlzIGEgXCJzaG93XCIgYW5kXG5cdFx0XHRcdC8vIHRoZXJlIGlzIHN0aWxsIGRhdGEgZnJvbSBhIHN0b3BwZWQgc2hvdy9oaWRlXG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwic2hvd1wiICYmIGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSB0cnVlO1xuXG5cdFx0XHRcdC8vIElnbm9yZSBhbGwgb3RoZXIgbm8tb3Agc2hvdy9oaWRlIGRhdGFcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBCYWlsIG91dCBpZiB0aGlzIGlzIGEgbm8tb3AgbGlrZSAuaGlkZSgpLmhpZGUoKVxuXHRwcm9wVHdlZW4gPSAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3BzICk7XG5cdGlmICggIXByb3BUd2VlbiAmJiBqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlc3RyaWN0IFwib3ZlcmZsb3dcIiBhbmQgXCJkaXNwbGF5XCIgc3R5bGVzIGR1cmluZyBib3ggYW5pbWF0aW9uc1xuXHRpZiAoIGlzQm94ICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0Ly8gUmVjb3JkIGFsbCAzIG92ZXJmbG93IGF0dHJpYnV0ZXMgYmVjYXVzZSBJRSBkb2VzIG5vdCBpbmZlciB0aGUgc2hvcnRoYW5kXG5cdFx0Ly8gZnJvbSBpZGVudGljYWxseS12YWx1ZWQgb3ZlcmZsb3dYIGFuZCBvdmVyZmxvd1kgYW5kIEVkZ2UganVzdCBtaXJyb3JzXG5cdFx0Ly8gdGhlIG92ZXJmbG93WCB2YWx1ZSB0aGVyZS5cblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIElkZW50aWZ5IGEgZGlzcGxheSB0eXBlLCBwcmVmZXJyaW5nIG9sZCBzaG93L2hpZGUgZGF0YSBvdmVyIHRoZSBDU1MgY2FzY2FkZVxuXHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVNob3cgJiYgZGF0YVNob3cuZGlzcGxheTtcblx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHR9XG5cdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgKSB7XG5cdFx0XHRcdGRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gR2V0IG5vbmVtcHR5IHZhbHVlKHMpIGJ5IHRlbXBvcmFyaWx5IGZvcmNpbmcgdmlzaWJpbGl0eVxuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXkgfHwgcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBbmltYXRlIGlubGluZSBlbGVtZW50cyBhcyBpbmxpbmUtYmxvY2tcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwiaW5saW5lXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtYmxvY2tcIiAmJiByZXN0b3JlRGlzcGxheSAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdFx0Ly8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgZGlzcGxheSB2YWx1ZSBhdCB0aGUgZW5kIG9mIHB1cmUgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0XHRcdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdGRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5O1xuXHRcdFx0XHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/IFwiXCIgOiBkaXNwbGF5O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIG9wdHMub3ZlcmZsb3cgKSB7XG5cdFx0c3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdHN0eWxlLm92ZXJmbG93ID0gb3B0cy5vdmVyZmxvd1sgMCBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dYID0gb3B0cy5vdmVyZmxvd1sgMSBdO1xuXHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEltcGxlbWVudCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRwcm9wVHdlZW4gPSBmYWxzZTtcblx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXG5cdFx0Ly8gR2VuZXJhbCBzaG93L2hpZGUgc2V0dXAgZm9yIHRoaXMgZWxlbWVudCBhbmltYXRpb25cblx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRpZiAoIGRhdGFTaG93ICkge1xuXHRcdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gZGF0YVNob3cuaGlkZGVuO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkYXRhU2hvdyA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgXCJmeHNob3dcIiwgeyBkaXNwbGF5OiByZXN0b3JlRGlzcGxheSB9ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0b3JlIGhpZGRlbi92aXNpYmxlIGZvciB0b2dnbGUgc28gYC5zdG9wKCkudG9nZ2xlKClgIFwicmV2ZXJzZXNcIlxuXHRcdFx0aWYgKCB0b2dnbGUgKSB7XG5cdFx0XHRcdGRhdGFTaG93LmhpZGRlbiA9ICFoaWRkZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNob3cgZWxlbWVudHMgYmVmb3JlIGFuaW1hdGluZyB0aGVtXG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWxvb3AtZnVuYyAqL1xuXG5cdFx0XHRcdC8vIFRoZSBmaW5hbCBzdGVwIG9mIGEgXCJoaWRlXCIgYW5pbWF0aW9uIGlzIGFjdHVhbGx5IGhpZGluZyB0aGUgZWxlbWVudFxuXHRcdFx0XHRpZiAoICFoaWRkZW4gKSB7XG5cdFx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRcdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIG9yaWdbIHByb3AgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUGVyLXByb3BlcnR5IHNldHVwXG5cdFx0cHJvcFR3ZWVuID0gY3JlYXRlVHdlZW4oIGhpZGRlbiA/IGRhdGFTaG93WyBwcm9wIF0gOiAwLCBwcm9wLCBhbmltICk7XG5cdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRkYXRhU2hvd1sgcHJvcCBdID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHByb3BUd2Vlbi5lbmQgPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRcdHByb3BUd2Vlbi5zdGFydCA9IDA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIHByb3BGaWx0ZXIoIHByb3BzLCBzcGVjaWFsRWFzaW5nICkge1xuXHR2YXIgaW5kZXgsIG5hbWUsIGVhc2luZywgdmFsdWUsIGhvb2tzO1xuXG5cdC8vIGNhbWVsQ2FzZSwgc3BlY2lhbEVhc2luZyBhbmQgZXhwYW5kIGNzc0hvb2sgcGFzc1xuXHRmb3IgKCBpbmRleCBpbiBwcm9wcyApIHtcblx0XHRuYW1lID0gY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggcmVzdWx0LnN0b3AgKSApIHtcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCBhbmltYXRpb24uZWxlbSwgYW5pbWF0aW9uLm9wdHMucXVldWUgKS5zdG9wID1cblx0XHRcdFx0XHRyZXN1bHQuc3RvcC5iaW5kKCByZXN1bHQgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGlzRnVuY3Rpb24oIGFuaW1hdGlvbi5vcHRzLnN0YXJ0ICkgKSB7XG5cdFx0YW5pbWF0aW9uLm9wdHMuc3RhcnQuY2FsbCggZWxlbSwgYW5pbWF0aW9uICk7XG5cdH1cblxuXHQvLyBBdHRhY2ggY2FsbGJhY2tzIGZyb20gb3B0aW9uc1xuXHRhbmltYXRpb25cblx0XHQucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcblxuXHRqUXVlcnkuZngudGltZXIoXG5cdFx0alF1ZXJ5LmV4dGVuZCggdGljaywge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdGFuaW06IGFuaW1hdGlvbixcblx0XHRcdHF1ZXVlOiBhbmltYXRpb24ub3B0cy5xdWV1ZVxuXHRcdH0gKVxuXHQpO1xuXG5cdHJldHVybiBhbmltYXRpb247XG59XG5cbmpRdWVyeS5BbmltYXRpb24gPSBqUXVlcnkuZXh0ZW5kKCBBbmltYXRpb24sIHtcblxuXHR0d2VlbmVyczoge1xuXHRcdFwiKlwiOiBbIGZ1bmN0aW9uKCBwcm9wLCB2YWx1ZSApIHtcblx0XHRcdHZhciB0d2VlbiA9IHRoaXMuY3JlYXRlVHdlZW4oIHByb3AsIHZhbHVlICk7XG5cdFx0XHRhZGp1c3RDU1MoIHR3ZWVuLmVsZW0sIHByb3AsIHJjc3NOdW0uZXhlYyggdmFsdWUgKSwgdHdlZW4gKTtcblx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHR9IF1cblx0fSxcblxuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0aXNGdW5jdGlvbiggc3BlZWQgKSAmJiBzcGVlZCxcblx0XHRkdXJhdGlvbjogc3BlZWQsXG5cdFx0ZWFzaW5nOiBmbiAmJiBlYXNpbmcgfHwgZWFzaW5nICYmICFpc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHQvLyBHbyB0byB0aGUgZW5kIHN0YXRlIGlmIGZ4IGFyZSBvZmZcblx0aWYgKCBqUXVlcnkuZngub2ZmICkge1xuXHRcdG9wdC5kdXJhdGlvbiA9IDA7XG5cblx0fSBlbHNlIHtcblx0XHRpZiAoIHR5cGVvZiBvcHQuZHVyYXRpb24gIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRpZiAoIG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzICkge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzWyBvcHQuZHVyYXRpb24gXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkcy5fZGVmYXVsdDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgb3B0LnF1ZXVlIC0gdHJ1ZS91bmRlZmluZWQvbnVsbCAtPiBcImZ4XCJcblx0aWYgKCBvcHQucXVldWUgPT0gbnVsbCB8fCBvcHQucXVldWUgPT09IHRydWUgKSB7XG5cdFx0b3B0LnF1ZXVlID0gXCJmeFwiO1xuXHR9XG5cblx0Ly8gUXVldWVpbmdcblx0b3B0Lm9sZCA9IG9wdC5jb21wbGV0ZTtcblxuXHRvcHQuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS1hc2NpaS13aGl0ZXNwYWNlXG5cdGZ1bmN0aW9uIHN0cmlwQW5kQ29sbGFwc2UoIHZhbHVlICkge1xuXHRcdHZhciB0b2tlbnMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHRcdHJldHVybiB0b2tlbnMuam9pbiggXCIgXCIgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIGdldENsYXNzKCBlbGVtICkge1xuXHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApIHtcblx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0fVxuXHRyZXR1cm4gW107XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YWRkQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0Y2xhc3NlcyA9IGNsYXNzZXNUb0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCBjbGFzc2VzLmxlbmd0aCApIHtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPCAwICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgKz0gY2xhenogKyBcIiBcIjtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlbW92ZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIGdldENsYXNzKCB0aGlzICkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5hdHRyKCBcImNsYXNzXCIsIFwiXCIgKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlICphbGwqIGluc3RhbmNlc1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBjdXIuaW5kZXhPZiggXCIgXCIgKyBjbGF6eiArIFwiIFwiICkgPiAtMSApIHtcblx0XHRcdFx0XHRcdFx0Y3VyID0gY3VyLnJlcGxhY2UoIFwiIFwiICsgY2xhenogKyBcIiBcIiwgXCIgXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPbmx5IGFzc2lnbiBpZiBkaWZmZXJlbnQgdG8gYXZvaWQgdW5uZWVkZWQgcmVuZGVyaW5nLlxuXHRcdFx0XHRcdGZpbmFsVmFsdWUgPSBzdHJpcEFuZENvbGxhcHNlKCBjdXIgKTtcblx0XHRcdFx0XHRpZiAoIGN1clZhbHVlICE9PSBmaW5hbFZhbHVlICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiwgZmluYWxWYWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHRvZ2dsZUNsYXNzOiBmdW5jdGlvbiggdmFsdWUsIHN0YXRlVmFsICkge1xuXHRcdHZhciB0eXBlID0gdHlwZW9mIHZhbHVlLFxuXHRcdFx0aXNWYWxpZFZhbHVlID0gdHlwZSA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KCB2YWx1ZSApO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc3RhdGVWYWwgPT09IFwiYm9vbGVhblwiICYmIGlzVmFsaWRWYWx1ZSApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIGlzVmFsaWRWYWx1ZSApIHtcblxuXHRcdFx0XHQvLyBUb2dnbGUgaW5kaXZpZHVhbCBjbGFzcyBuYW1lc1xuXHRcdFx0XHRpID0gMDtcblx0XHRcdFx0c2VsZiA9IGpRdWVyeSggdGhpcyApO1xuXHRcdFx0XHRjbGFzc05hbWVzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCB2YWx1ZUlzRnVuY3Rpb24sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIGVsZW0udHlwZSBdIHx8XG5cdFx0XHRcdFx0alF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmXG5cdFx0XHRcdFx0XCJnZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBcInZhbHVlXCIgKSApICE9PSB1bmRlZmluZWRcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0Ly8gSGFuZGxlIG1vc3QgY29tbW9uIHN0cmluZyBjYXNlc1xuXHRcdFx0XHRpZiAoIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldC5yZXBsYWNlKCBycmV0dXJuLCBcIlwiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBIYW5kbGUgY2FzZXMgd2hlcmUgdmFsdWUgaXMgbnVsbC91bmRlZiBvciBudW1iZXJcblx0XHRcdFx0cmV0dXJuIHJldCA9PSBudWxsID8gXCJcIiA6IHJldDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhbHVlSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbHVlSXNGdW5jdGlvbiApIHtcblx0XHRcdFx0dmFsID0gdmFsdWUuY2FsbCggdGhpcywgaSwgalF1ZXJ5KCB0aGlzICkudmFsKCkgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUcmVhdCBudWxsL3VuZGVmaW5lZCBhcyBcIlwiOyBjb252ZXJ0IG51bWJlcnMgdG8gc3RyaW5nXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHR2YWwgPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWwgKz0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHZhbCA9IGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIjtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoIFwic2V0XCIgaW4gaG9va3MgKSB8fCBob29rcy5zZXQoIHRoaXMsIHZhbCwgXCJ2YWx1ZVwiICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0dGhpcy52YWx1ZSA9IHZhbDtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHR2YWxIb29rczoge1xuXHRcdG9wdGlvbjoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHR2YXIgdmFsID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgXCJ2YWx1ZVwiICk7XG5cdFx0XHRcdHJldHVybiB2YWwgIT0gbnVsbCA/XG5cdFx0XHRcdFx0dmFsIDpcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTAgLSAxMSBvbmx5XG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLXdoaXRlc3BhY2Vcblx0XHRcdFx0XHRzdHJpcEFuZENvbGxhcHNlKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLCBpLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIixcblx0XHRcdFx0XHR2YWx1ZXMgPSBvbmUgPyBudWxsIDogW10sXG5cdFx0XHRcdFx0bWF4ID0gb25lID8gaW5kZXggKyAxIDogb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0aWYgKCBpbmRleCA8IDAgKSB7XG5cdFx0XHRcdFx0aSA9IG1heDtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGkgPSBvbmUgPyBpbmRleCA6IDA7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0Ly8gSUU4LTkgZG9lc24ndCB1cGRhdGUgc2VsZWN0ZWQgYWZ0ZXIgZm9ybSByZXNldCAoIzI1NTEpXG5cdFx0XHRcdFx0aWYgKCAoIG9wdGlvbi5zZWxlY3RlZCB8fCBpID09PSBpbmRleCApICYmXG5cblx0XHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcmV0dXJuIG9wdGlvbnMgdGhhdCBhcmUgZGlzYWJsZWQgb3IgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0XHRcdFx0XHQhb3B0aW9uLmRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRcdCggIW9wdGlvbi5wYXJlbnROb2RlLmRpc2FibGVkIHx8XG5cdFx0XHRcdFx0XHRcdFx0IW5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tY29uZC1hc3NpZ24gKi9cblxuXHRcdFx0XHRcdGlmICggb3B0aW9uLnNlbGVjdGVkID1cblx0XHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBqUXVlcnkudmFsSG9va3Mub3B0aW9uLmdldCggb3B0aW9uICksIHZhbHVlcyApID4gLTFcblx0XHRcdFx0XHQpIHtcblx0XHRcdFx0XHRcdG9wdGlvblNldCA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yY2UgYnJvd3NlcnMgdG8gYmVoYXZlIGNvbnNpc3RlbnRseSB3aGVuIG5vbi1tYXRjaGluZyB2YWx1ZSBpcyBzZXRcblx0XHRcdFx0aWYgKCAhb3B0aW9uU2V0ICkge1xuXHRcdFx0XHRcdGVsZW0uc2VsZWN0ZWRJbmRleCA9IC0xO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaCggWyBcInJhZGlvXCIsIFwiY2hlY2tib3hcIiBdLCBmdW5jdGlvbigpIHtcblx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0gPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoIGVsZW0gKS52YWwoKSwgdmFsdWUgKSA+IC0xICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRpZiAoICFzdXBwb3J0LmNoZWNrT24gKSB7XG5cdFx0alF1ZXJ5LnZhbEhvb2tzWyB0aGlzIF0uZ2V0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBudWxsID8gXCJvblwiIDogZWxlbS52YWx1ZTtcblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFJldHVybiBqUXVlcnkgZm9yIGF0dHJpYnV0ZXMtb25seSBpbmNsdXNpb25cblxuXG5zdXBwb3J0LmZvY3VzaW4gPSBcIm9uZm9jdXNpblwiIGluIHdpbmRvdztcblxuXG52YXIgcmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0fTtcblxualF1ZXJ5LmV4dGVuZCggalF1ZXJ5LmV2ZW50LCB7XG5cblx0dHJpZ2dlcjogZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgKSB7XG5cblx0XHR2YXIgaSwgY3VyLCB0bXAsIGJ1YmJsZVR5cGUsIG9udHlwZSwgaGFuZGxlLCBzcGVjaWFsLCBsYXN0RWxlbWVudCxcblx0XHRcdGV2ZW50UGF0aCA9IFsgZWxlbSB8fCBkb2N1bWVudCBdLFxuXHRcdFx0dHlwZSA9IGhhc093bi5jYWxsKCBldmVudCwgXCJ0eXBlXCIgKSA/IGV2ZW50LnR5cGUgOiBldmVudCxcblx0XHRcdG5hbWVzcGFjZXMgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwibmFtZXNwYWNlXCIgKSA/IGV2ZW50Lm5hbWVzcGFjZS5zcGxpdCggXCIuXCIgKSA6IFtdO1xuXG5cdFx0Y3VyID0gbGFzdEVsZW1lbnQgPSB0bXAgPSBlbGVtID0gZWxlbSB8fCBkb2N1bWVudDtcblxuXHRcdC8vIERvbid0IGRvIGV2ZW50cyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gZm9jdXMvYmx1ciBtb3JwaHMgdG8gZm9jdXNpbi9vdXQ7IGVuc3VyZSB3ZSdyZSBub3QgZmlyaW5nIHRoZW0gcmlnaHQgbm93XG5cdFx0aWYgKCByZm9jdXNNb3JwaC50ZXN0KCB0eXBlICsgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZS5pbmRleE9mKCBcIi5cIiApID4gLTEgKSB7XG5cblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KCBcIi5cIiApO1xuXHRcdFx0dHlwZSA9IG5hbWVzcGFjZXMuc2hpZnQoKTtcblx0XHRcdG5hbWVzcGFjZXMuc29ydCgpO1xuXHRcdH1cblx0XHRvbnR5cGUgPSB0eXBlLmluZGV4T2YoIFwiOlwiICkgPCAwICYmIFwib25cIiArIHR5cGU7XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYSBqUXVlcnkuRXZlbnQgb2JqZWN0LCBPYmplY3QsIG9yIGp1c3QgYW4gZXZlbnQgdHlwZSBzdHJpbmdcblx0XHRldmVudCA9IGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdGV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIHR5cGUsIHR5cGVvZiBldmVudCA9PT0gXCJvYmplY3RcIiAmJiBldmVudCApO1xuXG5cdFx0Ly8gVHJpZ2dlciBiaXRtYXNrOiAmIDEgZm9yIG5hdGl2ZSBoYW5kbGVyczsgJiAyIGZvciBqUXVlcnkgKGFsd2F5cyB0cnVlKVxuXHRcdGV2ZW50LmlzVHJpZ2dlciA9IG9ubHlIYW5kbGVycyA/IDIgOiAzO1xuXHRcdGV2ZW50Lm5hbWVzcGFjZSA9IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKTtcblx0XHRldmVudC5ybmFtZXNwYWNlID0gZXZlbnQubmFtZXNwYWNlID9cblx0XHRcdG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oIFwiXFxcXC4oPzouKlxcXFwufClcIiApICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRsYXN0RWxlbWVudCA9IGN1cjtcblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoXG5cdFx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCBPYmplY3QuY3JlYXRlKCBudWxsIClcblx0XHRcdFx0KVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgaXNGdW5jdGlvbiggZWxlbVsgdHlwZSBdICkgJiYgIWlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyBEb24ndCByZS10cmlnZ2VyIGFuIG9uRk9PIGV2ZW50IHdoZW4gd2UgY2FsbCBpdHMgRk9PKCkgbWV0aG9kXG5cdFx0XHRcdFx0dG1wID0gZWxlbVsgb250eXBlIF07XG5cblx0XHRcdFx0XHRpZiAoIHRtcCApIHtcblx0XHRcdFx0XHRcdGVsZW1bIG9udHlwZSBdID0gbnVsbDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmV2ZW50IHJlLXRyaWdnZXJpbmcgb2YgdGhlIHNhbWUgZXZlbnQsIHNpbmNlIHdlIGFscmVhZHkgYnViYmxlZCBpdCBhYm92ZVxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgPSB0eXBlO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRlbGVtWyB0eXBlIF0oKTtcblxuXHRcdFx0XHRcdGlmICggZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdFx0XHRcdGxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIHN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gSGFuZGxlOiByZWd1bGFyIG5vZGVzICh2aWEgYHRoaXMub3duZXJEb2N1bWVudGApLCB3aW5kb3dcblx0XHRcdFx0Ly8gKHZpYSBgdGhpcy5kb2N1bWVudGApICYgZG9jdW1lbnQgKHZpYSBgdGhpc2ApLlxuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLmRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0geyBndWlkOiBEYXRlLm5vdygpIH07XG5cbnZhciBycXVlcnkgPSAoIC9cXD8vICk7XG5cblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbDtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdC8vIElFIHRocm93cyBvbiBwYXJzZUZyb21TdHJpbmcgd2l0aCBpbnZhbGlkIGlucHV0LlxuXHR0cnkge1xuXHRcdHhtbCA9ICggbmV3IHdpbmRvdy5ET01QYXJzZXIoKSApLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHhtbCA9IHVuZGVmaW5lZDtcblx0fVxuXG5cdGlmICggIXhtbCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdG9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdID1cblx0XHRcdFx0XHRcdFx0XHRcdCggcmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdIHx8IFtdIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmNvbmNhdCggbWF0Y2hbIDIgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRtYXRjaCA9IHJlc3BvbnNlSGVhZGVyc1sga2V5LnRvTG93ZXJDYXNlKCkgKyBcIiBcIiBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaC5qb2luKCBcIiwgXCIgKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlIGFuZCBzaG91bGQgYmUgcHJvY2Vzc2VkLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICYmICggcy5wcm9jZXNzRGF0YSB8fCB0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICkgKSB7XG5cdFx0XHRcdGNhY2hlVVJMICs9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmRhdGE7XG5cblx0XHRcdFx0Ly8gIzk2ODI6IHJlbW92ZSBkYXRhIHNvIHRoYXQgaXQncyBub3QgdXNlZCBpbiBhbiBldmVudHVhbCByZXRyeVxuXHRcdFx0XHRkZWxldGUgcy5kYXRhO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgb3IgdXBkYXRlIGFudGktY2FjaGUgcGFyYW0gaWYgbmVlZGVkXG5cdFx0XHRpZiAoIHMuY2FjaGUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRjYWNoZVVSTCA9IGNhY2hlVVJMLnJlcGxhY2UoIHJhbnRpQ2FjaGUsIFwiJDFcIiApO1xuXHRcdFx0XHR1bmNhY2hlZCA9ICggcnF1ZXJ5LnRlc3QoIGNhY2hlVVJMICkgPyBcIiZcIiA6IFwiP1wiICkgKyBcIl89XCIgKyAoIG5vbmNlLmd1aWQrKyApICtcblx0XHRcdFx0XHR1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVXNlIGEgbm9vcCBjb252ZXJ0ZXIgZm9yIG1pc3Npbmcgc2NyaXB0XG5cdFx0XHRpZiAoICFpc1N1Y2Nlc3MgJiYgalF1ZXJ5LmluQXJyYXkoIFwic2NyaXB0XCIsIHMuZGF0YVR5cGVzICkgPiAtMSApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggdHlwZW9mIHByb3BzLnRvcCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0cHJvcHMudG9wICs9IFwicHhcIjtcblx0XHRcdH1cblx0XHRcdGlmICggdHlwZW9mIHByb3BzLmxlZnQgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHByb3BzLmxlZnQgKz0gXCJweFwiO1xuXHRcdFx0fVxuXHRcdFx0Y3VyRWxlbS5jc3MoIHByb3BzICk7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0Ly8gb2Zmc2V0KCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgYm9yZGVyIGJveCB0byB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9mZnNldDogZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBQcmVzZXJ2ZSBjaGFpbmluZyBmb3Igc2V0dGVyXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIG9wdGlvbnMgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHRoaXMgOlxuXHRcdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHR2YXIgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHQvLyBHZXQgZG9jdW1lbnQtcmVsYXRpdmUgcG9zaXRpb24gYnkgYWRkaW5nIHZpZXdwb3J0IHNjcm9sbCB0byB2aWV3cG9ydC1yZWxhdGl2ZSBnQkNSXG5cdFx0cmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0d2luID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHJlY3QudG9wICsgd2luLnBhZ2VZT2Zmc2V0LFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0XG5cdFx0fTtcblx0fSxcblxuXHQvLyBwb3NpdGlvbigpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIG1hcmdpbiBib3ggdG8gaXRzIG9mZnNldCBwYXJlbnQncyBwYWRkaW5nIGJveFxuXHQvLyBUaGlzIGNvcnJlc3BvbmRzIHRvIHRoZSBiZWhhdmlvciBvZiBDU1MgYWJzb2x1dGUgcG9zaXRpb25pbmdcblx0cG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggIXRoaXNbIDAgXSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgb2Zmc2V0UGFyZW50LCBvZmZzZXQsIGRvYyxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gcG9zaXRpb246Zml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHRoZSB2aWV3cG9ydCwgd2hpY2ggaXRzZWxmIGFsd2F5cyBoYXMgemVybyBvZmZzZXRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBwb3NpdGlvbjpmaXhlZCBpbXBsaWVzIGF2YWlsYWJpbGl0eSBvZiBnZXRCb3VuZGluZ0NsaWVudFJlY3Rcblx0XHRcdG9mZnNldCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdGhlICpyZWFsKiBvZmZzZXQgcGFyZW50LCB3aGljaCBjYW4gYmUgdGhlIGRvY3VtZW50IG9yIGl0cyByb290IGVsZW1lbnRcblx0XHRcdC8vIHdoZW4gYSBzdGF0aWNhbGx5IHBvc2l0aW9uZWQgZWxlbWVudCBpcyBpZGVudGlmaWVkXG5cdFx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSBlbGVtLm9mZnNldFBhcmVudCB8fCBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiZcblx0XHRcdFx0KCBvZmZzZXRQYXJlbnQgPT09IGRvYy5ib2R5IHx8IG9mZnNldFBhcmVudCA9PT0gZG9jLmRvY3VtZW50RWxlbWVudCApICYmXG5cdFx0XHRcdGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIG9mZnNldFBhcmVudCAmJiBvZmZzZXRQYXJlbnQgIT09IGVsZW0gJiYgb2Zmc2V0UGFyZW50Lm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIEluY29ycG9yYXRlIGJvcmRlcnMgaW50byBpdHMgb2Zmc2V0LCBzaW5jZSB0aGV5IGFyZSBvdXRzaWRlIGl0cyBjb250ZW50IG9yaWdpblxuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBqUXVlcnkoIG9mZnNldFBhcmVudCApLm9mZnNldCgpO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQudG9wICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC5sZWZ0ICs9IGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiBvZmZzZXQudG9wIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSApXG5cdFx0fTtcblx0fSxcblxuXHQvLyBUaGlzIG1ldGhvZCB3aWxsIHJldHVybiBkb2N1bWVudEVsZW1lbnQgaW4gdGhlIGZvbGxvd2luZyBjYXNlczpcblx0Ly8gMSkgRm9yIHRoZSBlbGVtZW50IGluc2lkZSB0aGUgaWZyYW1lIHdpdGhvdXQgb2Zmc2V0UGFyZW50LCB0aGlzIG1ldGhvZCB3aWxsIHJldHVyblxuXHQvLyAgICBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIHBhcmVudCB3aW5kb3dcblx0Ly8gMikgRm9yIHRoZSBoaWRkZW4gb3IgZGV0YWNoZWQgZWxlbWVudFxuXHQvLyAzKSBGb3IgYm9keSBvciBodG1sIGVsZW1lbnQsIGkuZS4gaW4gY2FzZSBvZiB0aGUgaHRtbCBub2RlIC0gaXQgd2lsbCByZXR1cm4gaXRzZWxmXG5cdC8vXG5cdC8vIGJ1dCB0aG9zZSBleGNlcHRpb25zIHdlcmUgbmV2ZXIgcHJlc2VudGVkIGFzIGEgcmVhbCBsaWZlIHVzZS1jYXNlc1xuXHQvLyBhbmQgbWlnaHQgYmUgY29uc2lkZXJlZCBhcyBtb3JlIHByZWZlcmFibGUgcmVzdWx0cy5cblx0Ly9cblx0Ly8gVGhpcyBsb2dpYywgaG93ZXZlciwgaXMgbm90IGd1YXJhbnRlZWQgYW5kIGNhbiBjaGFuZ2UgYXQgYW55IHBvaW50IGluIHRoZSBmdXR1cmVcblx0b2Zmc2V0UGFyZW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50O1xuXG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJiBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0UGFyZW50O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGRvY3VtZW50RWxlbWVudDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuLy8gQ3JlYXRlIHNjcm9sbExlZnQgYW5kIHNjcm9sbFRvcCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBzY3JvbGxMZWZ0OiBcInBhZ2VYT2Zmc2V0XCIsIHNjcm9sbFRvcDogXCJwYWdlWU9mZnNldFwiIH0sIGZ1bmN0aW9uKCBtZXRob2QsIHByb3AgKSB7XG5cdHZhciB0b3AgPSBcInBhZ2VZT2Zmc2V0XCIgPT09IHByb3A7XG5cblx0alF1ZXJ5LmZuWyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG1ldGhvZCwgdmFsICkge1xuXG5cdFx0XHQvLyBDb2FsZXNjZSBkb2N1bWVudHMgYW5kIHdpbmRvd3Ncblx0XHRcdHZhciB3aW47XG5cdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW07XG5cdFx0XHR9IGVsc2UgaWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtLmRlZmF1bHRWaWV3O1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gd2luID8gd2luWyBwcm9wIF0gOiBlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogd2luLnBhZ2VYT2Zmc2V0LFxuXHRcdFx0XHRcdHRvcCA/IHZhbCA6IHdpbi5wYWdlWU9mZnNldFxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9O1xufSApO1xuXG4vLyBTdXBwb3J0OiBTYWZhcmkgPD03IC0gOS4xLCBDaHJvbWUgPD0zNyAtIDQ5XG4vLyBBZGQgdGhlIHRvcC9sZWZ0IGNzc0hvb2tzIHVzaW5nIGpRdWVyeS5mbi5wb3NpdGlvblxuLy8gV2Via2l0IGJ1ZzogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTI5MDg0XG4vLyBCbGluayBidWc6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTU4OTM0N1xuLy8gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHBlcmNlbnQgd2hlbiBzcGVjaWZpZWQgZm9yIHRvcC9sZWZ0L2JvdHRvbS9yaWdodDtcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggX2ksIHByb3AgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJvcCBdID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnBpeGVsUG9zaXRpb24sXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0Y29tcHV0ZWQgPSBjdXJDU1MoIGVsZW0sIHByb3AgKTtcblxuXHRcdFx0XHQvLyBJZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0gKTtcblxuXG4vLyBDcmVhdGUgaW5uZXJIZWlnaHQsIGlubmVyV2lkdGgsIGhlaWdodCwgd2lkdGgsIG91dGVySGVpZ2h0IGFuZCBvdXRlcldpZHRoIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IEhlaWdodDogXCJoZWlnaHRcIiwgV2lkdGg6IFwid2lkdGhcIiB9LCBmdW5jdGlvbiggbmFtZSwgdHlwZSApIHtcblx0alF1ZXJ5LmVhY2goIHsgcGFkZGluZzogXCJpbm5lclwiICsgbmFtZSwgY29udGVudDogdHlwZSwgXCJcIjogXCJvdXRlclwiICsgbmFtZSB9LFxuXHRcdGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXG5cdFx0Ly8gTWFyZ2luIGlzIG9ubHkgZm9yIG91dGVySGVpZ2h0LCBvdXRlcldpZHRoXG5cdFx0alF1ZXJ5LmZuWyBmdW5jTmFtZSBdID0gZnVuY3Rpb24oIG1hcmdpbiwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgY2hhaW5hYmxlID0gYXJndW1lbnRzLmxlbmd0aCAmJiAoIGRlZmF1bHRFeHRyYSB8fCB0eXBlb2YgbWFyZ2luICE9PSBcImJvb2xlYW5cIiApLFxuXHRcdFx0XHRleHRyYSA9IGRlZmF1bHRFeHRyYSB8fCAoIG1hcmdpbiA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gdHJ1ZSA/IFwibWFyZ2luXCIgOiBcImJvcmRlclwiICk7XG5cblx0XHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIGRvYztcblxuXHRcdFx0XHRpZiAoIGlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdFx0XHQvLyAkKCB3aW5kb3cgKS5vdXRlcldpZHRoL0hlaWdodCByZXR1cm4gdy9oIGluY2x1ZGluZyBzY3JvbGxiYXJzIChnaC0xNzI5KVxuXHRcdFx0XHRcdHJldHVybiBmdW5jTmFtZS5pbmRleE9mKCBcIm91dGVyXCIgKSA9PT0gMCA/XG5cdFx0XHRcdFx0XHRlbGVtWyBcImlubmVyXCIgKyBuYW1lIF0gOlxuXHRcdFx0XHRcdFx0ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIFwiY2xpZW50XCIgKyBuYW1lIF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBHZXQgZG9jdW1lbnQgd2lkdGggb3IgaGVpZ2h0XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRkb2MgPSBlbGVtLmRvY3VtZW50RWxlbWVudDtcblxuXHRcdFx0XHRcdC8vIEVpdGhlciBzY3JvbGxbV2lkdGgvSGVpZ2h0XSBvciBvZmZzZXRbV2lkdGgvSGVpZ2h0XSBvciBjbGllbnRbV2lkdGgvSGVpZ2h0XSxcblx0XHRcdFx0XHQvLyB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHRyZXR1cm4gTWF0aC5tYXgoXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwic2Nyb2xsXCIgKyBuYW1lIF0sIGRvY1sgXCJzY3JvbGxcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJvZmZzZXRcIiArIG5hbWUgXSwgZG9jWyBcIm9mZnNldFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZG9jWyBcImNsaWVudFwiICsgbmFtZSBdXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID9cblxuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUgKTtcblx0XHR9O1xuXHR9ICk7XG59ICk7XG5cblxualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIF9pLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0gKTtcblxuXG5cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdGJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBudWxsLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmJpbmQ6IGZ1bmN0aW9uKCB0eXBlcywgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub2ZmKCB0eXBlcywgbnVsbCwgZm4gKTtcblx0fSxcblxuXHRkZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5kZWxlZ2F0ZTogZnVuY3Rpb24oIHNlbGVjdG9yLCB0eXBlcywgZm4gKSB7XG5cblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgP1xuXHRcdFx0dGhpcy5vZmYoIHNlbGVjdG9yLCBcIioqXCIgKSA6XG5cdFx0XHR0aGlzLm9mZiggdHlwZXMsIHNlbGVjdG9yIHx8IFwiKipcIiwgZm4gKTtcblx0fSxcblxuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cblx0XHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRcdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHRcdH07XG5cdH0gKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xyXG5pbXBvcnQgJ2Jvb3RzdHJhcCc7XHJcbmltcG9ydCBNYWluIGZyb20gJy4vQ29tcG9uZW50cy9NYWluJztcclxuXHJcbmltcG9ydCAnLi9jc3MvYXBwLnNjc3MnO1xyXG5cclxuJChmdW5jdGlvbiAoKSB7XHJcbiAgICBuZXcgTWFpbigpO1xyXG59KTtcclxuIiwiLyohXG4gICogQm9vdHN0cmFwIHY0LjUuMyAoaHR0cHM6Ly9nZXRib290c3RyYXAuY29tLylcbiAgKiBDb3B5cmlnaHQgMjAxMS0yMDIwIFRoZSBCb290c3RyYXAgQXV0aG9ycyAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2dyYXBocy9jb250cmlidXRvcnMpXG4gICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICovXG4oZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkge1xuICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMsIHJlcXVpcmUoJ2pxdWVyeScpLCByZXF1aXJlKCdwb3BwZXIuanMnKSkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJywgJ2pxdWVyeScsICdwb3BwZXIuanMnXSwgZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBmYWN0b3J5KGdsb2JhbC5ib290c3RyYXAgPSB7fSwgZ2xvYmFsLmpRdWVyeSwgZ2xvYmFsLlBvcHBlcikpO1xufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMsICQsIFBvcHBlcikgeyAndXNlIHN0cmljdCc7XG5cbiAgZnVuY3Rpb24gX2ludGVyb3BEZWZhdWx0TGVnYWN5IChlKSB7IHJldHVybiBlICYmIHR5cGVvZiBlID09PSAnb2JqZWN0JyAmJiAnZGVmYXVsdCcgaW4gZSA/IGUgOiB7ICdkZWZhdWx0JzogZSB9OyB9XG5cbiAgdmFyICRfX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX2ludGVyb3BEZWZhdWx0TGVnYWN5KCQpO1xuICB2YXIgUG9wcGVyX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19pbnRlcm9wRGVmYXVsdExlZ2FjeShQb3BwZXIpO1xuXG4gIGZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICAgIHJldHVybiBDb25zdHJ1Y3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICAgIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICAgIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICAgIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICAgIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NC41LjMpOiB1dGlsLmpzXG4gICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFpbi9MSUNFTlNFKVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBQcml2YXRlIFRyYW5zaXRpb25FbmQgSGVscGVyc1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIFRSQU5TSVRJT05fRU5EID0gJ3RyYW5zaXRpb25lbmQnO1xuICB2YXIgTUFYX1VJRCA9IDEwMDAwMDA7XG4gIHZhciBNSUxMSVNFQ09ORFNfTVVMVElQTElFUiA9IDEwMDA7IC8vIFNob3V0b3V0IEFuZ3VzQ3JvbGwgKGh0dHBzOi8vZ29vLmdsL3B4d1FHcClcblxuICBmdW5jdGlvbiB0b1R5cGUob2JqKSB7XG4gICAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIFwiXCIgKyBvYmo7XG4gICAgfVxuXG4gICAgcmV0dXJuIHt9LnRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvXFxzKFthLXpdKykvaSlbMV0udG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNwZWNpYWxUcmFuc2l0aW9uRW5kRXZlbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJpbmRUeXBlOiBUUkFOU0lUSU9OX0VORCxcbiAgICAgIGRlbGVnYXRlVHlwZTogVFJBTlNJVElPTl9FTkQsXG4gICAgICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgICAgICBpZiAoJF9fZGVmYXVsdFsnZGVmYXVsdCddKGV2ZW50LnRhcmdldCkuaXModGhpcykpIHtcbiAgICAgICAgICByZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zaXRpb25FbmRFbXVsYXRvcihkdXJhdGlvbikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFjYWxsZWQpIHtcbiAgICAgICAgVXRpbC50cmlnZ2VyVHJhbnNpdGlvbkVuZChfdGhpcyk7XG4gICAgICB9XG4gICAgfSwgZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbkVuZFN1cHBvcnQoKSB7XG4gICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuLmVtdWxhdGVUcmFuc2l0aW9uRW5kID0gdHJhbnNpdGlvbkVuZEVtdWxhdG9yO1xuICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5ldmVudC5zcGVjaWFsW1V0aWwuVFJBTlNJVElPTl9FTkRdID0gZ2V0U3BlY2lhbFRyYW5zaXRpb25FbmRFdmVudCgpO1xuICB9XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBQdWJsaWMgVXRpbCBBcGlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICB2YXIgVXRpbCA9IHtcbiAgICBUUkFOU0lUSU9OX0VORDogJ2JzVHJhbnNpdGlvbkVuZCcsXG4gICAgZ2V0VUlEOiBmdW5jdGlvbiBnZXRVSUQocHJlZml4KSB7XG4gICAgICBkbyB7XG4gICAgICAgIHByZWZpeCArPSB+fihNYXRoLnJhbmRvbSgpICogTUFYX1VJRCk7IC8vIFwifn5cIiBhY3RzIGxpa2UgYSBmYXN0ZXIgTWF0aC5mbG9vcigpIGhlcmVcbiAgICAgIH0gd2hpbGUgKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHByZWZpeCkpO1xuXG4gICAgICByZXR1cm4gcHJlZml4O1xuICAgIH0sXG4gICAgZ2V0U2VsZWN0b3JGcm9tRWxlbWVudDogZnVuY3Rpb24gZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQnKTtcblxuICAgICAgaWYgKCFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gJyMnKSB7XG4gICAgICAgIHZhciBocmVmQXR0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICAgIHNlbGVjdG9yID0gaHJlZkF0dHIgJiYgaHJlZkF0dHIgIT09ICcjJyA/IGhyZWZBdHRyLnRyaW0oKSA6ICcnO1xuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgPyBzZWxlY3RvciA6IG51bGw7XG4gICAgICB9IGNhdGNoIChfKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQ6IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0gLy8gR2V0IHRyYW5zaXRpb24tZHVyYXRpb24gb2YgdGhlIGVsZW1lbnRcblxuXG4gICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKGVsZW1lbnQpLmNzcygndHJhbnNpdGlvbi1kdXJhdGlvbicpO1xuICAgICAgdmFyIHRyYW5zaXRpb25EZWxheSA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShlbGVtZW50KS5jc3MoJ3RyYW5zaXRpb24tZGVsYXknKTtcbiAgICAgIHZhciBmbG9hdFRyYW5zaXRpb25EdXJhdGlvbiA9IHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIHZhciBmbG9hdFRyYW5zaXRpb25EZWxheSA9IHBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KTsgLy8gUmV0dXJuIDAgaWYgZWxlbWVudCBvciB0cmFuc2l0aW9uIGR1cmF0aW9uIGlzIG5vdCBmb3VuZFxuXG4gICAgICBpZiAoIWZsb2F0VHJhbnNpdGlvbkR1cmF0aW9uICYmICFmbG9hdFRyYW5zaXRpb25EZWxheSkge1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH0gLy8gSWYgbXVsdGlwbGUgZHVyYXRpb25zIGFyZSBkZWZpbmVkLCB0YWtlIHRoZSBmaXJzdFxuXG5cbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvbi5zcGxpdCgnLCcpWzBdO1xuICAgICAgdHJhbnNpdGlvbkRlbGF5ID0gdHJhbnNpdGlvbkRlbGF5LnNwbGl0KCcsJylbMF07XG4gICAgICByZXR1cm4gKHBhcnNlRmxvYXQodHJhbnNpdGlvbkR1cmF0aW9uKSArIHBhcnNlRmxvYXQodHJhbnNpdGlvbkRlbGF5KSkgKiBNSUxMSVNFQ09ORFNfTVVMVElQTElFUjtcbiAgICB9LFxuICAgIHJlZmxvdzogZnVuY3Rpb24gcmVmbG93KGVsZW1lbnQpIHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm9mZnNldEhlaWdodDtcbiAgICB9LFxuICAgIHRyaWdnZXJUcmFuc2l0aW9uRW5kOiBmdW5jdGlvbiB0cmlnZ2VyVHJhbnNpdGlvbkVuZChlbGVtZW50KSB7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZWxlbWVudCkudHJpZ2dlcihUUkFOU0lUSU9OX0VORCk7XG4gICAgfSxcbiAgICBzdXBwb3J0c1RyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIHN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKFRSQU5TSVRJT05fRU5EKTtcbiAgICB9LFxuICAgIGlzRWxlbWVudDogZnVuY3Rpb24gaXNFbGVtZW50KG9iaikge1xuICAgICAgcmV0dXJuIChvYmpbMF0gfHwgb2JqKS5ub2RlVHlwZTtcbiAgICB9LFxuICAgIHR5cGVDaGVja0NvbmZpZzogZnVuY3Rpb24gdHlwZUNoZWNrQ29uZmlnKGNvbXBvbmVudE5hbWUsIGNvbmZpZywgY29uZmlnVHlwZXMpIHtcbiAgICAgIGZvciAodmFyIHByb3BlcnR5IGluIGNvbmZpZ1R5cGVzKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29uZmlnVHlwZXMsIHByb3BlcnR5KSkge1xuICAgICAgICAgIHZhciBleHBlY3RlZFR5cGVzID0gY29uZmlnVHlwZXNbcHJvcGVydHldO1xuICAgICAgICAgIHZhciB2YWx1ZSA9IGNvbmZpZ1twcm9wZXJ0eV07XG4gICAgICAgICAgdmFyIHZhbHVlVHlwZSA9IHZhbHVlICYmIFV0aWwuaXNFbGVtZW50KHZhbHVlKSA/ICdlbGVtZW50JyA6IHRvVHlwZSh2YWx1ZSk7XG5cbiAgICAgICAgICBpZiAoIW5ldyBSZWdFeHAoZXhwZWN0ZWRUeXBlcykudGVzdCh2YWx1ZVR5cGUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoY29tcG9uZW50TmFtZS50b1VwcGVyQ2FzZSgpICsgXCI6IFwiICsgKFwiT3B0aW9uIFxcXCJcIiArIHByb3BlcnR5ICsgXCJcXFwiIHByb3ZpZGVkIHR5cGUgXFxcIlwiICsgdmFsdWVUeXBlICsgXCJcXFwiIFwiKSArIChcImJ1dCBleHBlY3RlZCB0eXBlIFxcXCJcIiArIGV4cGVjdGVkVHlwZXMgKyBcIlxcXCIuXCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGZpbmRTaGFkb3dSb290OiBmdW5jdGlvbiBmaW5kU2hhZG93Um9vdChlbGVtZW50KSB7XG4gICAgICBpZiAoIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hdHRhY2hTaGFkb3cpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9IC8vIENhbiBmaW5kIHRoZSBzaGFkb3cgcm9vdCBvdGhlcndpc2UgaXQnbGwgcmV0dXJuIHRoZSBkb2N1bWVudFxuXG5cbiAgICAgIGlmICh0eXBlb2YgZWxlbWVudC5nZXRSb290Tm9kZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB2YXIgcm9vdCA9IGVsZW1lbnQuZ2V0Um9vdE5vZGUoKTtcbiAgICAgICAgcmV0dXJuIHJvb3QgaW5zdGFuY2VvZiBTaGFkb3dSb290ID8gcm9vdCA6IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmIChlbGVtZW50IGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH0gLy8gd2hlbiB3ZSBkb24ndCBmaW5kIGEgc2hhZG93IHJvb3RcblxuXG4gICAgICBpZiAoIWVsZW1lbnQucGFyZW50Tm9kZSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFV0aWwuZmluZFNoYWRvd1Jvb3QoZWxlbWVudC5wYXJlbnROb2RlKTtcbiAgICB9LFxuICAgIGpRdWVyeURldGVjdGlvbjogZnVuY3Rpb24galF1ZXJ5RGV0ZWN0aW9uKCkge1xuICAgICAgaWYgKHR5cGVvZiAkX19kZWZhdWx0WydkZWZhdWx0J10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkuIGpRdWVyeSBtdXN0IGJlIGluY2x1ZGVkIGJlZm9yZSBCb290c3RyYXBcXCdzIEphdmFTY3JpcHQuJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciB2ZXJzaW9uID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuLmpxdWVyeS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJyk7XG4gICAgICB2YXIgbWluTWFqb3IgPSAxO1xuICAgICAgdmFyIGx0TWFqb3IgPSAyO1xuICAgICAgdmFyIG1pbk1pbm9yID0gOTtcbiAgICAgIHZhciBtaW5QYXRjaCA9IDE7XG4gICAgICB2YXIgbWF4TWFqb3IgPSA0O1xuXG4gICAgICBpZiAodmVyc2lvblswXSA8IGx0TWFqb3IgJiYgdmVyc2lvblsxXSA8IG1pbk1pbm9yIHx8IHZlcnNpb25bMF0gPT09IG1pbk1ham9yICYmIHZlcnNpb25bMV0gPT09IG1pbk1pbm9yICYmIHZlcnNpb25bMl0gPCBtaW5QYXRjaCB8fCB2ZXJzaW9uWzBdID49IG1heE1ham9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQm9vdHN0cmFwXFwncyBKYXZhU2NyaXB0IHJlcXVpcmVzIGF0IGxlYXN0IGpRdWVyeSB2MS45LjEgYnV0IGxlc3MgdGhhbiB2NC4wLjAnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIFV0aWwualF1ZXJ5RGV0ZWN0aW9uKCk7XG4gIHNldFRyYW5zaXRpb25FbmRTdXBwb3J0KCk7XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FID0gJ2FsZXJ0JztcbiAgdmFyIFZFUlNJT04gPSAnNC41LjMnO1xuICB2YXIgREFUQV9LRVkgPSAnYnMuYWxlcnQnO1xuICB2YXIgRVZFTlRfS0VZID0gXCIuXCIgKyBEQVRBX0tFWTtcbiAgdmFyIERBVEFfQVBJX0tFWSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUVdO1xuICB2YXIgU0VMRUNUT1JfRElTTUlTUyA9ICdbZGF0YS1kaXNtaXNzPVwiYWxlcnRcIl0nO1xuICB2YXIgRVZFTlRfQ0xPU0UgPSBcImNsb3NlXCIgKyBFVkVOVF9LRVk7XG4gIHZhciBFVkVOVF9DTE9TRUQgPSBcImNsb3NlZFwiICsgRVZFTlRfS0VZO1xuICB2YXIgRVZFTlRfQ0xJQ0tfREFUQV9BUEkgPSBcImNsaWNrXCIgKyBFVkVOVF9LRVkgKyBEQVRBX0FQSV9LRVk7XG4gIHZhciBDTEFTU19OQU1FX0FMRVJUID0gJ2FsZXJ0JztcbiAgdmFyIENMQVNTX05BTUVfRkFERSA9ICdmYWRlJztcbiAgdmFyIENMQVNTX05BTUVfU0hPVyA9ICdzaG93JztcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgQWxlcnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFsZXJ0KGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gQWxlcnQucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLmNsb3NlID0gZnVuY3Rpb24gY2xvc2UoZWxlbWVudCkge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcblxuICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgcm9vdEVsZW1lbnQgPSB0aGlzLl9nZXRSb290RWxlbWVudChlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1c3RvbUV2ZW50ID0gdGhpcy5fdHJpZ2dlckNsb3NlRXZlbnQocm9vdEVsZW1lbnQpO1xuXG4gICAgICBpZiAoY3VzdG9tRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZW1vdmVFbGVtZW50KHJvb3RFbGVtZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkpO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRSb290RWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRSb290RWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB2YXIgcGFyZW50ID0gZmFsc2U7XG5cbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBwYXJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKGVsZW1lbnQpLmNsb3Nlc3QoXCIuXCIgKyBDTEFTU19OQU1FX0FMRVJUKVswXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl90cmlnZ2VyQ2xvc2VFdmVudCA9IGZ1bmN0aW9uIF90cmlnZ2VyQ2xvc2VFdmVudChlbGVtZW50KSB7XG4gICAgICB2YXIgY2xvc2VFdmVudCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5FdmVudChFVkVOVF9DTE9TRSk7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZWxlbWVudCkudHJpZ2dlcihjbG9zZUV2ZW50KTtcbiAgICAgIHJldHVybiBjbG9zZUV2ZW50O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3JlbW92ZUVsZW1lbnQgPSBmdW5jdGlvbiBfcmVtb3ZlRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XKTtcblxuICAgICAgaWYgKCEkX19kZWZhdWx0WydkZWZhdWx0J10oZWxlbWVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9GQURFKSkge1xuICAgICAgICB0aGlzLl9kZXN0cm95RWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGVsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9kZXN0cm95RWxlbWVudChlbGVtZW50LCBldmVudCk7XG4gICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2Rlc3Ryb3lFbGVtZW50ID0gZnVuY3Rpb24gX2Rlc3Ryb3lFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShlbGVtZW50KS5kZXRhY2goKS50cmlnZ2VyKEVWRU5UX0NMT1NFRCkucmVtb3ZlKCk7XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBBbGVydC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBBbGVydCh0aGlzKTtcbiAgICAgICAgICAkZWxlbWVudC5kYXRhKERBVEFfS0VZLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb25maWcgPT09ICdjbG9zZScpIHtcbiAgICAgICAgICBkYXRhW2NvbmZpZ10odGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBBbGVydC5faGFuZGxlRGlzbWlzcyA9IGZ1bmN0aW9uIF9oYW5kbGVEaXNtaXNzKGFsZXJ0SW5zdGFuY2UpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFsZXJ0SW5zdGFuY2UuY2xvc2UodGhpcyk7XG4gICAgICB9O1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQWxlcnQsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBBbGVydDtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShkb2N1bWVudCkub24oRVZFTlRfQ0xJQ0tfREFUQV9BUEksIFNFTEVDVE9SX0RJU01JU1MsIEFsZXJ0Ll9oYW5kbGVEaXNtaXNzKG5ldyBBbGVydCgpKSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRV0gPSBBbGVydC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRV0uQ29uc3RydWN0b3IgPSBBbGVydDtcblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRV0gPSBKUVVFUllfTk9fQ09ORkxJQ1Q7XG4gICAgcmV0dXJuIEFsZXJ0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDEgPSAnYnV0dG9uJztcbiAgdmFyIFZFUlNJT04kMSA9ICc0LjUuMyc7XG4gIHZhciBEQVRBX0tFWSQxID0gJ2JzLmJ1dHRvbic7XG4gIHZhciBFVkVOVF9LRVkkMSA9IFwiLlwiICsgREFUQV9LRVkkMTtcbiAgdmFyIERBVEFfQVBJX0tFWSQxID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkMSA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDFdO1xuICB2YXIgQ0xBU1NfTkFNRV9BQ1RJVkUgPSAnYWN0aXZlJztcbiAgdmFyIENMQVNTX05BTUVfQlVUVE9OID0gJ2J0bic7XG4gIHZhciBDTEFTU19OQU1FX0ZPQ1VTID0gJ2ZvY3VzJztcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFX0NBUlJPVCA9ICdbZGF0YS10b2dnbGVePVwiYnV0dG9uXCJdJztcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFUyA9ICdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdJztcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFID0gJ1tkYXRhLXRvZ2dsZT1cImJ1dHRvblwiXSc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1RPR0dMRVNfQlVUVE9OUyA9ICdbZGF0YS10b2dnbGU9XCJidXR0b25zXCJdIC5idG4nO1xuICB2YXIgU0VMRUNUT1JfSU5QVVQgPSAnaW5wdXQ6bm90KFt0eXBlPVwiaGlkZGVuXCJdKSc7XG4gIHZhciBTRUxFQ1RPUl9BQ1RJVkUgPSAnLmFjdGl2ZSc7XG4gIHZhciBTRUxFQ1RPUl9CVVRUT04gPSAnLmJ0bic7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSQxID0gXCJjbGlja1wiICsgRVZFTlRfS0VZJDEgKyBEQVRBX0FQSV9LRVkkMTtcbiAgdmFyIEVWRU5UX0ZPQ1VTX0JMVVJfREFUQV9BUEkgPSBcImZvY3VzXCIgKyBFVkVOVF9LRVkkMSArIERBVEFfQVBJX0tFWSQxICsgXCIgXCIgKyAoXCJibHVyXCIgKyBFVkVOVF9LRVkkMSArIERBVEFfQVBJX0tFWSQxKTtcbiAgdmFyIEVWRU5UX0xPQURfREFUQV9BUEkgPSBcImxvYWRcIiArIEVWRU5UX0tFWSQxICsgREFUQV9BUElfS0VZJDE7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIEJ1dHRvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnV0dG9uKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5zaG91bGRBdm9pZFRyaWdnZXJDaGFuZ2UgPSBmYWxzZTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IEJ1dHRvbi5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgdmFyIHRyaWdnZXJDaGFuZ2VFdmVudCA9IHRydWU7XG4gICAgICB2YXIgYWRkQXJpYVByZXNzZWQgPSB0cnVlO1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU0VMRUNUT1JfREFUQV9UT0dHTEVTKVswXTtcblxuICAgICAgaWYgKHJvb3RFbGVtZW50KSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUl9JTlBVVCk7XG5cbiAgICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5jaGVja2VkICYmIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfQUNUSVZFKSkge1xuICAgICAgICAgICAgICB0cmlnZ2VyQ2hhbmdlRXZlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhciBhY3RpdmVFbGVtZW50ID0gcm9vdEVsZW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUl9BQ1RJVkUpO1xuXG4gICAgICAgICAgICAgIGlmIChhY3RpdmVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfQUNUSVZFKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0cmlnZ2VyQ2hhbmdlRXZlbnQpIHtcbiAgICAgICAgICAgIC8vIGlmIGl0J3Mgbm90IGEgcmFkaW8gYnV0dG9uIG9yIGNoZWNrYm94IGRvbid0IGFkZCBhIHBvaW50bGVzcy9pbnZhbGlkIGNoZWNrZWQgcHJvcGVydHkgdG8gdGhlIGlucHV0XG4gICAgICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBpbnB1dC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgICAgIGlucHV0LmNoZWNrZWQgPSAhdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoQ0xBU1NfTkFNRV9BQ1RJVkUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2hvdWxkQXZvaWRUcmlnZ2VyQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShpbnB1dCkudHJpZ2dlcignY2hhbmdlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgICBhZGRBcmlhUHJlc3NlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghKHRoaXMuX2VsZW1lbnQuaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSkge1xuICAgICAgICBpZiAoYWRkQXJpYVByZXNzZWQpIHtcbiAgICAgICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfQUNUSVZFKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJpZ2dlckNoYW5nZUV2ZW50KSB7XG4gICAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLnRvZ2dsZUNsYXNzKENMQVNTX05BTUVfQUNUSVZFKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10ucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQxKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZywgYXZvaWRUcmlnZ2VyQ2hhbmdlKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMpO1xuICAgICAgICB2YXIgZGF0YSA9ICRlbGVtZW50LmRhdGEoREFUQV9LRVkkMSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBCdXR0b24odGhpcyk7XG4gICAgICAgICAgJGVsZW1lbnQuZGF0YShEQVRBX0tFWSQxLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEuc2hvdWxkQXZvaWRUcmlnZ2VyQ2hhbmdlID0gYXZvaWRUcmlnZ2VyQ2hhbmdlO1xuXG4gICAgICAgIGlmIChjb25maWcgPT09ICd0b2dnbGUnKSB7XG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQnV0dG9uLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQxO1xuICAgICAgfVxuICAgIH1dKTtcblxuICAgIHJldHVybiBCdXR0b247XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10oZG9jdW1lbnQpLm9uKEVWRU5UX0NMSUNLX0RBVEFfQVBJJDEsIFNFTEVDVE9SX0RBVEFfVE9HR0xFX0NBUlJPVCwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIGJ1dHRvbiA9IGV2ZW50LnRhcmdldDtcbiAgICB2YXIgaW5pdGlhbEJ1dHRvbiA9IGJ1dHRvbjtcblxuICAgIGlmICghJF9fZGVmYXVsdFsnZGVmYXVsdCddKGJ1dHRvbikuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9CVVRUT04pKSB7XG4gICAgICBidXR0b24gPSAkX19kZWZhdWx0WydkZWZhdWx0J10oYnV0dG9uKS5jbG9zZXN0KFNFTEVDVE9SX0JVVFRPTilbMF07XG4gICAgfVxuXG4gICAgaWYgKCFidXR0b24gfHwgYnV0dG9uLmhhc0F0dHJpYnV0ZSgnZGlzYWJsZWQnKSB8fCBidXR0b24uY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyB3b3JrIGFyb3VuZCBGaXJlZm94IGJ1ZyAjMTU0MDk5NVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgaW5wdXRCdG4gPSBidXR0b24ucXVlcnlTZWxlY3RvcihTRUxFQ1RPUl9JTlBVVCk7XG5cbiAgICAgIGlmIChpbnB1dEJ0biAmJiAoaW5wdXRCdG4uaGFzQXR0cmlidXRlKCdkaXNhYmxlZCcpIHx8IGlucHV0QnRuLmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gd29yayBhcm91bmQgRmlyZWZveCBidWcgIzE1NDA5OTVcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpbml0aWFsQnV0dG9uLnRhZ05hbWUgPT09ICdJTlBVVCcgfHwgYnV0dG9uLnRhZ05hbWUgIT09ICdMQUJFTCcpIHtcbiAgICAgICAgQnV0dG9uLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkX19kZWZhdWx0WydkZWZhdWx0J10oYnV0dG9uKSwgJ3RvZ2dsZScsIGluaXRpYWxCdXR0b24udGFnTmFtZSA9PT0gJ0lOUFVUJyk7XG4gICAgICB9XG4gICAgfVxuICB9KS5vbihFVkVOVF9GT0NVU19CTFVSX0RBVEFfQVBJLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRV9DQVJST1QsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciBidXR0b24gPSAkX19kZWZhdWx0WydkZWZhdWx0J10oZXZlbnQudGFyZ2V0KS5jbG9zZXN0KFNFTEVDVE9SX0JVVFRPTilbMF07XG4gICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGJ1dHRvbikudG9nZ2xlQ2xhc3MoQ0xBU1NfTkFNRV9GT0NVUywgL15mb2N1cyhpbik/JC8udGVzdChldmVudC50eXBlKSk7XG4gIH0pO1xuICAkX19kZWZhdWx0WydkZWZhdWx0J10od2luZG93KS5vbihFVkVOVF9MT0FEX0RBVEFfQVBJLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gZW5zdXJlIGNvcnJlY3QgYWN0aXZlIGNsYXNzIGlzIHNldCB0byBtYXRjaCB0aGUgY29udHJvbHMnIGFjdHVhbCB2YWx1ZXMvc3RhdGVzXG4gICAgLy8gZmluZCBhbGwgY2hlY2tib3hlcy9yZWFkaW8gYnV0dG9ucyBpbnNpZGUgZGF0YS10b2dnbGUgZ3JvdXBzXG4gICAgdmFyIGJ1dHRvbnMgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JfREFUQV9UT0dHTEVTX0JVVFRPTlMpKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBidXR0b25zLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB2YXIgYnV0dG9uID0gYnV0dG9uc1tpXTtcbiAgICAgIHZhciBpbnB1dCA9IGJ1dHRvbi5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SX0lOUFVUKTtcblxuICAgICAgaWYgKGlucHV0LmNoZWNrZWQgfHwgaW5wdXQuaGFzQXR0cmlidXRlKCdjaGVja2VkJykpIHtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9BQ1RJVkUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUpO1xuICAgICAgfVxuICAgIH0gLy8gZmluZCBhbGwgYnV0dG9uIHRvZ2dsZXNcblxuXG4gICAgYnV0dG9ucyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9EQVRBX1RPR0dMRSkpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwLCBfbGVuID0gYnV0dG9ucy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykge1xuICAgICAgdmFyIF9idXR0b24gPSBidXR0b25zW19pXTtcblxuICAgICAgaWYgKF9idXR0b24uZ2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgIF9idXR0b24uY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0FDVElWRSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9BQ1RJVkUpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQxXSA9IEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQxXS5Db25zdHJ1Y3RvciA9IEJ1dHRvbjtcblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQxXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDFdID0gSlFVRVJZX05PX0NPTkZMSUNUJDE7XG4gICAgcmV0dXJuIEJ1dHRvbi5falF1ZXJ5SW50ZXJmYWNlO1xuICB9O1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSQyID0gJ2Nhcm91c2VsJztcbiAgdmFyIFZFUlNJT04kMiA9ICc0LjUuMyc7XG4gIHZhciBEQVRBX0tFWSQyID0gJ2JzLmNhcm91c2VsJztcbiAgdmFyIEVWRU5UX0tFWSQyID0gXCIuXCIgKyBEQVRBX0tFWSQyO1xuICB2YXIgREFUQV9BUElfS0VZJDIgPSAnLmRhdGEtYXBpJztcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCQyID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkMl07XG4gIHZhciBBUlJPV19MRUZUX0tFWUNPREUgPSAzNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgbGVmdCBhcnJvdyBrZXlcblxuICB2YXIgQVJST1dfUklHSFRfS0VZQ09ERSA9IDM5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciByaWdodCBhcnJvdyBrZXlcblxuICB2YXIgVE9VQ0hFVkVOVF9DT01QQVRfV0FJVCA9IDUwMDsgLy8gVGltZSBmb3IgbW91c2UgY29tcGF0IGV2ZW50cyB0byBmaXJlIGFmdGVyIHRvdWNoXG5cbiAgdmFyIFNXSVBFX1RIUkVTSE9MRCA9IDQwO1xuICB2YXIgRGVmYXVsdCA9IHtcbiAgICBpbnRlcnZhbDogNTAwMCxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBzbGlkZTogZmFsc2UsXG4gICAgcGF1c2U6ICdob3ZlcicsXG4gICAgd3JhcDogdHJ1ZSxcbiAgICB0b3VjaDogdHJ1ZVxuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUgPSB7XG4gICAgaW50ZXJ2YWw6ICcobnVtYmVyfGJvb2xlYW4pJyxcbiAgICBrZXlib2FyZDogJ2Jvb2xlYW4nLFxuICAgIHNsaWRlOiAnKGJvb2xlYW58c3RyaW5nKScsXG4gICAgcGF1c2U6ICcoc3RyaW5nfGJvb2xlYW4pJyxcbiAgICB3cmFwOiAnYm9vbGVhbicsXG4gICAgdG91Y2g6ICdib29sZWFuJ1xuICB9O1xuICB2YXIgRElSRUNUSU9OX05FWFQgPSAnbmV4dCc7XG4gIHZhciBESVJFQ1RJT05fUFJFViA9ICdwcmV2JztcbiAgdmFyIERJUkVDVElPTl9MRUZUID0gJ2xlZnQnO1xuICB2YXIgRElSRUNUSU9OX1JJR0hUID0gJ3JpZ2h0JztcbiAgdmFyIEVWRU5UX1NMSURFID0gXCJzbGlkZVwiICsgRVZFTlRfS0VZJDI7XG4gIHZhciBFVkVOVF9TTElEID0gXCJzbGlkXCIgKyBFVkVOVF9LRVkkMjtcbiAgdmFyIEVWRU5UX0tFWURPV04gPSBcImtleWRvd25cIiArIEVWRU5UX0tFWSQyO1xuICB2YXIgRVZFTlRfTU9VU0VFTlRFUiA9IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZJDI7XG4gIHZhciBFVkVOVF9NT1VTRUxFQVZFID0gXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVkkMjtcbiAgdmFyIEVWRU5UX1RPVUNIU1RBUlQgPSBcInRvdWNoc3RhcnRcIiArIEVWRU5UX0tFWSQyO1xuICB2YXIgRVZFTlRfVE9VQ0hNT1ZFID0gXCJ0b3VjaG1vdmVcIiArIEVWRU5UX0tFWSQyO1xuICB2YXIgRVZFTlRfVE9VQ0hFTkQgPSBcInRvdWNoZW5kXCIgKyBFVkVOVF9LRVkkMjtcbiAgdmFyIEVWRU5UX1BPSU5URVJET1dOID0gXCJwb2ludGVyZG93blwiICsgRVZFTlRfS0VZJDI7XG4gIHZhciBFVkVOVF9QT0lOVEVSVVAgPSBcInBvaW50ZXJ1cFwiICsgRVZFTlRfS0VZJDI7XG4gIHZhciBFVkVOVF9EUkFHX1NUQVJUID0gXCJkcmFnc3RhcnRcIiArIEVWRU5UX0tFWSQyO1xuICB2YXIgRVZFTlRfTE9BRF9EQVRBX0FQSSQxID0gXCJsb2FkXCIgKyBFVkVOVF9LRVkkMiArIERBVEFfQVBJX0tFWSQyO1xuICB2YXIgRVZFTlRfQ0xJQ0tfREFUQV9BUEkkMiA9IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQyICsgREFUQV9BUElfS0VZJDI7XG4gIHZhciBDTEFTU19OQU1FX0NBUk9VU0VMID0gJ2Nhcm91c2VsJztcbiAgdmFyIENMQVNTX05BTUVfQUNUSVZFJDEgPSAnYWN0aXZlJztcbiAgdmFyIENMQVNTX05BTUVfU0xJREUgPSAnc2xpZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9SSUdIVCA9ICdjYXJvdXNlbC1pdGVtLXJpZ2h0JztcbiAgdmFyIENMQVNTX05BTUVfTEVGVCA9ICdjYXJvdXNlbC1pdGVtLWxlZnQnO1xuICB2YXIgQ0xBU1NfTkFNRV9ORVhUID0gJ2Nhcm91c2VsLWl0ZW0tbmV4dCc7XG4gIHZhciBDTEFTU19OQU1FX1BSRVYgPSAnY2Fyb3VzZWwtaXRlbS1wcmV2JztcbiAgdmFyIENMQVNTX05BTUVfUE9JTlRFUl9FVkVOVCA9ICdwb2ludGVyLWV2ZW50JztcbiAgdmFyIFNFTEVDVE9SX0FDVElWRSQxID0gJy5hY3RpdmUnO1xuICB2YXIgU0VMRUNUT1JfQUNUSVZFX0lURU0gPSAnLmFjdGl2ZS5jYXJvdXNlbC1pdGVtJztcbiAgdmFyIFNFTEVDVE9SX0lURU0gPSAnLmNhcm91c2VsLWl0ZW0nO1xuICB2YXIgU0VMRUNUT1JfSVRFTV9JTUcgPSAnLmNhcm91c2VsLWl0ZW0gaW1nJztcbiAgdmFyIFNFTEVDVE9SX05FWFRfUFJFViA9ICcuY2Fyb3VzZWwtaXRlbS1uZXh0LCAuY2Fyb3VzZWwtaXRlbS1wcmV2JztcbiAgdmFyIFNFTEVDVE9SX0lORElDQVRPUlMgPSAnLmNhcm91c2VsLWluZGljYXRvcnMnO1xuICB2YXIgU0VMRUNUT1JfREFUQV9TTElERSA9ICdbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXSc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1JJREUgPSAnW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJztcbiAgdmFyIFBvaW50ZXJUeXBlID0ge1xuICAgIFRPVUNIOiAndG91Y2gnLFxuICAgIFBFTjogJ3BlbidcbiAgfTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgQ2Fyb3VzZWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENhcm91c2VsKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5faXRlbXMgPSBudWxsO1xuICAgICAgdGhpcy5faW50ZXJ2YWwgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLnRvdWNoVGltZW91dCA9IG51bGw7XG4gICAgICB0aGlzLnRvdWNoU3RhcnRYID0gMDtcbiAgICAgIHRoaXMudG91Y2hEZWx0YVggPSAwO1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX2luZGljYXRvcnNFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SX0lORElDQVRPUlMpO1xuICAgICAgdGhpcy5fdG91Y2hTdXBwb3J0ZWQgPSAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMDtcbiAgICAgIHRoaXMuX3BvaW50ZXJFdmVudCA9IEJvb2xlYW4od2luZG93LlBvaW50ZXJFdmVudCB8fCB3aW5kb3cuTVNQb2ludGVyRXZlbnQpO1xuXG4gICAgICB0aGlzLl9hZGRFdmVudExpc3RlbmVycygpO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gQ2Fyb3VzZWwucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLm5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgaWYgKCF0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICAgdGhpcy5fc2xpZGUoRElSRUNUSU9OX05FWFQpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ubmV4dFdoZW5WaXNpYmxlID0gZnVuY3Rpb24gbmV4dFdoZW5WaXNpYmxlKCkge1xuICAgICAgdmFyICRlbGVtZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpOyAvLyBEb24ndCBjYWxsIG5leHQgd2hlbiB0aGUgcGFnZSBpc24ndCB2aXNpYmxlXG4gICAgICAvLyBvciB0aGUgY2Fyb3VzZWwgb3IgaXRzIHBhcmVudCBpc24ndCB2aXNpYmxlXG5cbiAgICAgIGlmICghZG9jdW1lbnQuaGlkZGVuICYmICRlbGVtZW50LmlzKCc6dmlzaWJsZScpICYmICRlbGVtZW50LmNzcygndmlzaWJpbGl0eScpICE9PSAnaGlkZGVuJykge1xuICAgICAgICB0aGlzLm5leHQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnByZXYgPSBmdW5jdGlvbiBwcmV2KCkge1xuICAgICAgaWYgKCF0aGlzLl9pc1NsaWRpbmcpIHtcbiAgICAgICAgdGhpcy5fc2xpZGUoRElSRUNUSU9OX1BSRVYpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8ucGF1c2UgPSBmdW5jdGlvbiBwYXVzZShldmVudCkge1xuICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICB0aGlzLl9pc1BhdXNlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfTkVYVF9QUkVWKSkge1xuICAgICAgICBVdGlsLnRyaWdnZXJUcmFuc2l0aW9uRW5kKHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICB0aGlzLmN5Y2xlKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKTtcbiAgICAgIHRoaXMuX2ludGVydmFsID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmN5Y2xlID0gZnVuY3Rpb24gY3ljbGUoZXZlbnQpIHtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgdGhpcy5faXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2ludGVydmFsKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faW50ZXJ2YWwpO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuaW50ZXJ2YWwgJiYgIXRoaXMuX2lzUGF1c2VkKSB7XG4gICAgICAgIHRoaXMuX2ludGVydmFsID0gc2V0SW50ZXJ2YWwoKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA/IHRoaXMubmV4dFdoZW5WaXNpYmxlIDogdGhpcy5uZXh0KS5iaW5kKHRoaXMpLCB0aGlzLl9jb25maWcuaW50ZXJ2YWwpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8udG8gPSBmdW5jdGlvbiB0byhpbmRleCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUl9BQ1RJVkVfSVRFTSk7XG5cbiAgICAgIHZhciBhY3RpdmVJbmRleCA9IHRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KTtcblxuICAgICAgaWYgKGluZGV4ID4gdGhpcy5faXRlbXMubGVuZ3RoIC0gMSB8fCBpbmRleCA8IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNTbGlkaW5nKSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5vbmUoRVZFTlRfU0xJRCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBfdGhpcy50byhpbmRleCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChhY3RpdmVJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpcmVjdGlvbiA9IGluZGV4ID4gYWN0aXZlSW5kZXggPyBESVJFQ1RJT05fTkVYVCA6IERJUkVDVElPTl9QUkVWO1xuXG4gICAgICB0aGlzLl9zbGlkZShkaXJlY3Rpb24sIHRoaXMuX2l0ZW1zW2luZGV4XSk7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfS0VZJDIpO1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkMik7XG4gICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbnRlcnZhbCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1BhdXNlZCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1NsaWRpbmcgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9pbmRpY2F0b3JzRWxlbWVudCA9IG51bGw7XG4gICAgfSAvLyBQcml2YXRlXG4gICAgO1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX2V4dGVuZHMoe30sIERlZmF1bHQsIGNvbmZpZyk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDIsIGNvbmZpZywgRGVmYXVsdFR5cGUpO1xuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9oYW5kbGVTd2lwZSA9IGZ1bmN0aW9uIF9oYW5kbGVTd2lwZSgpIHtcbiAgICAgIHZhciBhYnNEZWx0YXggPSBNYXRoLmFicyh0aGlzLnRvdWNoRGVsdGFYKTtcblxuICAgICAgaWYgKGFic0RlbHRheCA8PSBTV0lQRV9USFJFU0hPTEQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlyZWN0aW9uID0gYWJzRGVsdGF4IC8gdGhpcy50b3VjaERlbHRhWDtcbiAgICAgIHRoaXMudG91Y2hEZWx0YVggPSAwOyAvLyBzd2lwZSBsZWZ0XG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPiAwKSB7XG4gICAgICAgIHRoaXMucHJldigpO1xuICAgICAgfSAvLyBzd2lwZSByaWdodFxuXG5cbiAgICAgIGlmIChkaXJlY3Rpb24gPCAwKSB7XG4gICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2FkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcua2V5Ym9hcmQpIHtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLm9uKEVWRU5UX0tFWURPV04sIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuX2tleWRvd24oZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5wYXVzZSA9PT0gJ2hvdmVyJykge1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkub24oRVZFTlRfTU9VU0VFTlRFUiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMi5wYXVzZShldmVudCk7XG4gICAgICAgIH0pLm9uKEVWRU5UX01PVVNFTEVBVkUsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBfdGhpczIuY3ljbGUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy50b3VjaCkge1xuICAgICAgICB0aGlzLl9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fYWRkVG91Y2hFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uIF9hZGRUb3VjaEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5fdG91Y2hTdXBwb3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnQgPSBmdW5jdGlvbiBzdGFydChldmVudCkge1xuICAgICAgICBpZiAoX3RoaXMzLl9wb2ludGVyRXZlbnQgJiYgUG9pbnRlclR5cGVbZXZlbnQub3JpZ2luYWxFdmVudC5wb2ludGVyVHlwZS50b1VwcGVyQ2FzZSgpXSkge1xuICAgICAgICAgIF90aGlzMy50b3VjaFN0YXJ0WCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQuY2xpZW50WDtcbiAgICAgICAgfSBlbHNlIGlmICghX3RoaXMzLl9wb2ludGVyRXZlbnQpIHtcbiAgICAgICAgICBfdGhpczMudG91Y2hTdGFydFggPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF0uY2xpZW50WDtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdmFyIG1vdmUgPSBmdW5jdGlvbiBtb3ZlKGV2ZW50KSB7XG4gICAgICAgIC8vIGVuc3VyZSBzd2lwaW5nIHdpdGggb25lIHRvdWNoIGFuZCBub3QgcGluY2hpbmdcbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyAmJiBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIF90aGlzMy50b3VjaERlbHRhWCA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMzLnRvdWNoRGVsdGFYID0gZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzWzBdLmNsaWVudFggLSBfdGhpczMudG91Y2hTdGFydFg7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciBlbmQgPSBmdW5jdGlvbiBlbmQoZXZlbnQpIHtcbiAgICAgICAgaWYgKF90aGlzMy5fcG9pbnRlckV2ZW50ICYmIFBvaW50ZXJUeXBlW2V2ZW50Lm9yaWdpbmFsRXZlbnQucG9pbnRlclR5cGUudG9VcHBlckNhc2UoKV0pIHtcbiAgICAgICAgICBfdGhpczMudG91Y2hEZWx0YVggPSBldmVudC5vcmlnaW5hbEV2ZW50LmNsaWVudFggLSBfdGhpczMudG91Y2hTdGFydFg7XG4gICAgICAgIH1cblxuICAgICAgICBfdGhpczMuX2hhbmRsZVN3aXBlKCk7XG5cbiAgICAgICAgaWYgKF90aGlzMy5fY29uZmlnLnBhdXNlID09PSAnaG92ZXInKSB7XG4gICAgICAgICAgLy8gSWYgaXQncyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlLCBtb3VzZWVudGVyL2xlYXZlIGFyZSBmaXJlZCBhc1xuICAgICAgICAgIC8vIHBhcnQgb2YgdGhlIG1vdXNlIGNvbXBhdGliaWxpdHkgZXZlbnRzIG9uIGZpcnN0IHRhcCAtIHRoZSBjYXJvdXNlbFxuICAgICAgICAgIC8vIHdvdWxkIHN0b3AgY3ljbGluZyB1bnRpbCB1c2VyIHRhcHBlZCBvdXQgb2YgaXQ7XG4gICAgICAgICAgLy8gaGVyZSwgd2UgbGlzdGVuIGZvciB0b3VjaGVuZCwgZXhwbGljaXRseSBwYXVzZSB0aGUgY2Fyb3VzZWxcbiAgICAgICAgICAvLyAoYXMgaWYgaXQncyB0aGUgc2Vjb25kIHRpbWUgd2UgdGFwIG9uIGl0LCBtb3VzZWVudGVyIGNvbXBhdCBldmVudFxuICAgICAgICAgIC8vIGlzIE5PVCBmaXJlZCkgYW5kIGFmdGVyIGEgdGltZW91dCAodG8gYWxsb3cgZm9yIG1vdXNlIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAvLyBldmVudHMgdG8gZmlyZSkgd2UgZXhwbGljaXRseSByZXN0YXJ0IGN5Y2xpbmdcbiAgICAgICAgICBfdGhpczMucGF1c2UoKTtcblxuICAgICAgICAgIGlmIChfdGhpczMudG91Y2hUaW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoX3RoaXMzLnRvdWNoVGltZW91dCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgX3RoaXMzLnRvdWNoVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXMzLmN5Y2xlKGV2ZW50KTtcbiAgICAgICAgICB9LCBUT1VDSEVWRU5UX0NPTVBBVF9XQUlUICsgX3RoaXMzLl9jb25maWcuaW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX0lURU1fSU1HKSkub24oRVZFTlRfRFJBR19TVEFSVCwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAodGhpcy5fcG9pbnRlckV2ZW50KSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5vbihFVkVOVF9QT0lOVEVSRE9XTiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXJ0KGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5vbihFVkVOVF9QT0lOVEVSVVAsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHJldHVybiBlbmQoZXZlbnQpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9QT0lOVEVSX0VWRU5UKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5vbihFVkVOVF9UT1VDSFNUQVJULCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gc3RhcnQoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLm9uKEVWRU5UX1RPVUNITU9WRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIG1vdmUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLm9uKEVWRU5UX1RPVUNIRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gZW5kKGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fa2V5ZG93biA9IGZ1bmN0aW9uIF9rZXlkb3duKGV2ZW50KSB7XG4gICAgICBpZiAoL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGV2ZW50LndoaWNoKSB7XG4gICAgICAgIGNhc2UgQVJST1dfTEVGVF9LRVlDT0RFOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5wcmV2KCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBBUlJPV19SSUdIVF9LRVlDT0RFOlxuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0SXRlbUluZGV4ID0gZnVuY3Rpb24gX2dldEl0ZW1JbmRleChlbGVtZW50KSB7XG4gICAgICB0aGlzLl9pdGVtcyA9IGVsZW1lbnQgJiYgZWxlbWVudC5wYXJlbnROb2RlID8gW10uc2xpY2UuY2FsbChlbGVtZW50LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9JVEVNKSkgOiBbXTtcbiAgICAgIHJldHVybiB0aGlzLl9pdGVtcy5pbmRleE9mKGVsZW1lbnQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldEl0ZW1CeURpcmVjdGlvbiA9IGZ1bmN0aW9uIF9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KSB7XG4gICAgICB2YXIgaXNOZXh0RGlyZWN0aW9uID0gZGlyZWN0aW9uID09PSBESVJFQ1RJT05fTkVYVDtcbiAgICAgIHZhciBpc1ByZXZEaXJlY3Rpb24gPSBkaXJlY3Rpb24gPT09IERJUkVDVElPTl9QUkVWO1xuXG4gICAgICB2YXIgYWN0aXZlSW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIHZhciBsYXN0SXRlbUluZGV4ID0gdGhpcy5faXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBpc0dvaW5nVG9XcmFwID0gaXNQcmV2RGlyZWN0aW9uICYmIGFjdGl2ZUluZGV4ID09PSAwIHx8IGlzTmV4dERpcmVjdGlvbiAmJiBhY3RpdmVJbmRleCA9PT0gbGFzdEl0ZW1JbmRleDtcblxuICAgICAgaWYgKGlzR29pbmdUb1dyYXAgJiYgIXRoaXMuX2NvbmZpZy53cmFwKSB7XG4gICAgICAgIHJldHVybiBhY3RpdmVFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVsdGEgPSBkaXJlY3Rpb24gPT09IERJUkVDVElPTl9QUkVWID8gLTEgOiAxO1xuICAgICAgdmFyIGl0ZW1JbmRleCA9IChhY3RpdmVJbmRleCArIGRlbHRhKSAlIHRoaXMuX2l0ZW1zLmxlbmd0aDtcbiAgICAgIHJldHVybiBpdGVtSW5kZXggPT09IC0xID8gdGhpcy5faXRlbXNbdGhpcy5faXRlbXMubGVuZ3RoIC0gMV0gOiB0aGlzLl9pdGVtc1tpdGVtSW5kZXhdO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3RyaWdnZXJTbGlkZUV2ZW50ID0gZnVuY3Rpb24gX3RyaWdnZXJTbGlkZUV2ZW50KHJlbGF0ZWRUYXJnZXQsIGV2ZW50RGlyZWN0aW9uTmFtZSkge1xuICAgICAgdmFyIHRhcmdldEluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgICB2YXIgZnJvbUluZGV4ID0gdGhpcy5fZ2V0SXRlbUluZGV4KHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUl9BQ1RJVkVfSVRFTSkpO1xuXG4gICAgICB2YXIgc2xpZGVFdmVudCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5FdmVudChFVkVOVF9TTElERSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0LFxuICAgICAgICBkaXJlY3Rpb246IGV2ZW50RGlyZWN0aW9uTmFtZSxcbiAgICAgICAgZnJvbTogZnJvbUluZGV4LFxuICAgICAgICB0bzogdGFyZ2V0SW5kZXhcbiAgICAgIH0pO1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZGVFdmVudCk7XG4gICAgICByZXR1cm4gc2xpZGVFdmVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50ID0gZnVuY3Rpb24gX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgaWYgKHRoaXMuX2luZGljYXRvcnNFbGVtZW50KSB7XG4gICAgICAgIHZhciBpbmRpY2F0b3JzID0gW10uc2xpY2UuY2FsbCh0aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX0FDVElWRSQxKSk7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShpbmRpY2F0b3JzKS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0FDVElWRSQxKTtcblxuICAgICAgICB2YXIgbmV4dEluZGljYXRvciA9IHRoaXMuX2luZGljYXRvcnNFbGVtZW50LmNoaWxkcmVuW3RoaXMuX2dldEl0ZW1JbmRleChlbGVtZW50KV07XG5cbiAgICAgICAgaWYgKG5leHRJbmRpY2F0b3IpIHtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10obmV4dEluZGljYXRvcikuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zbGlkZSA9IGZ1bmN0aW9uIF9zbGlkZShkaXJlY3Rpb24sIGVsZW1lbnQpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgYWN0aXZlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihTRUxFQ1RPUl9BQ1RJVkVfSVRFTSk7XG5cbiAgICAgIHZhciBhY3RpdmVFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgoYWN0aXZlRWxlbWVudCk7XG5cbiAgICAgIHZhciBuZXh0RWxlbWVudCA9IGVsZW1lbnQgfHwgYWN0aXZlRWxlbWVudCAmJiB0aGlzLl9nZXRJdGVtQnlEaXJlY3Rpb24oZGlyZWN0aW9uLCBhY3RpdmVFbGVtZW50KTtcblxuICAgICAgdmFyIG5leHRFbGVtZW50SW5kZXggPSB0aGlzLl9nZXRJdGVtSW5kZXgobmV4dEVsZW1lbnQpO1xuXG4gICAgICB2YXIgaXNDeWNsaW5nID0gQm9vbGVhbih0aGlzLl9pbnRlcnZhbCk7XG4gICAgICB2YXIgZGlyZWN0aW9uYWxDbGFzc05hbWU7XG4gICAgICB2YXIgb3JkZXJDbGFzc05hbWU7XG4gICAgICB2YXIgZXZlbnREaXJlY3Rpb25OYW1lO1xuXG4gICAgICBpZiAoZGlyZWN0aW9uID09PSBESVJFQ1RJT05fTkVYVCkge1xuICAgICAgICBkaXJlY3Rpb25hbENsYXNzTmFtZSA9IENMQVNTX05BTUVfTEVGVDtcbiAgICAgICAgb3JkZXJDbGFzc05hbWUgPSBDTEFTU19OQU1FX05FWFQ7XG4gICAgICAgIGV2ZW50RGlyZWN0aW9uTmFtZSA9IERJUkVDVElPTl9MRUZUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlyZWN0aW9uYWxDbGFzc05hbWUgPSBDTEFTU19OQU1FX1JJR0hUO1xuICAgICAgICBvcmRlckNsYXNzTmFtZSA9IENMQVNTX05BTUVfUFJFVjtcbiAgICAgICAgZXZlbnREaXJlY3Rpb25OYW1lID0gRElSRUNUSU9OX1JJR0hUO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV4dEVsZW1lbnQgJiYgJF9fZGVmYXVsdFsnZGVmYXVsdCddKG5leHRFbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX0FDVElWRSQxKSkge1xuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2xpZGVFdmVudCA9IHRoaXMuX3RyaWdnZXJTbGlkZUV2ZW50KG5leHRFbGVtZW50LCBldmVudERpcmVjdGlvbk5hbWUpO1xuXG4gICAgICBpZiAoc2xpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghYWN0aXZlRWxlbWVudCB8fCAhbmV4dEVsZW1lbnQpIHtcbiAgICAgICAgLy8gU29tZSB3ZWlyZG5lc3MgaXMgaGFwcGVuaW5nLCBzbyB3ZSBiYWlsXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNTbGlkaW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQobmV4dEVsZW1lbnQpO1xuXG4gICAgICB2YXIgc2xpZEV2ZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLkV2ZW50KEVWRU5UX1NMSUQsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogbmV4dEVsZW1lbnQsXG4gICAgICAgIGRpcmVjdGlvbjogZXZlbnREaXJlY3Rpb25OYW1lLFxuICAgICAgICBmcm9tOiBhY3RpdmVFbGVtZW50SW5kZXgsXG4gICAgICAgIHRvOiBuZXh0RWxlbWVudEluZGV4XG4gICAgICB9KTtcblxuICAgICAgaWYgKCRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX1NMSURFKSkge1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10obmV4dEVsZW1lbnQpLmFkZENsYXNzKG9yZGVyQ2xhc3NOYW1lKTtcbiAgICAgICAgVXRpbC5yZWZsb3cobmV4dEVsZW1lbnQpO1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oYWN0aXZlRWxlbWVudCkuYWRkQ2xhc3MoZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10obmV4dEVsZW1lbnQpLmFkZENsYXNzKGRpcmVjdGlvbmFsQ2xhc3NOYW1lKTtcbiAgICAgICAgdmFyIG5leHRFbGVtZW50SW50ZXJ2YWwgPSBwYXJzZUludChuZXh0RWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaW50ZXJ2YWwnKSwgMTApO1xuXG4gICAgICAgIGlmIChuZXh0RWxlbWVudEludGVydmFsKSB7XG4gICAgICAgICAgdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCA9IHRoaXMuX2NvbmZpZy5kZWZhdWx0SW50ZXJ2YWwgfHwgdGhpcy5fY29uZmlnLmludGVydmFsO1xuICAgICAgICAgIHRoaXMuX2NvbmZpZy5pbnRlcnZhbCA9IG5leHRFbGVtZW50SW50ZXJ2YWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5fY29uZmlnLmludGVydmFsID0gdGhpcy5fY29uZmlnLmRlZmF1bHRJbnRlcnZhbCB8fCB0aGlzLl9jb25maWcuaW50ZXJ2YWw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmVFbGVtZW50KTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGFjdGl2ZUVsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKG5leHRFbGVtZW50KS5yZW1vdmVDbGFzcyhkaXJlY3Rpb25hbENsYXNzTmFtZSArIFwiIFwiICsgb3JkZXJDbGFzc05hbWUpLmFkZENsYXNzKENMQVNTX05BTUVfQUNUSVZFJDEpO1xuICAgICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShhY3RpdmVFbGVtZW50KS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0FDVElWRSQxICsgXCIgXCIgKyBvcmRlckNsYXNzTmFtZSArIFwiIFwiICsgZGlyZWN0aW9uYWxDbGFzc05hbWUpO1xuICAgICAgICAgIF90aGlzNC5faXNTbGlkaW5nID0gZmFsc2U7XG4gICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gJF9fZGVmYXVsdFsnZGVmYXVsdCddKF90aGlzNC5fZWxlbWVudCkudHJpZ2dlcihzbGlkRXZlbnQpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGFjdGl2ZUVsZW1lbnQpLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfQUNUSVZFJDEpO1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10obmV4dEVsZW1lbnQpLmFkZENsYXNzKENMQVNTX05BTUVfQUNUSVZFJDEpO1xuICAgICAgICB0aGlzLl9pc1NsaWRpbmcgPSBmYWxzZTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2xpZEV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQ3ljbGluZykge1xuICAgICAgICB0aGlzLmN5Y2xlKCk7XG4gICAgICB9XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBDYXJvdXNlbC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZGF0YSA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzKS5kYXRhKERBVEFfS0VZJDIpO1xuXG4gICAgICAgIHZhciBfY29uZmlnID0gX2V4dGVuZHMoe30sIERlZmF1bHQsICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzKS5kYXRhKCkpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgIF9jb25maWcgPSBfZXh0ZW5kcyh7fSwgX2NvbmZpZywgY29uZmlnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb24gPSB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyA/IGNvbmZpZyA6IF9jb25maWcuc2xpZGU7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBDYXJvdXNlbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcykuZGF0YShEQVRBX0tFWSQyLCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIGRhdGEudG8oY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYWN0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVthY3Rpb25dID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBhY3Rpb24gKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVthY3Rpb25dKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoX2NvbmZpZy5pbnRlcnZhbCAmJiBfY29uZmlnLnJpZGUpIHtcbiAgICAgICAgICBkYXRhLnBhdXNlKCk7XG4gICAgICAgICAgZGF0YS5jeWNsZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgQ2Fyb3VzZWwuX2RhdGFBcGlDbGlja0hhbmRsZXIgPSBmdW5jdGlvbiBfZGF0YUFwaUNsaWNrSGFuZGxlcihldmVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO1xuXG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHRhcmdldCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShzZWxlY3RvcilbMF07XG5cbiAgICAgIGlmICghdGFyZ2V0IHx8ICEkX19kZWZhdWx0WydkZWZhdWx0J10odGFyZ2V0KS5oYXNDbGFzcyhDTEFTU19OQU1FX0NBUk9VU0VMKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjb25maWcgPSBfZXh0ZW5kcyh7fSwgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRhcmdldCkuZGF0YSgpLCAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcykuZGF0YSgpKTtcblxuICAgICAgdmFyIHNsaWRlSW5kZXggPSB0aGlzLmdldEF0dHJpYnV0ZSgnZGF0YS1zbGlkZS10bycpO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICBjb25maWcuaW50ZXJ2YWwgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0YXJnZXQpLCBjb25maWcpO1xuXG4gICAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGFyZ2V0KS5kYXRhKERBVEFfS0VZJDIpLnRvKHNsaWRlSW5kZXgpO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ2Fyb3VzZWwsIG51bGwsIFt7XG4gICAgICBrZXk6IFwiVkVSU0lPTlwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBWRVJTSU9OJDI7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ2Fyb3VzZWw7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10oZG9jdW1lbnQpLm9uKEVWRU5UX0NMSUNLX0RBVEFfQVBJJDIsIFNFTEVDVE9SX0RBVEFfU0xJREUsIENhcm91c2VsLl9kYXRhQXBpQ2xpY2tIYW5kbGVyKTtcbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHdpbmRvdykub24oRVZFTlRfTE9BRF9EQVRBX0FQSSQxLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhcm91c2VscyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9EQVRBX1JJREUpKTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjYXJvdXNlbHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIHZhciAkY2Fyb3VzZWwgPSAkX19kZWZhdWx0WydkZWZhdWx0J10oY2Fyb3VzZWxzW2ldKTtcblxuICAgICAgQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRjYXJvdXNlbCwgJGNhcm91c2VsLmRhdGEoKSk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDJdID0gQ2Fyb3VzZWwuX2pRdWVyeUludGVyZmFjZTtcbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkMl0uQ29uc3RydWN0b3IgPSBDYXJvdXNlbDtcblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQyXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDJdID0gSlFVRVJZX05PX0NPTkZMSUNUJDI7XG4gICAgcmV0dXJuIENhcm91c2VsLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDMgPSAnY29sbGFwc2UnO1xuICB2YXIgVkVSU0lPTiQzID0gJzQuNS4zJztcbiAgdmFyIERBVEFfS0VZJDMgPSAnYnMuY29sbGFwc2UnO1xuICB2YXIgRVZFTlRfS0VZJDMgPSBcIi5cIiArIERBVEFfS0VZJDM7XG4gIHZhciBEQVRBX0FQSV9LRVkkMyA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDMgPSAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQzXTtcbiAgdmFyIERlZmF1bHQkMSA9IHtcbiAgICB0b2dnbGU6IHRydWUsXG4gICAgcGFyZW50OiAnJ1xuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkMSA9IHtcbiAgICB0b2dnbGU6ICdib29sZWFuJyxcbiAgICBwYXJlbnQ6ICcoc3RyaW5nfGVsZW1lbnQpJ1xuICB9O1xuICB2YXIgRVZFTlRfU0hPVyA9IFwic2hvd1wiICsgRVZFTlRfS0VZJDM7XG4gIHZhciBFVkVOVF9TSE9XTiA9IFwic2hvd25cIiArIEVWRU5UX0tFWSQzO1xuICB2YXIgRVZFTlRfSElERSA9IFwiaGlkZVwiICsgRVZFTlRfS0VZJDM7XG4gIHZhciBFVkVOVF9ISURERU4gPSBcImhpZGRlblwiICsgRVZFTlRfS0VZJDM7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSQzID0gXCJjbGlja1wiICsgRVZFTlRfS0VZJDMgKyBEQVRBX0FQSV9LRVkkMztcbiAgdmFyIENMQVNTX05BTUVfU0hPVyQxID0gJ3Nob3cnO1xuICB2YXIgQ0xBU1NfTkFNRV9DT0xMQVBTRSA9ICdjb2xsYXBzZSc7XG4gIHZhciBDTEFTU19OQU1FX0NPTExBUFNJTkcgPSAnY29sbGFwc2luZyc7XG4gIHZhciBDTEFTU19OQU1FX0NPTExBUFNFRCA9ICdjb2xsYXBzZWQnO1xuICB2YXIgRElNRU5TSU9OX1dJRFRIID0gJ3dpZHRoJztcbiAgdmFyIERJTUVOU0lPTl9IRUlHSFQgPSAnaGVpZ2h0JztcbiAgdmFyIFNFTEVDVE9SX0FDVElWRVMgPSAnLnNob3csIC5jb2xsYXBzaW5nJztcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDEgPSAnW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl0nO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENsYXNzIERlZmluaXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBDb2xsYXBzZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29sbGFwc2UoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1baHJlZj1cXFwiI1wiICsgZWxlbWVudC5pZCArIFwiXFxcIl0sXCIgKyAoXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1bZGF0YS10YXJnZXQ9XFxcIiNcIiArIGVsZW1lbnQuaWQgKyBcIlxcXCJdXCIpKSk7XG4gICAgICB2YXIgdG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9EQVRBX1RPR0dMRSQxKSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2dnbGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBlbGVtID0gdG9nZ2xlTGlzdFtpXTtcbiAgICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW0pO1xuICAgICAgICB2YXIgZmlsdGVyRWxlbWVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLmZpbHRlcihmdW5jdGlvbiAoZm91bmRFbGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGZvdW5kRWxlbSA9PT0gZWxlbWVudDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHNlbGVjdG9yICE9PSBudWxsICYmIGZpbHRlckVsZW1lbnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG5cbiAgICAgICAgICB0aGlzLl90cmlnZ2VyQXJyYXkucHVzaChlbGVtKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9wYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50ID8gdGhpcy5fZ2V0UGFyZW50KCkgOiBudWxsO1xuXG4gICAgICBpZiAoIXRoaXMuX2NvbmZpZy5wYXJlbnQpIHtcbiAgICAgICAgdGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsIHRoaXMuX3RyaWdnZXJBcnJheSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcudG9nZ2xlKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlKCk7XG4gICAgICB9XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBDb2xsYXBzZS5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgaWYgKCRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX1NIT1ckMSkpIHtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnNob3cgPSBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKHRoaXMuX2lzVHJhbnNpdGlvbmluZyB8fCAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjdGl2ZXM7XG4gICAgICB2YXIgYWN0aXZlc0RhdGE7XG5cbiAgICAgIGlmICh0aGlzLl9wYXJlbnQpIHtcbiAgICAgICAgYWN0aXZlcyA9IFtdLnNsaWNlLmNhbGwodGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JfQUNUSVZFUykpLmZpbHRlcihmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMuX2NvbmZpZy5wYXJlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtcGFyZW50JykgPT09IF90aGlzLl9jb25maWcucGFyZW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBlbGVtLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0NPTExBUFNFKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGFjdGl2ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgYWN0aXZlcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgYWN0aXZlc0RhdGEgPSAkX19kZWZhdWx0WydkZWZhdWx0J10oYWN0aXZlcykubm90KHRoaXMuX3NlbGVjdG9yKS5kYXRhKERBVEFfS0VZJDMpO1xuXG4gICAgICAgIGlmIChhY3RpdmVzRGF0YSAmJiBhY3RpdmVzRGF0YS5faXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzdGFydEV2ZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLkV2ZW50KEVWRU5UX1NIT1cpO1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc3RhcnRFdmVudCk7XG5cbiAgICAgIGlmIChzdGFydEV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGFjdGl2ZXMpIHtcbiAgICAgICAgQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZS5jYWxsKCRfX2RlZmF1bHRbJ2RlZmF1bHQnXShhY3RpdmVzKS5ub3QodGhpcy5fc2VsZWN0b3IpLCAnaGlkZScpO1xuXG4gICAgICAgIGlmICghYWN0aXZlc0RhdGEpIHtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oYWN0aXZlcykuZGF0YShEQVRBX0tFWSQzLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgZGltZW5zaW9uID0gdGhpcy5fZ2V0RGltZW5zaW9uKCk7XG5cbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNFKS5hZGRDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNJTkcpO1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gMDtcblxuICAgICAgaWYgKHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGgpIHtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX3RyaWdnZXJBcnJheSkucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9DT0xMQVBTRUQpLmF0dHIoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRUcmFuc2l0aW9uaW5nKHRydWUpO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKF90aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNJTkcpLmFkZENsYXNzKENMQVNTX05BTUVfQ09MTEFQU0UgKyBcIiBcIiArIENMQVNTX05BTUVfU0hPVyQxKTtcbiAgICAgICAgX3RoaXMuX2VsZW1lbnQuc3R5bGVbZGltZW5zaW9uXSA9ICcnO1xuXG4gICAgICAgIF90aGlzLnNldFRyYW5zaXRpb25pbmcoZmFsc2UpO1xuXG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihFVkVOVF9TSE9XTik7XG4gICAgICB9O1xuXG4gICAgICB2YXIgY2FwaXRhbGl6ZWREaW1lbnNpb24gPSBkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSgxKTtcbiAgICAgIHZhciBzY3JvbGxTaXplID0gXCJzY3JvbGxcIiArIGNhcGl0YWxpemVkRGltZW5zaW9uO1xuICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudFtzY3JvbGxTaXplXSArIFwicHhcIjtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhpZGUgPSBmdW5jdGlvbiBoaWRlKCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1RyYW5zaXRpb25pbmcgfHwgISRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX1NIT1ckMSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3RhcnRFdmVudCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5FdmVudChFVkVOVF9ISURFKTtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHN0YXJ0RXZlbnQpO1xuXG4gICAgICBpZiAoc3RhcnRFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBkaW1lbnNpb24gPSB0aGlzLl9nZXREaW1lbnNpb24oKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZVtkaW1lbnNpb25dID0gdGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtkaW1lbnNpb25dICsgXCJweFwiO1xuICAgICAgVXRpbC5yZWZsb3codGhpcy5fZWxlbWVudCk7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNFICsgXCIgXCIgKyBDTEFTU19OQU1FX1NIT1ckMSk7XG4gICAgICB2YXIgdHJpZ2dlckFycmF5TGVuZ3RoID0gdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHRyaWdnZXJBcnJheUxlbmd0aCA+IDApIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmlnZ2VyQXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgICAgIHZhciB0cmlnZ2VyID0gdGhpcy5fdHJpZ2dlckFycmF5W2ldO1xuICAgICAgICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0cmlnZ2VyKTtcblxuICAgICAgICAgIGlmIChzZWxlY3RvciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyICRlbGVtID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpKTtcblxuICAgICAgICAgICAgaWYgKCEkZWxlbS5oYXNDbGFzcyhDTEFTU19OQU1FX1NIT1ckMSkpIHtcbiAgICAgICAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRyaWdnZXIpLmFkZENsYXNzKENMQVNTX05BTUVfQ09MTEFQU0VEKS5hdHRyKCdhcmlhLWV4cGFuZGVkJywgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFRyYW5zaXRpb25pbmcodHJ1ZSk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBfdGhpczIuc2V0VHJhbnNpdGlvbmluZyhmYWxzZSk7XG5cbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKF90aGlzMi5fZWxlbWVudCkucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9DT0xMQVBTSU5HKS5hZGRDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNFKS50cmlnZ2VyKEVWRU5UX0hJRERFTik7XG4gICAgICB9O1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnN0eWxlW2RpbWVuc2lvbl0gPSAnJztcbiAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLnNldFRyYW5zaXRpb25pbmcgPSBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uaW5nKGlzVHJhbnNpdGlvbmluZykge1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gaXNUcmFuc2l0aW9uaW5nO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10ucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQzKTtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl90cmlnZ2VyQXJyYXkgPSBudWxsO1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gbnVsbDtcbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfZXh0ZW5kcyh7fSwgRGVmYXVsdCQxLCBjb25maWcpO1xuICAgICAgY29uZmlnLnRvZ2dsZSA9IEJvb2xlYW4oY29uZmlnLnRvZ2dsZSk7IC8vIENvZXJjZSBzdHJpbmcgdmFsdWVzXG5cbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUkMywgY29uZmlnLCBEZWZhdWx0VHlwZSQxKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0RGltZW5zaW9uID0gZnVuY3Rpb24gX2dldERpbWVuc2lvbigpIHtcbiAgICAgIHZhciBoYXNXaWR0aCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhESU1FTlNJT05fV0lEVEgpO1xuICAgICAgcmV0dXJuIGhhc1dpZHRoID8gRElNRU5TSU9OX1dJRFRIIDogRElNRU5TSU9OX0hFSUdIVDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRQYXJlbnQgPSBmdW5jdGlvbiBfZ2V0UGFyZW50KCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBwYXJlbnQ7XG5cbiAgICAgIGlmIChVdGlsLmlzRWxlbWVudCh0aGlzLl9jb25maWcucGFyZW50KSkge1xuICAgICAgICBwYXJlbnQgPSB0aGlzLl9jb25maWcucGFyZW50OyAvLyBJdCdzIGEgalF1ZXJ5IG9iamVjdFxuXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29uZmlnLnBhcmVudC5qcXVlcnkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgcGFyZW50ID0gdGhpcy5fY29uZmlnLnBhcmVudFswXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLl9jb25maWcucGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNlbGVjdG9yID0gXCJbZGF0YS10b2dnbGU9XFxcImNvbGxhcHNlXFxcIl1bZGF0YS1wYXJlbnQ9XFxcIlwiICsgdGhpcy5fY29uZmlnLnBhcmVudCArIFwiXFxcIl1cIjtcbiAgICAgIHZhciBjaGlsZHJlbiA9IFtdLnNsaWNlLmNhbGwocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShjaGlsZHJlbikuZWFjaChmdW5jdGlvbiAoaSwgZWxlbWVudCkge1xuICAgICAgICBfdGhpczMuX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCksIFtlbGVtZW50XSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwYXJlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzID0gZnVuY3Rpb24gX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyhlbGVtZW50LCB0cmlnZ2VyQXJyYXkpIHtcbiAgICAgIHZhciBpc09wZW4gPSAkX19kZWZhdWx0WydkZWZhdWx0J10oZWxlbWVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDEpO1xuXG4gICAgICBpZiAodHJpZ2dlckFycmF5Lmxlbmd0aCkge1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odHJpZ2dlckFycmF5KS50b2dnbGVDbGFzcyhDTEFTU19OQU1FX0NPTExBUFNFRCwgIWlzT3BlbikuYXR0cignYXJpYS1leHBhbmRlZCcsIGlzT3Blbik7XG4gICAgICB9XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBDb2xsYXBzZS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQoZWxlbWVudCkge1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuICAgICAgcmV0dXJuIHNlbGVjdG9yID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikgOiBudWxsO1xuICAgIH07XG5cbiAgICBDb2xsYXBzZS5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSQzKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0JDEsICRlbGVtZW50LmRhdGEoKSwgdHlwZW9mIGNvbmZpZyA9PT0gJ29iamVjdCcgJiYgY29uZmlnID8gY29uZmlnIDoge30pO1xuXG4gICAgICAgIGlmICghZGF0YSAmJiBfY29uZmlnLnRvZ2dsZSAmJiB0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJyAmJiAvc2hvd3xoaWRlLy50ZXN0KGNvbmZpZykpIHtcbiAgICAgICAgICBfY29uZmlnLnRvZ2dsZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBDb2xsYXBzZSh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkZWxlbWVudC5kYXRhKERBVEFfS0VZJDMsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhDb2xsYXBzZSwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kMztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDE7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENvbGxhcHNlO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGRvY3VtZW50KS5vbihFVkVOVF9DTElDS19EQVRBX0FQSSQzLCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQxLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBwcmV2ZW50RGVmYXVsdCBvbmx5IGZvciA8YT4gZWxlbWVudHMgKHdoaWNoIGNoYW5nZSB0aGUgVVJMKSBub3QgaW5zaWRlIHRoZSBjb2xsYXBzaWJsZSBlbGVtZW50XG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQudGFnTmFtZSA9PT0gJ0EnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciAkdHJpZ2dlciA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzKTtcbiAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7XG4gICAgdmFyIHNlbGVjdG9ycyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShzZWxlY3RvcnMpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICR0YXJnZXQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcyk7XG4gICAgICB2YXIgZGF0YSA9ICR0YXJnZXQuZGF0YShEQVRBX0tFWSQzKTtcbiAgICAgIHZhciBjb25maWcgPSBkYXRhID8gJ3RvZ2dsZScgOiAkdHJpZ2dlci5kYXRhKCk7XG5cbiAgICAgIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkdGFyZ2V0LCBjb25maWcpO1xuICAgIH0pO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDNdID0gQ29sbGFwc2UuX2pRdWVyeUludGVyZmFjZTtcbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkM10uQ29uc3RydWN0b3IgPSBDb2xsYXBzZTtcblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQzXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDNdID0gSlFVRVJZX05PX0NPTkZMSUNUJDM7XG4gICAgcmV0dXJuIENvbGxhcHNlLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDQgPSAnZHJvcGRvd24nO1xuICB2YXIgVkVSU0lPTiQ0ID0gJzQuNS4zJztcbiAgdmFyIERBVEFfS0VZJDQgPSAnYnMuZHJvcGRvd24nO1xuICB2YXIgRVZFTlRfS0VZJDQgPSBcIi5cIiArIERBVEFfS0VZJDQ7XG4gIHZhciBEQVRBX0FQSV9LRVkkNCA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQ0XTtcbiAgdmFyIEVTQ0FQRV9LRVlDT0RFID0gMjc7IC8vIEtleWJvYXJkRXZlbnQud2hpY2ggdmFsdWUgZm9yIEVzY2FwZSAoRXNjKSBrZXlcblxuICB2YXIgU1BBQ0VfS0VZQ09ERSA9IDMyOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBzcGFjZSBrZXlcblxuICB2YXIgVEFCX0tFWUNPREUgPSA5OyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciB0YWIga2V5XG5cbiAgdmFyIEFSUk9XX1VQX0tFWUNPREUgPSAzODsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgdXAgYXJyb3cga2V5XG5cbiAgdmFyIEFSUk9XX0RPV05fS0VZQ09ERSA9IDQwOyAvLyBLZXlib2FyZEV2ZW50LndoaWNoIHZhbHVlIGZvciBkb3duIGFycm93IGtleVxuXG4gIHZhciBSSUdIVF9NT1VTRV9CVVRUT05fV0hJQ0ggPSAzOyAvLyBNb3VzZUV2ZW50LndoaWNoIHZhbHVlIGZvciB0aGUgcmlnaHQgYnV0dG9uIChhc3N1bWluZyBhIHJpZ2h0LWhhbmRlZCBtb3VzZSlcblxuICB2YXIgUkVHRVhQX0tFWURPV04gPSBuZXcgUmVnRXhwKEFSUk9XX1VQX0tFWUNPREUgKyBcInxcIiArIEFSUk9XX0RPV05fS0VZQ09ERSArIFwifFwiICsgRVNDQVBFX0tFWUNPREUpO1xuICB2YXIgRVZFTlRfSElERSQxID0gXCJoaWRlXCIgKyBFVkVOVF9LRVkkNDtcbiAgdmFyIEVWRU5UX0hJRERFTiQxID0gXCJoaWRkZW5cIiArIEVWRU5UX0tFWSQ0O1xuICB2YXIgRVZFTlRfU0hPVyQxID0gXCJzaG93XCIgKyBFVkVOVF9LRVkkNDtcbiAgdmFyIEVWRU5UX1NIT1dOJDEgPSBcInNob3duXCIgKyBFVkVOVF9LRVkkNDtcbiAgdmFyIEVWRU5UX0NMSUNLID0gXCJjbGlja1wiICsgRVZFTlRfS0VZJDQ7XG4gIHZhciBFVkVOVF9DTElDS19EQVRBX0FQSSQ0ID0gXCJjbGlja1wiICsgRVZFTlRfS0VZJDQgKyBEQVRBX0FQSV9LRVkkNDtcbiAgdmFyIEVWRU5UX0tFWURPV05fREFUQV9BUEkgPSBcImtleWRvd25cIiArIEVWRU5UX0tFWSQ0ICsgREFUQV9BUElfS0VZJDQ7XG4gIHZhciBFVkVOVF9LRVlVUF9EQVRBX0FQSSA9IFwia2V5dXBcIiArIEVWRU5UX0tFWSQ0ICsgREFUQV9BUElfS0VZJDQ7XG4gIHZhciBDTEFTU19OQU1FX0RJU0FCTEVEID0gJ2Rpc2FibGVkJztcbiAgdmFyIENMQVNTX05BTUVfU0hPVyQyID0gJ3Nob3cnO1xuICB2YXIgQ0xBU1NfTkFNRV9EUk9QVVAgPSAnZHJvcHVwJztcbiAgdmFyIENMQVNTX05BTUVfRFJPUFJJR0hUID0gJ2Ryb3ByaWdodCc7XG4gIHZhciBDTEFTU19OQU1FX0RST1BMRUZUID0gJ2Ryb3BsZWZ0JztcbiAgdmFyIENMQVNTX05BTUVfTUVOVVJJR0hUID0gJ2Ryb3Bkb3duLW1lbnUtcmlnaHQnO1xuICB2YXIgQ0xBU1NfTkFNRV9QT1NJVElPTl9TVEFUSUMgPSAncG9zaXRpb24tc3RhdGljJztcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDIgPSAnW2RhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIl0nO1xuICB2YXIgU0VMRUNUT1JfRk9STV9DSElMRCA9ICcuZHJvcGRvd24gZm9ybSc7XG4gIHZhciBTRUxFQ1RPUl9NRU5VID0gJy5kcm9wZG93bi1tZW51JztcbiAgdmFyIFNFTEVDVE9SX05BVkJBUl9OQVYgPSAnLm5hdmJhci1uYXYnO1xuICB2YXIgU0VMRUNUT1JfVklTSUJMRV9JVEVNUyA9ICcuZHJvcGRvd24tbWVudSAuZHJvcGRvd24taXRlbTpub3QoLmRpc2FibGVkKTpub3QoOmRpc2FibGVkKSc7XG4gIHZhciBQTEFDRU1FTlRfVE9QID0gJ3RvcC1zdGFydCc7XG4gIHZhciBQTEFDRU1FTlRfVE9QRU5EID0gJ3RvcC1lbmQnO1xuICB2YXIgUExBQ0VNRU5UX0JPVFRPTSA9ICdib3R0b20tc3RhcnQnO1xuICB2YXIgUExBQ0VNRU5UX0JPVFRPTUVORCA9ICdib3R0b20tZW5kJztcbiAgdmFyIFBMQUNFTUVOVF9SSUdIVCA9ICdyaWdodC1zdGFydCc7XG4gIHZhciBQTEFDRU1FTlRfTEVGVCA9ICdsZWZ0LXN0YXJ0JztcbiAgdmFyIERlZmF1bHQkMiA9IHtcbiAgICBvZmZzZXQ6IDAsXG4gICAgZmxpcDogdHJ1ZSxcbiAgICBib3VuZGFyeTogJ3Njcm9sbFBhcmVudCcsXG4gICAgcmVmZXJlbmNlOiAndG9nZ2xlJyxcbiAgICBkaXNwbGF5OiAnZHluYW1pYycsXG4gICAgcG9wcGVyQ29uZmlnOiBudWxsXG4gIH07XG4gIHZhciBEZWZhdWx0VHlwZSQyID0ge1xuICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKScsXG4gICAgZmxpcDogJ2Jvb2xlYW4nLFxuICAgIGJvdW5kYXJ5OiAnKHN0cmluZ3xlbGVtZW50KScsXG4gICAgcmVmZXJlbmNlOiAnKHN0cmluZ3xlbGVtZW50KScsXG4gICAgZGlzcGxheTogJ3N0cmluZycsXG4gICAgcG9wcGVyQ29uZmlnOiAnKG51bGx8b2JqZWN0KSdcbiAgfTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgRHJvcGRvd24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERyb3Bkb3duKGVsZW1lbnQsIGNvbmZpZykge1xuICAgICAgdGhpcy5fZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl9tZW51ID0gdGhpcy5fZ2V0TWVudUVsZW1lbnQoKTtcbiAgICAgIHRoaXMuX2luTmF2YmFyID0gdGhpcy5fZGV0ZWN0TmF2YmFyKCk7XG5cbiAgICAgIHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBEcm9wZG93bi5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuZGlzYWJsZWQgfHwgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfRElTQUJMRUQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGlzQWN0aXZlID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX21lbnUpLmhhc0NsYXNzKENMQVNTX05BTUVfU0hPVyQyKTtcblxuICAgICAgRHJvcGRvd24uX2NsZWFyTWVudXMoKTtcblxuICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zaG93KHRydWUpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3codXNlUG9wcGVyKSB7XG4gICAgICBpZiAodXNlUG9wcGVyID09PSB2b2lkIDApIHtcbiAgICAgICAgdXNlUG9wcGVyID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX0RJU0FCTEVEKSB8fCAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fbWVudSkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHRoaXMuX2VsZW1lbnRcbiAgICAgIH07XG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLkV2ZW50KEVWRU5UX1NIT1ckMSwgcmVsYXRlZFRhcmdldCk7XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShwYXJlbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblxuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIERpc2FibGUgdG90YWxseSBQb3BwZXIuanMgZm9yIERyb3Bkb3duIGluIE5hdmJhclxuXG5cbiAgICAgIGlmICghdGhpcy5faW5OYXZiYXIgJiYgdXNlUG9wcGVyKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDaGVjayBmb3IgUG9wcGVyIGRlcGVuZGVuY3lcbiAgICAgICAgICogUG9wcGVyIC0gaHR0cHM6Ly9wb3BwZXIuanMub3JnXG4gICAgICAgICAqL1xuICAgICAgICBpZiAodHlwZW9mIFBvcHBlcl9fZGVmYXVsdFsnZGVmYXVsdCddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0Jvb3RzdHJhcFxcJ3MgZHJvcGRvd25zIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcvKScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50O1xuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcucmVmZXJlbmNlID09PSAncGFyZW50Jykge1xuICAgICAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSBwYXJlbnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoVXRpbC5pc0VsZW1lbnQodGhpcy5fY29uZmlnLnJlZmVyZW5jZSkpIHtcbiAgICAgICAgICByZWZlcmVuY2VFbGVtZW50ID0gdGhpcy5fY29uZmlnLnJlZmVyZW5jZTsgLy8gQ2hlY2sgaWYgaXQncyBqUXVlcnkgZWxlbWVudFxuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcucmVmZXJlbmNlLmpxdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJlZmVyZW5jZUVsZW1lbnQgPSB0aGlzLl9jb25maWcucmVmZXJlbmNlWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBJZiBib3VuZGFyeSBpcyBub3QgYHNjcm9sbFBhcmVudGAsIHRoZW4gc2V0IHBvc2l0aW9uIHRvIGBzdGF0aWNgXG4gICAgICAgIC8vIHRvIGFsbG93IHRoZSBtZW51IHRvIFwiZXNjYXBlXCIgdGhlIHNjcm9sbCBwYXJlbnQncyBib3VuZGFyaWVzXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9pc3N1ZXMvMjQyNTFcblxuXG4gICAgICAgIGlmICh0aGlzLl9jb25maWcuYm91bmRhcnkgIT09ICdzY3JvbGxQYXJlbnQnKSB7XG4gICAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHBhcmVudCkuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9QT1NJVElPTl9TVEFUSUMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcl9fZGVmYXVsdFsnZGVmYXVsdCddKHJlZmVyZW5jZUVsZW1lbnQsIHRoaXMuX21lbnUsIHRoaXMuX2dldFBvcHBlckNvbmZpZygpKTtcbiAgICAgIH0gLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIGFkZCBleHRyYVxuICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAgIC8vIG9ubHkgbmVlZGVkIGJlY2F1c2Ugb2YgYnJva2VuIGV2ZW50IGRlbGVnYXRpb24gb24gaU9TXG4gICAgICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTQvMDIvbW91c2VfZXZlbnRfYnViLmh0bWxcblxuXG4gICAgICBpZiAoJ29udG91Y2hzdGFydCcgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShwYXJlbnQpLmNsb3Nlc3QoU0VMRUNUT1JfTkFWQkFSX05BVikubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkX19kZWZhdWx0WydkZWZhdWx0J10ubm9vcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCB0cnVlKTtcblxuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX21lbnUpLnRvZ2dsZUNsYXNzKENMQVNTX05BTUVfU0hPVyQyKTtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShwYXJlbnQpLnRvZ2dsZUNsYXNzKENMQVNTX05BTUVfU0hPVyQyKS50cmlnZ2VyKCRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5FdmVudChFVkVOVF9TSE9XTiQxLCByZWxhdGVkVGFyZ2V0KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgIGlmICh0aGlzLl9lbGVtZW50LmRpc2FibGVkIHx8ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX0RJU0FCTEVEKSB8fCAhJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX21lbnUpLmhhc0NsYXNzKENMQVNTX05BTUVfU0hPVyQyKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciByZWxhdGVkVGFyZ2V0ID0ge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0aGlzLl9lbGVtZW50XG4gICAgICB9O1xuICAgICAgdmFyIGhpZGVFdmVudCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5FdmVudChFVkVOVF9ISURFJDEsIHJlbGF0ZWRUYXJnZXQpO1xuXG4gICAgICB2YXIgcGFyZW50ID0gRHJvcGRvd24uX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10ocGFyZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fcG9wcGVyKSB7XG4gICAgICAgIHRoaXMuX3BvcHBlci5kZXN0cm95KCk7XG4gICAgICB9XG5cbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhDTEFTU19OQU1FX1NIT1ckMik7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10ocGFyZW50KS50b2dnbGVDbGFzcyhDTEFTU19OQU1FX1NIT1ckMikudHJpZ2dlcigkX19kZWZhdWx0WydkZWZhdWx0J10uRXZlbnQoRVZFTlRfSElEREVOJDEsIHJlbGF0ZWRUYXJnZXQpKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkNCk7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0tFWSQ0KTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fbWVudSA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcblxuICAgICAgICB0aGlzLl9wb3BwZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgICAgdGhpcy5faW5OYXZiYXIgPSB0aGlzLl9kZXRlY3ROYXZiYXIoKTtcblxuICAgICAgaWYgKHRoaXMuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICB0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKTtcbiAgICAgIH1cbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2FkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24gX2FkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLm9uKEVWRU5UX0NMSUNLLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgX3RoaXMudG9nZ2xlKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRDb25maWcgPSBmdW5jdGlvbiBfZ2V0Q29uZmlnKGNvbmZpZykge1xuICAgICAgY29uZmlnID0gX2V4dGVuZHMoe30sIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCwgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLmRhdGEoKSwgY29uZmlnKTtcbiAgICAgIFV0aWwudHlwZUNoZWNrQ29uZmlnKE5BTUUkNCwgY29uZmlnLCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0TWVudUVsZW1lbnQgPSBmdW5jdGlvbiBfZ2V0TWVudUVsZW1lbnQoKSB7XG4gICAgICBpZiAoIXRoaXMuX21lbnUpIHtcbiAgICAgICAgdmFyIHBhcmVudCA9IERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcblxuICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgdGhpcy5fbWVudSA9IHBhcmVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SX01FTlUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9tZW51O1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFBsYWNlbWVudCA9IGZ1bmN0aW9uIF9nZXRQbGFjZW1lbnQoKSB7XG4gICAgICB2YXIgJHBhcmVudERyb3Bkb3duID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSk7XG4gICAgICB2YXIgcGxhY2VtZW50ID0gUExBQ0VNRU5UX0JPVFRPTTsgLy8gSGFuZGxlIGRyb3B1cFxuXG4gICAgICBpZiAoJHBhcmVudERyb3Bkb3duLmhhc0NsYXNzKENMQVNTX05BTUVfRFJPUFVQKSkge1xuICAgICAgICBwbGFjZW1lbnQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fbWVudSkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9NRU5VUklHSFQpID8gUExBQ0VNRU5UX1RPUEVORCA6IFBMQUNFTUVOVF9UT1A7XG4gICAgICB9IGVsc2UgaWYgKCRwYXJlbnREcm9wZG93bi5oYXNDbGFzcyhDTEFTU19OQU1FX0RST1BSSUdIVCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gUExBQ0VNRU5UX1JJR0hUO1xuICAgICAgfSBlbHNlIGlmICgkcGFyZW50RHJvcGRvd24uaGFzQ2xhc3MoQ0xBU1NfTkFNRV9EUk9QTEVGVCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gUExBQ0VNRU5UX0xFRlQ7XG4gICAgICB9IGVsc2UgaWYgKCRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9tZW51KS5oYXNDbGFzcyhDTEFTU19OQU1FX01FTlVSSUdIVCkpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gUExBQ0VNRU5UX0JPVFRPTUVORDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBsYWNlbWVudDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9kZXRlY3ROYXZiYXIgPSBmdW5jdGlvbiBfZGV0ZWN0TmF2YmFyKCkge1xuICAgICAgcmV0dXJuICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KCcubmF2YmFyJykubGVuZ3RoID4gMDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRPZmZzZXQgPSBmdW5jdGlvbiBfZ2V0T2Zmc2V0KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBvZmZzZXQgPSB7fTtcblxuICAgICAgaWYgKHR5cGVvZiB0aGlzLl9jb25maWcub2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9mZnNldC5mbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgZGF0YS5vZmZzZXRzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cywgX3RoaXMyLl9jb25maWcub2Zmc2V0KGRhdGEub2Zmc2V0cywgX3RoaXMyLl9lbGVtZW50KSB8fCB7fSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvZmZzZXQub2Zmc2V0ID0gdGhpcy5fY29uZmlnLm9mZnNldDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRQb3BwZXJDb25maWcgPSBmdW5jdGlvbiBfZ2V0UG9wcGVyQ29uZmlnKCkge1xuICAgICAgdmFyIHBvcHBlckNvbmZpZyA9IHtcbiAgICAgICAgcGxhY2VtZW50OiB0aGlzLl9nZXRQbGFjZW1lbnQoKSxcbiAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKSxcbiAgICAgICAgICBmbGlwOiB7XG4gICAgICAgICAgICBlbmFibGVkOiB0aGlzLl9jb25maWcuZmxpcFxuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogdGhpcy5fY29uZmlnLmJvdW5kYXJ5XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9OyAvLyBEaXNhYmxlIFBvcHBlci5qcyBpZiB3ZSBoYXZlIGEgc3RhdGljIGRpc3BsYXlcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5kaXNwbGF5ID09PSAnc3RhdGljJykge1xuICAgICAgICBwb3BwZXJDb25maWcubW9kaWZpZXJzLmFwcGx5U3R5bGUgPSB7XG4gICAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBwb3BwZXJDb25maWcsIHRoaXMuX2NvbmZpZy5wb3BwZXJDb25maWcpO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRhdGEgPSAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcykuZGF0YShEQVRBX0tFWSQ0KTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnID8gY29uZmlnIDogbnVsbDtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IERyb3Bkb3duKHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzKS5kYXRhKERBVEFfS0VZJDQsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIERyb3Bkb3duLl9jbGVhck1lbnVzID0gZnVuY3Rpb24gX2NsZWFyTWVudXMoZXZlbnQpIHtcbiAgICAgIGlmIChldmVudCAmJiAoZXZlbnQud2hpY2ggPT09IFJJR0hUX01PVVNFX0JVVFRPTl9XSElDSCB8fCBldmVudC50eXBlID09PSAna2V5dXAnICYmIGV2ZW50LndoaWNoICE9PSBUQUJfS0VZQ09ERSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdG9nZ2xlcyA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9EQVRBX1RPR0dMRSQyKSk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0b2dnbGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodG9nZ2xlc1tpXSk7XG5cbiAgICAgICAgdmFyIGNvbnRleHQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10odG9nZ2xlc1tpXSkuZGF0YShEQVRBX0tFWSQ0KTtcbiAgICAgICAgdmFyIHJlbGF0ZWRUYXJnZXQgPSB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogdG9nZ2xlc1tpXVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChldmVudCAmJiBldmVudC50eXBlID09PSAnY2xpY2snKSB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldC5jbGlja0V2ZW50ID0gZXZlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkcm9wZG93bk1lbnUgPSBjb250ZXh0Ll9tZW51O1xuXG4gICAgICAgIGlmICghJF9fZGVmYXVsdFsnZGVmYXVsdCddKHBhcmVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDIpKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdjbGljaycgJiYgL2lucHV0fHRleHRhcmVhL2kudGVzdChldmVudC50YXJnZXQudGFnTmFtZSkgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJyAmJiBldmVudC53aGljaCA9PT0gVEFCX0tFWUNPREUpICYmICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5jb250YWlucyhwYXJlbnQsIGV2ZW50LnRhcmdldCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBoaWRlRXZlbnQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10uRXZlbnQoRVZFTlRfSElERSQxLCByZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHBhcmVudCkudHJpZ2dlcihoaWRlRXZlbnQpO1xuXG4gICAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSAvLyBJZiB0aGlzIGlzIGEgdG91Y2gtZW5hYmxlZCBkZXZpY2Ugd2UgcmVtb3ZlIHRoZSBleHRyYVxuICAgICAgICAvLyBlbXB0eSBtb3VzZW92ZXIgbGlzdGVuZXJzIHdlIGFkZGVkIGZvciBpT1Mgc3VwcG9ydFxuXG5cbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9mZignbW91c2VvdmVyJywgbnVsbCwgJF9fZGVmYXVsdFsnZGVmYXVsdCddLm5vb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9nZ2xlc1tpXS5zZXRBdHRyaWJ1dGUoJ2FyaWEtZXhwYW5kZWQnLCAnZmFsc2UnKTtcblxuICAgICAgICBpZiAoY29udGV4dC5fcG9wcGVyKSB7XG4gICAgICAgICAgY29udGV4dC5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuXG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShkcm9wZG93bk1lbnUpLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfU0hPVyQyKTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHBhcmVudCkucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDIpLnRyaWdnZXIoJF9fZGVmYXVsdFsnZGVmYXVsdCddLkV2ZW50KEVWRU5UX0hJRERFTiQxLCByZWxhdGVkVGFyZ2V0KSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIERyb3Bkb3duLl9nZXRQYXJlbnRGcm9tRWxlbWVudCA9IGZ1bmN0aW9uIF9nZXRQYXJlbnRGcm9tRWxlbWVudChlbGVtZW50KSB7XG4gICAgICB2YXIgcGFyZW50O1xuICAgICAgdmFyIHNlbGVjdG9yID0gVXRpbC5nZXRTZWxlY3RvckZyb21FbGVtZW50KGVsZW1lbnQpO1xuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgcGFyZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXJlbnQgfHwgZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbXBsZXhpdHlcbiAgICA7XG5cbiAgICBEcm9wZG93bi5fZGF0YUFwaUtleWRvd25IYW5kbGVyID0gZnVuY3Rpb24gX2RhdGFBcGlLZXlkb3duSGFuZGxlcihldmVudCkge1xuICAgICAgLy8gSWYgbm90IGlucHV0L3RleHRhcmVhOlxuICAgICAgLy8gIC0gQW5kIG5vdCBhIGtleSBpbiBSRUdFWFBfS0VZRE9XTiA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAvLyBJZiBpbnB1dC90ZXh0YXJlYTpcbiAgICAgIC8vICAtIElmIHNwYWNlIGtleSA9PiBub3QgYSBkcm9wZG93biBjb21tYW5kXG4gICAgICAvLyAgLSBJZiBrZXkgaXMgb3RoZXIgdGhhbiBlc2NhcGVcbiAgICAgIC8vICAgIC0gSWYga2V5IGlzIG5vdCB1cCBvciBkb3duID0+IG5vdCBhIGRyb3Bkb3duIGNvbW1hbmRcbiAgICAgIC8vICAgIC0gSWYgdHJpZ2dlciBpbnNpZGUgdGhlIG1lbnUgPT4gbm90IGEgZHJvcGRvd24gY29tbWFuZFxuICAgICAgaWYgKC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QoZXZlbnQudGFyZ2V0LnRhZ05hbWUpID8gZXZlbnQud2hpY2ggPT09IFNQQUNFX0tFWUNPREUgfHwgZXZlbnQud2hpY2ggIT09IEVTQ0FQRV9LRVlDT0RFICYmIChldmVudC53aGljaCAhPT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGV2ZW50LndoaWNoICE9PSBBUlJPV19VUF9LRVlDT0RFIHx8ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShldmVudC50YXJnZXQpLmNsb3Nlc3QoU0VMRUNUT1JfTUVOVSkubGVuZ3RoKSA6ICFSRUdFWFBfS0VZRE9XTi50ZXN0KGV2ZW50LndoaWNoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRpc2FibGVkIHx8ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzKS5oYXNDbGFzcyhDTEFTU19OQU1FX0RJU0FCTEVEKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBwYXJlbnQgPSBEcm9wZG93bi5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyk7XG5cbiAgICAgIHZhciBpc0FjdGl2ZSA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShwYXJlbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfU0hPVyQyKTtcblxuICAgICAgaWYgKCFpc0FjdGl2ZSAmJiBldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmICghaXNBY3RpdmUgfHwgZXZlbnQud2hpY2ggPT09IEVTQ0FQRV9LRVlDT0RFIHx8IGV2ZW50LndoaWNoID09PSBTUEFDRV9LRVlDT0RFKSB7XG4gICAgICAgIGlmIChldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUpIHtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10ocGFyZW50LnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfREFUQV9UT0dHTEUkMikpLnRyaWdnZXIoJ2ZvY3VzJyk7XG4gICAgICAgIH1cblxuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcykudHJpZ2dlcignY2xpY2snKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbXMgPSBbXS5zbGljZS5jYWxsKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX1ZJU0lCTEVfSVRFTVMpKS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShpdGVtKS5pcygnOnZpc2libGUnKTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gaXRlbXMuaW5kZXhPZihldmVudC50YXJnZXQpO1xuXG4gICAgICBpZiAoZXZlbnQud2hpY2ggPT09IEFSUk9XX1VQX0tFWUNPREUgJiYgaW5kZXggPiAwKSB7XG4gICAgICAgIC8vIFVwXG4gICAgICAgIGluZGV4LS07XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC53aGljaCA9PT0gQVJST1dfRE9XTl9LRVlDT0RFICYmIGluZGV4IDwgaXRlbXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAvLyBEb3duXG4gICAgICAgIGluZGV4Kys7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICBpdGVtc1tpbmRleF0uZm9jdXMoKTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKERyb3Bkb3duLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQ0O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkMjtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGUkMjtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gRHJvcGRvd247XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBEYXRhIEFwaSBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10oZG9jdW1lbnQpLm9uKEVWRU5UX0tFWURPV05fREFUQV9BUEksIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDIsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEVWRU5UX0tFWURPV05fREFUQV9BUEksIFNFTEVDVE9SX01FTlUsIERyb3Bkb3duLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKEVWRU5UX0NMSUNLX0RBVEFfQVBJJDQgKyBcIiBcIiArIEVWRU5UX0tFWVVQX0RBVEFfQVBJLCBEcm9wZG93bi5fY2xlYXJNZW51cykub24oRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNCwgU0VMRUNUT1JfREFUQV9UT0dHTEUkMiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcyksICd0b2dnbGUnKTtcbiAgfSkub24oRVZFTlRfQ0xJQ0tfREFUQV9BUEkkNCwgU0VMRUNUT1JfRk9STV9DSElMRCwgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDRdID0gRHJvcGRvd24uX2pRdWVyeUludGVyZmFjZTtcbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkNF0uQ29uc3RydWN0b3IgPSBEcm9wZG93bjtcblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQ0XS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDRdID0gSlFVRVJZX05PX0NPTkZMSUNUJDQ7XG4gICAgcmV0dXJuIERyb3Bkb3duLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDUgPSAnbW9kYWwnO1xuICB2YXIgVkVSU0lPTiQ1ID0gJzQuNS4zJztcbiAgdmFyIERBVEFfS0VZJDUgPSAnYnMubW9kYWwnO1xuICB2YXIgRVZFTlRfS0VZJDUgPSBcIi5cIiArIERBVEFfS0VZJDU7XG4gIHZhciBEQVRBX0FQSV9LRVkkNSA9ICcuZGF0YS1hcGknO1xuICB2YXIgSlFVRVJZX05PX0NPTkZMSUNUJDUgPSAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQ1XTtcbiAgdmFyIEVTQ0FQRV9LRVlDT0RFJDEgPSAyNzsgLy8gS2V5Ym9hcmRFdmVudC53aGljaCB2YWx1ZSBmb3IgRXNjYXBlIChFc2MpIGtleVxuXG4gIHZhciBEZWZhdWx0JDMgPSB7XG4gICAgYmFja2Ryb3A6IHRydWUsXG4gICAga2V5Ym9hcmQ6IHRydWUsXG4gICAgZm9jdXM6IHRydWUsXG4gICAgc2hvdzogdHJ1ZVxuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkMyA9IHtcbiAgICBiYWNrZHJvcDogJyhib29sZWFufHN0cmluZyknLFxuICAgIGtleWJvYXJkOiAnYm9vbGVhbicsXG4gICAgZm9jdXM6ICdib29sZWFuJyxcbiAgICBzaG93OiAnYm9vbGVhbidcbiAgfTtcbiAgdmFyIEVWRU5UX0hJREUkMiA9IFwiaGlkZVwiICsgRVZFTlRfS0VZJDU7XG4gIHZhciBFVkVOVF9ISURFX1BSRVZFTlRFRCA9IFwiaGlkZVByZXZlbnRlZFwiICsgRVZFTlRfS0VZJDU7XG4gIHZhciBFVkVOVF9ISURERU4kMiA9IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVkkNTtcbiAgdmFyIEVWRU5UX1NIT1ckMiA9IFwic2hvd1wiICsgRVZFTlRfS0VZJDU7XG4gIHZhciBFVkVOVF9TSE9XTiQyID0gXCJzaG93blwiICsgRVZFTlRfS0VZJDU7XG4gIHZhciBFVkVOVF9GT0NVU0lOID0gXCJmb2N1c2luXCIgKyBFVkVOVF9LRVkkNTtcbiAgdmFyIEVWRU5UX1JFU0laRSA9IFwicmVzaXplXCIgKyBFVkVOVF9LRVkkNTtcbiAgdmFyIEVWRU5UX0NMSUNLX0RJU01JU1MgPSBcImNsaWNrLmRpc21pc3NcIiArIEVWRU5UX0tFWSQ1O1xuICB2YXIgRVZFTlRfS0VZRE9XTl9ESVNNSVNTID0gXCJrZXlkb3duLmRpc21pc3NcIiArIEVWRU5UX0tFWSQ1O1xuICB2YXIgRVZFTlRfTU9VU0VVUF9ESVNNSVNTID0gXCJtb3VzZXVwLmRpc21pc3NcIiArIEVWRU5UX0tFWSQ1O1xuICB2YXIgRVZFTlRfTU9VU0VET1dOX0RJU01JU1MgPSBcIm1vdXNlZG93bi5kaXNtaXNzXCIgKyBFVkVOVF9LRVkkNTtcbiAgdmFyIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDUgPSBcImNsaWNrXCIgKyBFVkVOVF9LRVkkNSArIERBVEFfQVBJX0tFWSQ1O1xuICB2YXIgQ0xBU1NfTkFNRV9TQ1JPTExBQkxFID0gJ21vZGFsLWRpYWxvZy1zY3JvbGxhYmxlJztcbiAgdmFyIENMQVNTX05BTUVfU0NST0xMQkFSX01FQVNVUkVSID0gJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJztcbiAgdmFyIENMQVNTX05BTUVfQkFDS0RST1AgPSAnbW9kYWwtYmFja2Ryb3AnO1xuICB2YXIgQ0xBU1NfTkFNRV9PUEVOID0gJ21vZGFsLW9wZW4nO1xuICB2YXIgQ0xBU1NfTkFNRV9GQURFJDEgPSAnZmFkZSc7XG4gIHZhciBDTEFTU19OQU1FX1NIT1ckMyA9ICdzaG93JztcbiAgdmFyIENMQVNTX05BTUVfU1RBVElDID0gJ21vZGFsLXN0YXRpYyc7XG4gIHZhciBTRUxFQ1RPUl9ESUFMT0cgPSAnLm1vZGFsLWRpYWxvZyc7XG4gIHZhciBTRUxFQ1RPUl9NT0RBTF9CT0RZID0gJy5tb2RhbC1ib2R5JztcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDMgPSAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nO1xuICB2YXIgU0VMRUNUT1JfREFUQV9ESVNNSVNTID0gJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXSc7XG4gIHZhciBTRUxFQ1RPUl9GSVhFRF9DT05URU5UID0gJy5maXhlZC10b3AsIC5maXhlZC1ib3R0b20sIC5pcy1maXhlZCwgLnN0aWNreS10b3AnO1xuICB2YXIgU0VMRUNUT1JfU1RJQ0tZX0NPTlRFTlQgPSAnLnN0aWNreS10b3AnO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENsYXNzIERlZmluaXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBNb2RhbCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTW9kYWwoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fZGlhbG9nID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKFNFTEVDVE9SX0RJQUxPRyk7XG4gICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyA9IGZhbHNlO1xuICAgICAgdGhpcy5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9zY3JvbGxiYXJXaWR0aCA9IDA7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBNb2RhbC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHJldHVybiB0aGlzLl9pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3cocmVsYXRlZFRhcmdldCk7XG4gICAgfTtcblxuICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdyhyZWxhdGVkVGFyZ2V0KSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5faXNTaG93biB8fCB0aGlzLl9pc1RyYW5zaXRpb25pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfRkFERSQxKSkge1xuICAgICAgICB0aGlzLl9pc1RyYW5zaXRpb25pbmcgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLkV2ZW50KEVWRU5UX1NIT1ckMiwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiByZWxhdGVkVGFyZ2V0XG4gICAgICB9KTtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHNob3dFdmVudCk7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duIHx8IHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzU2hvd24gPSB0cnVlO1xuXG4gICAgICB0aGlzLl9jaGVja1Njcm9sbGJhcigpO1xuXG4gICAgICB0aGlzLl9zZXRTY3JvbGxiYXIoKTtcblxuICAgICAgdGhpcy5fYWRqdXN0RGlhbG9nKCk7XG5cbiAgICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XG5cbiAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5vbihFVkVOVF9DTElDS19ESVNNSVNTLCBTRUxFQ1RPUl9EQVRBX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuaGlkZShldmVudCk7XG4gICAgICB9KTtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9kaWFsb2cpLm9uKEVWRU5UX01PVVNFRE9XTl9ESVNNSVNTLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShfdGhpcy5fZWxlbWVudCkub25lKEVWRU5UX01PVVNFVVBfRElTTUlTUywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgaWYgKCRfX2RlZmF1bHRbJ2RlZmF1bHQnXShldmVudC50YXJnZXQpLmlzKF90aGlzLl9lbGVtZW50KSkge1xuICAgICAgICAgICAgX3RoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5fc2hvd0JhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzLl9zaG93RWxlbWVudChyZWxhdGVkVGFyZ2V0KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoZXZlbnQpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLl9pc1Nob3duIHx8IHRoaXMuX2lzVHJhbnNpdGlvbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10uRXZlbnQoRVZFTlRfSElERSQyKTtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgIGlmICghdGhpcy5faXNTaG93biB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9pc1Nob3duID0gZmFsc2U7XG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX0ZBREUkMSk7XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuX2lzVHJhbnNpdGlvbmluZyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3NldEVzY2FwZUV2ZW50KCk7XG5cbiAgICAgIHRoaXMuX3NldFJlc2l6ZUV2ZW50KCk7XG5cbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShkb2N1bWVudCkub2ZmKEVWRU5UX0ZPQ1VTSU4pO1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfU0hPVyQzKTtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5vZmYoRVZFTlRfQ0xJQ0tfRElTTUlTUyk7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZGlhbG9nKS5vZmYoRVZFTlRfTU9VU0VET1dOX0RJU01JU1MpO1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLl9oaWRlTW9kYWwoZXZlbnQpO1xuICAgICAgICB9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5faGlkZU1vZGFsKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNwb3NlID0gZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICAgIFt3aW5kb3csIHRoaXMuX2VsZW1lbnQsIHRoaXMuX2RpYWxvZ10uZm9yRWFjaChmdW5jdGlvbiAoaHRtbEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShodG1sRWxlbWVudCkub2ZmKEVWRU5UX0tFWSQ1KTtcbiAgICAgIH0pO1xuICAgICAgLyoqXG4gICAgICAgKiBgZG9jdW1lbnRgIGhhcyAyIGV2ZW50cyBgRVZFTlRfRk9DVVNJTmAgYW5kIGBFVkVOVF9DTElDS19EQVRBX0FQSWBcbiAgICAgICAqIERvIG5vdCBtb3ZlIGBkb2N1bWVudGAgaW4gYGh0bWxFbGVtZW50c2AgYXJyYXlcbiAgICAgICAqIEl0IHdpbGwgcmVtb3ZlIGBFVkVOVF9DTElDS19EQVRBX0FQSWAgZXZlbnQgdGhhdCBzaG91bGQgcmVtYWluXG4gICAgICAgKi9cblxuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGRvY3VtZW50KS5vZmYoRVZFTlRfRk9DVVNJTik7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10ucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSQ1KTtcbiAgICAgIHRoaXMuX2NvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMuX2RpYWxvZyA9IG51bGw7XG4gICAgICB0aGlzLl9iYWNrZHJvcCA9IG51bGw7XG4gICAgICB0aGlzLl9pc1Nob3duID0gbnVsbDtcbiAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gbnVsbDtcbiAgICAgIHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2sgPSBudWxsO1xuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gbnVsbDtcbiAgICAgIHRoaXMuX3Njcm9sbGJhcldpZHRoID0gbnVsbDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmhhbmRsZVVwZGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVVwZGF0ZSgpIHtcbiAgICAgIHRoaXMuX2FkanVzdERpYWxvZygpO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0JDMsIGNvbmZpZyk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDUsIGNvbmZpZywgRGVmYXVsdFR5cGUkMyk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24gPSBmdW5jdGlvbiBfdHJpZ2dlckJhY2tkcm9wVHJhbnNpdGlvbigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmJhY2tkcm9wID09PSAnc3RhdGljJykge1xuICAgICAgICB2YXIgaGlkZUV2ZW50UHJldmVudGVkID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLkV2ZW50KEVWRU5UX0hJREVfUFJFVkVOVEVEKTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50UHJldmVudGVkKTtcblxuICAgICAgICBpZiAoaGlkZUV2ZW50UHJldmVudGVkLmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzTW9kYWxPdmVyZmxvd2luZyA9IHRoaXMuX2VsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDtcblxuICAgICAgICBpZiAoIWlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUub3ZlcmZsb3dZID0gJ2hpZGRlbic7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TVEFUSUMpO1xuXG4gICAgICAgIHZhciBtb2RhbFRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZGlhbG9nKTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLm9mZihVdGlsLlRSQU5TSVRJT05fRU5EKTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TVEFUSUMpO1xuXG4gICAgICAgICAgaWYgKCFpc01vZGFsT3ZlcmZsb3dpbmcpIHtcbiAgICAgICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShfdGhpczMuX2VsZW1lbnQpLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF90aGlzMy5fZWxlbWVudC5zdHlsZS5vdmVyZmxvd1kgPSAnJztcbiAgICAgICAgICAgIH0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKF90aGlzMy5fZWxlbWVudCwgbW9kYWxUcmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQobW9kYWxUcmFuc2l0aW9uRHVyYXRpb24pO1xuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3Nob3dFbGVtZW50ID0gZnVuY3Rpb24gX3Nob3dFbGVtZW50KHJlbGF0ZWRUYXJnZXQpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbiA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhDTEFTU19OQU1FX0ZBREUkMSk7XG4gICAgICB2YXIgbW9kYWxCb2R5ID0gdGhpcy5fZGlhbG9nID8gdGhpcy5fZGlhbG9nLnF1ZXJ5U2VsZWN0b3IoU0VMRUNUT1JfTU9EQUxfQk9EWSkgOiBudWxsO1xuXG4gICAgICBpZiAoIXRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSB8fCB0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGUgIT09IE5vZGUuRUxFTUVOVF9OT0RFKSB7XG4gICAgICAgIC8vIERvbid0IG1vdmUgbW9kYWwncyBET00gcG9zaXRpb25cbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJyk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLW1vZGFsJywgdHJ1ZSk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2RpYWxvZycpO1xuXG4gICAgICBpZiAoJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2RpYWxvZykuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TQ1JPTExBQkxFKSAmJiBtb2RhbEJvZHkpIHtcbiAgICAgICAgbW9kYWxCb2R5LnNjcm9sbFRvcCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnNjcm9sbFRvcCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmICh0cmFuc2l0aW9uKSB7XG4gICAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDMpO1xuXG4gICAgICBpZiAodGhpcy5fY29uZmlnLmZvY3VzKSB7XG4gICAgICAgIHRoaXMuX2VuZm9yY2VGb2N1cygpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2hvd25FdmVudCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5FdmVudChFVkVOVF9TSE9XTiQyLCB7XG4gICAgICAgIHJlbGF0ZWRUYXJnZXQ6IHJlbGF0ZWRUYXJnZXRcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdHJhbnNpdGlvbkNvbXBsZXRlID0gZnVuY3Rpb24gdHJhbnNpdGlvbkNvbXBsZXRlKCkge1xuICAgICAgICBpZiAoX3RoaXM0Ll9jb25maWcuZm9jdXMpIHtcbiAgICAgICAgICBfdGhpczQuX2VsZW1lbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzNC5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShfdGhpczQuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd25FdmVudCk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudCh0aGlzLl9kaWFsb2cpO1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZGlhbG9nKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgdHJhbnNpdGlvbkNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNpdGlvbkNvbXBsZXRlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gX2VuZm9yY2VGb2N1cygpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZG9jdW1lbnQpLm9mZihFVkVOVF9GT0NVU0lOKSAvLyBHdWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICAgIC5vbihFVkVOVF9GT0NVU0lOLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKGRvY3VtZW50ICE9PSBldmVudC50YXJnZXQgJiYgX3RoaXM1Ll9lbGVtZW50ICE9PSBldmVudC50YXJnZXQgJiYgJF9fZGVmYXVsdFsnZGVmYXVsdCddKF90aGlzNS5fZWxlbWVudCkuaGFzKGV2ZW50LnRhcmdldCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgX3RoaXM1Ll9lbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldEVzY2FwZUV2ZW50ID0gZnVuY3Rpb24gX3NldEVzY2FwZUV2ZW50KCkge1xuICAgICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5vbihFVkVOVF9LRVlET1dOX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChfdGhpczYuX2NvbmZpZy5rZXlib2FyZCAmJiBldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUkMSkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgX3RoaXM2LmhpZGUoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFfdGhpczYuX2NvbmZpZy5rZXlib2FyZCAmJiBldmVudC53aGljaCA9PT0gRVNDQVBFX0tFWUNPREUkMSkge1xuICAgICAgICAgICAgX3RoaXM2Ll90cmlnZ2VyQmFja2Ryb3BUcmFuc2l0aW9uKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24pIHtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLm9mZihFVkVOVF9LRVlET1dOX0RJU01JU1MpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldFJlc2l6ZUV2ZW50ID0gZnVuY3Rpb24gX3NldFJlc2l6ZUV2ZW50KCkge1xuICAgICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc1Nob3duKSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh3aW5kb3cpLm9uKEVWRU5UX1JFU0laRSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzNy5oYW5kbGVVcGRhdGUoZXZlbnQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh3aW5kb3cpLm9mZihFVkVOVF9SRVNJWkUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2hpZGVNb2RhbCA9IGZ1bmN0aW9uIF9oaWRlTW9kYWwoKSB7XG4gICAgICB2YXIgX3RoaXM4ID0gdGhpcztcblxuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbW9kYWwnKTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3JvbGUnKTtcblxuICAgICAgdGhpcy5faXNUcmFuc2l0aW9uaW5nID0gZmFsc2U7XG5cbiAgICAgIHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShkb2N1bWVudC5ib2R5KS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX09QRU4pO1xuXG4gICAgICAgIF90aGlzOC5fcmVzZXRBZGp1c3RtZW50cygpO1xuXG4gICAgICAgIF90aGlzOC5fcmVzZXRTY3JvbGxiYXIoKTtcblxuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oX3RoaXM4Ll9lbGVtZW50KS50cmlnZ2VyKEVWRU5UX0hJRERFTiQyKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3JlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gX3JlbW92ZUJhY2tkcm9wKCkge1xuICAgICAgaWYgKHRoaXMuX2JhY2tkcm9wKSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9iYWNrZHJvcCkucmVtb3ZlKCk7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zaG93QmFja2Ryb3AgPSBmdW5jdGlvbiBfc2hvd0JhY2tkcm9wKGNhbGxiYWNrKSB7XG4gICAgICB2YXIgX3RoaXM5ID0gdGhpcztcblxuICAgICAgdmFyIGFuaW1hdGUgPSAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9GQURFJDEpID8gQ0xBU1NfTkFNRV9GQURFJDEgOiAnJztcblxuICAgICAgaWYgKHRoaXMuX2lzU2hvd24gJiYgdGhpcy5fY29uZmlnLmJhY2tkcm9wKSB7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2JhY2tkcm9wLmNsYXNzTmFtZSA9IENMQVNTX05BTUVfQkFDS0RST1A7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICB0aGlzLl9iYWNrZHJvcC5jbGFzc0xpc3QuYWRkKGFuaW1hdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2JhY2tkcm9wKS5hcHBlbmRUbyhkb2N1bWVudC5ib2R5KTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLm9uKEVWRU5UX0NMSUNLX0RJU01JU1MsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIGlmIChfdGhpczkuX2lnbm9yZUJhY2tkcm9wQ2xpY2spIHtcbiAgICAgICAgICAgIF90aGlzOS5faWdub3JlQmFja2Ryb3BDbGljayA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGV2ZW50LmN1cnJlbnRUYXJnZXQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGhpczkuX3RyaWdnZXJCYWNrZHJvcFRyYW5zaXRpb24oKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGFuaW1hdGUpIHtcbiAgICAgICAgICBVdGlsLnJlZmxvdyh0aGlzLl9iYWNrZHJvcCk7XG4gICAgICAgIH1cblxuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fYmFja2Ryb3ApLmFkZENsYXNzKENMQVNTX05BTUVfU0hPVyQzKTtcblxuICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFhbmltYXRlKSB7XG4gICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2JhY2tkcm9wKTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2JhY2tkcm9wKS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY2FsbGJhY2spLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGJhY2tkcm9wVHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzU2hvd24gJiYgdGhpcy5fYmFja2Ryb3ApIHtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX1NIT1ckMyk7XG5cbiAgICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gY2FsbGJhY2tSZW1vdmUoKSB7XG4gICAgICAgICAgX3RoaXM5Ll9yZW1vdmVCYWNrZHJvcCgpO1xuXG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfRkFERSQxKSkge1xuICAgICAgICAgIHZhciBfYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2JhY2tkcm9wKTtcblxuICAgICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9iYWNrZHJvcCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNhbGxiYWNrUmVtb3ZlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZChfYmFja2Ryb3BUcmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrUmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyB0aGUgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuICAgIC8vIHRvZG8gKGZhdCk6IHRoZXNlIHNob3VsZCBwcm9iYWJseSBiZSByZWZhY3RvcmVkIG91dCBvZiBtb2RhbC5qc1xuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICA7XG5cbiAgICBfcHJvdG8uX2FkanVzdERpYWxvZyA9IGZ1bmN0aW9uIF9hZGp1c3REaWFsb2coKSB7XG4gICAgICB2YXIgaXNNb2RhbE92ZXJmbG93aW5nID0gdGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG4gICAgICBpZiAoIXRoaXMuX2lzQm9keU92ZXJmbG93aW5nICYmIGlzTW9kYWxPdmVyZmxvd2luZykge1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyAmJiAhaXNNb2RhbE92ZXJmbG93aW5nKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fcmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uIF9yZXNldEFkanVzdG1lbnRzKCkge1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdCA9ICcnO1xuICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSAnJztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jaGVja1Njcm9sbGJhciA9IGZ1bmN0aW9uIF9jaGVja1Njcm9sbGJhcigpIHtcbiAgICAgIHZhciByZWN0ID0gZG9jdW1lbnQuYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHRoaXMuX2lzQm9keU92ZXJmbG93aW5nID0gTWF0aC5yb3VuZChyZWN0LmxlZnQgKyByZWN0LnJpZ2h0KSA8IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgdGhpcy5fc2Nyb2xsYmFyV2lkdGggPSB0aGlzLl9nZXRTY3JvbGxiYXJXaWR0aCgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldFNjcm9sbGJhciA9IGZ1bmN0aW9uIF9zZXRTY3JvbGxiYXIoKSB7XG4gICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9pc0JvZHlPdmVyZmxvd2luZykge1xuICAgICAgICAvLyBOb3RlOiBET01Ob2RlLnN0eWxlLnBhZGRpbmdSaWdodCByZXR1cm5zIHRoZSBhY3R1YWwgdmFsdWUgb3IgJycgaWYgbm90IHNldFxuICAgICAgICAvLyAgIHdoaWxlICQoRE9NTm9kZSkuY3NzKCdwYWRkaW5nLXJpZ2h0JykgcmV0dXJucyB0aGUgY2FsY3VsYXRlZCB2YWx1ZSBvciAwIGlmIG5vdCBzZXRcbiAgICAgICAgdmFyIGZpeGVkQ29udGVudCA9IFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9GSVhFRF9DT05URU5UKSk7XG4gICAgICAgIHZhciBzdGlja3lDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX1NUSUNLWV9DT05URU5UKSk7IC8vIEFkanVzdCBmaXhlZCBjb250ZW50IHBhZGRpbmdcblxuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZml4ZWRDb250ZW50KS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgIHZhciBhY3R1YWxQYWRkaW5nID0gZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKGVsZW1lbnQpLmNzcygncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShlbGVtZW50KS5kYXRhKCdwYWRkaW5nLXJpZ2h0JywgYWN0dWFsUGFkZGluZykuY3NzKCdwYWRkaW5nLXJpZ2h0JywgcGFyc2VGbG9hdChjYWxjdWxhdGVkUGFkZGluZykgKyBfdGhpczEwLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgIH0pOyAvLyBBZGp1c3Qgc3RpY2t5IGNvbnRlbnQgbWFyZ2luXG5cbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHN0aWNreUNvbnRlbnQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGFjdHVhbE1hcmdpbiA9IGVsZW1lbnQuc3R5bGUubWFyZ2luUmlnaHQ7XG4gICAgICAgICAgdmFyIGNhbGN1bGF0ZWRNYXJnaW4gPSAkX19kZWZhdWx0WydkZWZhdWx0J10oZWxlbWVudCkuY3NzKCdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZWxlbWVudCkuZGF0YSgnbWFyZ2luLXJpZ2h0JywgYWN0dWFsTWFyZ2luKS5jc3MoJ21hcmdpbi1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZE1hcmdpbikgLSBfdGhpczEwLl9zY3JvbGxiYXJXaWR0aCArIFwicHhcIik7XG4gICAgICAgIH0pOyAvLyBBZGp1c3QgYm9keSBwYWRkaW5nXG5cbiAgICAgICAgdmFyIGFjdHVhbFBhZGRpbmcgPSBkb2N1bWVudC5ib2R5LnN0eWxlLnBhZGRpbmdSaWdodDtcbiAgICAgICAgdmFyIGNhbGN1bGF0ZWRQYWRkaW5nID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKGRvY3VtZW50LmJvZHkpLmNzcygncGFkZGluZy1yaWdodCcpO1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZG9jdW1lbnQuYm9keSkuZGF0YSgncGFkZGluZy1yaWdodCcsIGFjdHVhbFBhZGRpbmcpLmNzcygncGFkZGluZy1yaWdodCcsIHBhcnNlRmxvYXQoY2FsY3VsYXRlZFBhZGRpbmcpICsgdGhpcy5fc2Nyb2xsYmFyV2lkdGggKyBcInB4XCIpO1xuICAgICAgfVxuXG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZG9jdW1lbnQuYm9keSkuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9PUEVOKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9yZXNldFNjcm9sbGJhciA9IGZ1bmN0aW9uIF9yZXNldFNjcm9sbGJhcigpIHtcbiAgICAgIC8vIFJlc3RvcmUgZml4ZWQgY29udGVudCBwYWRkaW5nXG4gICAgICB2YXIgZml4ZWRDb250ZW50ID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX0ZJWEVEX0NPTlRFTlQpKTtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShmaXhlZENvbnRlbnQpLmVhY2goZnVuY3Rpb24gKGluZGV4LCBlbGVtZW50KSB7XG4gICAgICAgIHZhciBwYWRkaW5nID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKGVsZW1lbnQpLmRhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGVsZW1lbnQpLnJlbW92ZURhdGEoJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nID8gcGFkZGluZyA6ICcnO1xuICAgICAgfSk7IC8vIFJlc3RvcmUgc3RpY2t5IGNvbnRlbnRcblxuICAgICAgdmFyIGVsZW1lbnRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiXCIgKyBTRUxFQ1RPUl9TVElDS1lfQ09OVEVOVCkpO1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGVsZW1lbnRzKS5lYWNoKGZ1bmN0aW9uIChpbmRleCwgZWxlbWVudCkge1xuICAgICAgICB2YXIgbWFyZ2luID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKGVsZW1lbnQpLmRhdGEoJ21hcmdpbi1yaWdodCcpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgbWFyZ2luICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShlbGVtZW50KS5jc3MoJ21hcmdpbi1yaWdodCcsIG1hcmdpbikucmVtb3ZlRGF0YSgnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pOyAvLyBSZXN0b3JlIGJvZHkgcGFkZGluZ1xuXG4gICAgICB2YXIgcGFkZGluZyA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShkb2N1bWVudC5ib2R5KS5kYXRhKCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZG9jdW1lbnQuYm9keSkucmVtb3ZlRGF0YSgncGFkZGluZy1yaWdodCcpO1xuICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nID8gcGFkZGluZyA6ICcnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFNjcm9sbGJhcldpZHRoID0gZnVuY3Rpb24gX2dldFNjcm9sbGJhcldpZHRoKCkge1xuICAgICAgLy8gdGh4IGQud2Fsc2hcbiAgICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSBDTEFTU19OQU1FX1NDUk9MTEJBUl9NRUFTVVJFUjtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aDtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aDtcbiAgICB9IC8vIFN0YXRpY1xuICAgIDtcblxuICAgIE1vZGFsLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZywgcmVsYXRlZFRhcmdldCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMpLmRhdGEoREFUQV9LRVkkNSk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSBfZXh0ZW5kcyh7fSwgRGVmYXVsdCQzLCAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcykuZGF0YSgpLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcykuZGF0YShEQVRBX0tFWSQ1LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKHJlbGF0ZWRUYXJnZXQpO1xuICAgICAgICB9IGVsc2UgaWYgKF9jb25maWcuc2hvdykge1xuICAgICAgICAgIGRhdGEuc2hvdyhyZWxhdGVkVGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhNb2RhbCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kNTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDM7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIE1vZGFsO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGRvY3VtZW50KS5vbihFVkVOVF9DTElDS19EQVRBX0FQSSQ1LCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQzLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICB2YXIgX3RoaXMxMSA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0O1xuICAgIHZhciBzZWxlY3RvciA9IFV0aWwuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtcblxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgfVxuXG4gICAgdmFyIGNvbmZpZyA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0YXJnZXQpLmRhdGEoREFUQV9LRVkkNSkgPyAndG9nZ2xlJyA6IF9leHRlbmRzKHt9LCAkX19kZWZhdWx0WydkZWZhdWx0J10odGFyZ2V0KS5kYXRhKCksICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzKS5kYXRhKCkpO1xuXG4gICAgaWYgKHRoaXMudGFnTmFtZSA9PT0gJ0EnIHx8IHRoaXMudGFnTmFtZSA9PT0gJ0FSRUEnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHZhciAkdGFyZ2V0ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRhcmdldCkub25lKEVWRU5UX1NIT1ckMiwgZnVuY3Rpb24gKHNob3dFdmVudCkge1xuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICAvLyBPbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJHRhcmdldC5vbmUoRVZFTlRfSElEREVOJDIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCRfX2RlZmF1bHRbJ2RlZmF1bHQnXShfdGhpczExKS5pcygnOnZpc2libGUnKSkge1xuICAgICAgICAgIF90aGlzMTEuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRhcmdldCksIGNvbmZpZywgdGhpcyk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkNV0gPSBNb2RhbC5falF1ZXJ5SW50ZXJmYWNlO1xuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQ1XS5Db25zdHJ1Y3RvciA9IE1vZGFsO1xuXG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDVdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkNV0gPSBKUVVFUllfTk9fQ09ORkxJQ1QkNTtcbiAgICByZXR1cm4gTW9kYWwuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQm9vdHN0cmFwICh2NC41LjMpOiB0b29scy9zYW5pdGl6ZXIuanNcbiAgICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYWluL0xJQ0VOU0UpXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuICB2YXIgdXJpQXR0cnMgPSBbJ2JhY2tncm91bmQnLCAnY2l0ZScsICdocmVmJywgJ2l0ZW10eXBlJywgJ2xvbmdkZXNjJywgJ3Bvc3RlcicsICdzcmMnLCAneGxpbms6aHJlZiddO1xuICB2YXIgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTiA9IC9eYXJpYS1bXFx3LV0qJC9pO1xuICB2YXIgRGVmYXVsdFdoaXRlbGlzdCA9IHtcbiAgICAvLyBHbG9iYWwgYXR0cmlidXRlcyBhbGxvd2VkIG9uIGFueSBzdXBwbGllZCBlbGVtZW50IGJlbG93LlxuICAgICcqJzogWydjbGFzcycsICdkaXInLCAnaWQnLCAnbGFuZycsICdyb2xlJywgQVJJQV9BVFRSSUJVVEVfUEFUVEVSTl0sXG4gICAgYTogWyd0YXJnZXQnLCAnaHJlZicsICd0aXRsZScsICdyZWwnXSxcbiAgICBhcmVhOiBbXSxcbiAgICBiOiBbXSxcbiAgICBicjogW10sXG4gICAgY29sOiBbXSxcbiAgICBjb2RlOiBbXSxcbiAgICBkaXY6IFtdLFxuICAgIGVtOiBbXSxcbiAgICBocjogW10sXG4gICAgaDE6IFtdLFxuICAgIGgyOiBbXSxcbiAgICBoMzogW10sXG4gICAgaDQ6IFtdLFxuICAgIGg1OiBbXSxcbiAgICBoNjogW10sXG4gICAgaTogW10sXG4gICAgaW1nOiBbJ3NyYycsICdzcmNzZXQnLCAnYWx0JywgJ3RpdGxlJywgJ3dpZHRoJywgJ2hlaWdodCddLFxuICAgIGxpOiBbXSxcbiAgICBvbDogW10sXG4gICAgcDogW10sXG4gICAgcHJlOiBbXSxcbiAgICBzOiBbXSxcbiAgICBzbWFsbDogW10sXG4gICAgc3BhbjogW10sXG4gICAgc3ViOiBbXSxcbiAgICBzdXA6IFtdLFxuICAgIHN0cm9uZzogW10sXG4gICAgdTogW10sXG4gICAgdWw6IFtdXG4gIH07XG4gIC8qKlxuICAgKiBBIHBhdHRlcm4gdGhhdCByZWNvZ25pemVzIGEgY29tbW9ubHkgdXNlZnVsIHN1YnNldCBvZiBVUkxzIHRoYXQgYXJlIHNhZmUuXG4gICAqXG4gICAqIFNob3V0b3V0IHRvIEFuZ3VsYXIgNyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvNy4yLjQvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcbiAgICovXG5cbiAgdmFyIFNBRkVfVVJMX1BBVFRFUk4gPSAvXig/Oig/Omh0dHBzP3xtYWlsdG98ZnRwfHRlbHxmaWxlKTp8W14jJi86P10qKD86WyMvP118JCkpL2dpO1xuICAvKipcbiAgICogQSBwYXR0ZXJuIHRoYXQgbWF0Y2hlcyBzYWZlIGRhdGEgVVJMcy4gT25seSBtYXRjaGVzIGltYWdlLCB2aWRlbyBhbmQgYXVkaW8gdHlwZXMuXG4gICAqXG4gICAqIFNob3V0b3V0IHRvIEFuZ3VsYXIgNyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvNy4yLjQvcGFja2FnZXMvY29yZS9zcmMvc2FuaXRpemF0aW9uL3VybF9zYW5pdGl6ZXIudHNcbiAgICovXG5cbiAgdmFyIERBVEFfVVJMX1BBVFRFUk4gPSAvXmRhdGE6KD86aW1hZ2VcXC8oPzpibXB8Z2lmfGpwZWd8anBnfHBuZ3x0aWZmfHdlYnApfHZpZGVvXFwvKD86bXBlZ3xtcDR8b2dnfHdlYm0pfGF1ZGlvXFwvKD86bXAzfG9nYXxvZ2d8b3B1cykpO2Jhc2U2NCxbXFxkKy9hLXpdKz0qJC9pO1xuXG4gIGZ1bmN0aW9uIGFsbG93ZWRBdHRyaWJ1dGUoYXR0ciwgYWxsb3dlZEF0dHJpYnV0ZUxpc3QpIHtcbiAgICB2YXIgYXR0ck5hbWUgPSBhdHRyLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgICBpZiAoYWxsb3dlZEF0dHJpYnV0ZUxpc3QuaW5kZXhPZihhdHRyTmFtZSkgIT09IC0xKSB7XG4gICAgICBpZiAodXJpQXR0cnMuaW5kZXhPZihhdHRyTmFtZSkgIT09IC0xKSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKGF0dHIubm9kZVZhbHVlLm1hdGNoKFNBRkVfVVJMX1BBVFRFUk4pIHx8IGF0dHIubm9kZVZhbHVlLm1hdGNoKERBVEFfVVJMX1BBVFRFUk4pKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJlZ0V4cCA9IGFsbG93ZWRBdHRyaWJ1dGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoYXR0clJlZ2V4KSB7XG4gICAgICByZXR1cm4gYXR0clJlZ2V4IGluc3RhbmNlb2YgUmVnRXhwO1xuICAgIH0pOyAvLyBDaGVjayBpZiBhIHJlZ3VsYXIgZXhwcmVzc2lvbiB2YWxpZGF0ZXMgdGhlIGF0dHJpYnV0ZS5cblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByZWdFeHAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChhdHRyTmFtZS5tYXRjaChyZWdFeHBbaV0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNhbml0aXplSHRtbCh1bnNhZmVIdG1sLCB3aGl0ZUxpc3QsIHNhbml0aXplRm4pIHtcbiAgICBpZiAodW5zYWZlSHRtbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB1bnNhZmVIdG1sO1xuICAgIH1cblxuICAgIGlmIChzYW5pdGl6ZUZuICYmIHR5cGVvZiBzYW5pdGl6ZUZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gc2FuaXRpemVGbih1bnNhZmVIdG1sKTtcbiAgICB9XG5cbiAgICB2YXIgZG9tUGFyc2VyID0gbmV3IHdpbmRvdy5ET01QYXJzZXIoKTtcbiAgICB2YXIgY3JlYXRlZERvY3VtZW50ID0gZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyh1bnNhZmVIdG1sLCAndGV4dC9odG1sJyk7XG4gICAgdmFyIHdoaXRlbGlzdEtleXMgPSBPYmplY3Qua2V5cyh3aGl0ZUxpc3QpO1xuICAgIHZhciBlbGVtZW50cyA9IFtdLnNsaWNlLmNhbGwoY3JlYXRlZERvY3VtZW50LmJvZHkucXVlcnlTZWxlY3RvckFsbCgnKicpKTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGksIGxlbikge1xuICAgICAgdmFyIGVsID0gZWxlbWVudHNbaV07XG4gICAgICB2YXIgZWxOYW1lID0gZWwubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgICAgaWYgKHdoaXRlbGlzdEtleXMuaW5kZXhPZihlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSA9PT0gLTEpIHtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XG4gICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICB9XG5cbiAgICAgIHZhciBhdHRyaWJ1dGVMaXN0ID0gW10uc2xpY2UuY2FsbChlbC5hdHRyaWJ1dGVzKTtcbiAgICAgIHZhciB3aGl0ZWxpc3RlZEF0dHJpYnV0ZXMgPSBbXS5jb25jYXQod2hpdGVMaXN0WycqJ10gfHwgW10sIHdoaXRlTGlzdFtlbE5hbWVdIHx8IFtdKTtcbiAgICAgIGF0dHJpYnV0ZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikge1xuICAgICAgICBpZiAoIWFsbG93ZWRBdHRyaWJ1dGUoYXR0ciwgd2hpdGVsaXN0ZWRBdHRyaWJ1dGVzKSkge1xuICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyLm5vZGVOYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChpKTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiY29udGludWVcIikgY29udGludWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZWREb2N1bWVudC5ib2R5LmlubmVySFRNTDtcbiAgfVxuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ29uc3RhbnRzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgTkFNRSQ2ID0gJ3Rvb2x0aXAnO1xuICB2YXIgVkVSU0lPTiQ2ID0gJzQuNS4zJztcbiAgdmFyIERBVEFfS0VZJDYgPSAnYnMudG9vbHRpcCc7XG4gIHZhciBFVkVOVF9LRVkkNiA9IFwiLlwiICsgREFUQV9LRVkkNjtcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCQ2ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkNl07XG4gIHZhciBDTEFTU19QUkVGSVggPSAnYnMtdG9vbHRpcCc7XG4gIHZhciBCU0NMU19QUkVGSVhfUkVHRVggPSBuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIgKyBDTEFTU19QUkVGSVggKyBcIlxcXFxTK1wiLCAnZycpO1xuICB2YXIgRElTQUxMT1dFRF9BVFRSSUJVVEVTID0gWydzYW5pdGl6ZScsICd3aGl0ZUxpc3QnLCAnc2FuaXRpemVGbiddO1xuICB2YXIgRGVmYXVsdFR5cGUkNCA9IHtcbiAgICBhbmltYXRpb246ICdib29sZWFuJyxcbiAgICB0ZW1wbGF0ZTogJ3N0cmluZycsXG4gICAgdGl0bGU6ICcoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pJyxcbiAgICB0cmlnZ2VyOiAnc3RyaW5nJyxcbiAgICBkZWxheTogJyhudW1iZXJ8b2JqZWN0KScsXG4gICAgaHRtbDogJ2Jvb2xlYW4nLFxuICAgIHNlbGVjdG9yOiAnKHN0cmluZ3xib29sZWFuKScsXG4gICAgcGxhY2VtZW50OiAnKHN0cmluZ3xmdW5jdGlvbiknLFxuICAgIG9mZnNldDogJyhudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKScsXG4gICAgY29udGFpbmVyOiAnKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pJyxcbiAgICBmYWxsYmFja1BsYWNlbWVudDogJyhzdHJpbmd8YXJyYXkpJyxcbiAgICBib3VuZGFyeTogJyhzdHJpbmd8ZWxlbWVudCknLFxuICAgIHNhbml0aXplOiAnYm9vbGVhbicsXG4gICAgc2FuaXRpemVGbjogJyhudWxsfGZ1bmN0aW9uKScsXG4gICAgd2hpdGVMaXN0OiAnb2JqZWN0JyxcbiAgICBwb3BwZXJDb25maWc6ICcobnVsbHxvYmplY3QpJ1xuICB9O1xuICB2YXIgQXR0YWNobWVudE1hcCA9IHtcbiAgICBBVVRPOiAnYXV0bycsXG4gICAgVE9QOiAndG9wJyxcbiAgICBSSUdIVDogJ3JpZ2h0JyxcbiAgICBCT1RUT006ICdib3R0b20nLFxuICAgIExFRlQ6ICdsZWZ0J1xuICB9O1xuICB2YXIgRGVmYXVsdCQ0ID0ge1xuICAgIGFuaW1hdGlvbjogdHJ1ZSxcbiAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj4nICsgJzxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PicgKyAnPGRpdiBjbGFzcz1cInRvb2x0aXAtaW5uZXJcIj48L2Rpdj48L2Rpdj4nLFxuICAgIHRyaWdnZXI6ICdob3ZlciBmb2N1cycsXG4gICAgdGl0bGU6ICcnLFxuICAgIGRlbGF5OiAwLFxuICAgIGh0bWw6IGZhbHNlLFxuICAgIHNlbGVjdG9yOiBmYWxzZSxcbiAgICBwbGFjZW1lbnQ6ICd0b3AnLFxuICAgIG9mZnNldDogMCxcbiAgICBjb250YWluZXI6IGZhbHNlLFxuICAgIGZhbGxiYWNrUGxhY2VtZW50OiAnZmxpcCcsXG4gICAgYm91bmRhcnk6ICdzY3JvbGxQYXJlbnQnLFxuICAgIHNhbml0aXplOiB0cnVlLFxuICAgIHNhbml0aXplRm46IG51bGwsXG4gICAgd2hpdGVMaXN0OiBEZWZhdWx0V2hpdGVsaXN0LFxuICAgIHBvcHBlckNvbmZpZzogbnVsbFxuICB9O1xuICB2YXIgSE9WRVJfU1RBVEVfU0hPVyA9ICdzaG93JztcbiAgdmFyIEhPVkVSX1NUQVRFX09VVCA9ICdvdXQnO1xuICB2YXIgRXZlbnQgPSB7XG4gICAgSElERTogXCJoaWRlXCIgKyBFVkVOVF9LRVkkNixcbiAgICBISURERU46IFwiaGlkZGVuXCIgKyBFVkVOVF9LRVkkNixcbiAgICBTSE9XOiBcInNob3dcIiArIEVWRU5UX0tFWSQ2LFxuICAgIFNIT1dOOiBcInNob3duXCIgKyBFVkVOVF9LRVkkNixcbiAgICBJTlNFUlRFRDogXCJpbnNlcnRlZFwiICsgRVZFTlRfS0VZJDYsXG4gICAgQ0xJQ0s6IFwiY2xpY2tcIiArIEVWRU5UX0tFWSQ2LFxuICAgIEZPQ1VTSU46IFwiZm9jdXNpblwiICsgRVZFTlRfS0VZJDYsXG4gICAgRk9DVVNPVVQ6IFwiZm9jdXNvdXRcIiArIEVWRU5UX0tFWSQ2LFxuICAgIE1PVVNFRU5URVI6IFwibW91c2VlbnRlclwiICsgRVZFTlRfS0VZJDYsXG4gICAgTU9VU0VMRUFWRTogXCJtb3VzZWxlYXZlXCIgKyBFVkVOVF9LRVkkNlxuICB9O1xuICB2YXIgQ0xBU1NfTkFNRV9GQURFJDIgPSAnZmFkZSc7XG4gIHZhciBDTEFTU19OQU1FX1NIT1ckNCA9ICdzaG93JztcbiAgdmFyIFNFTEVDVE9SX1RPT0xUSVBfSU5ORVIgPSAnLnRvb2x0aXAtaW5uZXInO1xuICB2YXIgU0VMRUNUT1JfQVJST1cgPSAnLmFycm93JztcbiAgdmFyIFRSSUdHRVJfSE9WRVIgPSAnaG92ZXInO1xuICB2YXIgVFJJR0dFUl9GT0NVUyA9ICdmb2N1cyc7XG4gIHZhciBUUklHR0VSX0NMSUNLID0gJ2NsaWNrJztcbiAgdmFyIFRSSUdHRVJfTUFOVUFMID0gJ21hbnVhbCc7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIFRvb2x0aXAgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRvb2x0aXAoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICBpZiAodHlwZW9mIFBvcHBlcl9fZGVmYXVsdFsnZGVmYXVsdCddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb290c3RyYXBcXCdzIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcvKScpO1xuICAgICAgfSAvLyBwcml2YXRlXG5cblxuICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX3RpbWVvdXQgPSAwO1xuICAgICAgdGhpcy5faG92ZXJTdGF0ZSA9ICcnO1xuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IHt9O1xuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDsgLy8gUHJvdGVjdGVkXG5cbiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICB0aGlzLmNvbmZpZyA9IHRoaXMuX2dldENvbmZpZyhjb25maWcpO1xuICAgICAgdGhpcy50aXAgPSBudWxsO1xuXG4gICAgICB0aGlzLl9zZXRMaXN0ZW5lcnMoKTtcbiAgICB9IC8vIEdldHRlcnNcblxuXG4gICAgdmFyIF9wcm90byA9IFRvb2x0aXAucHJvdG90eXBlO1xuXG4gICAgLy8gUHVibGljXG4gICAgX3Byb3RvLmVuYWJsZSA9IGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIF9wcm90by5kaXNhYmxlID0gZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IGZhbHNlO1xuICAgIH07XG5cbiAgICBfcHJvdG8udG9nZ2xlRW5hYmxlZCA9IGZ1bmN0aW9uIHRvZ2dsZUVuYWJsZWQoKSB7XG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSAhdGhpcy5faXNFbmFibGVkO1xuICAgIH07XG5cbiAgICBfcHJvdG8udG9nZ2xlID0gZnVuY3Rpb24gdG9nZ2xlKGV2ZW50KSB7XG4gICAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XG4gICAgICAgIHZhciBjb250ZXh0ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSk7XG5cbiAgICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXksIGNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5fYWN0aXZlVHJpZ2dlci5jbGljayA9ICFjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyLmNsaWNrO1xuXG4gICAgICAgIGlmIChjb250ZXh0Ll9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkpIHtcbiAgICAgICAgICBjb250ZXh0Ll9lbnRlcihudWxsLCBjb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250ZXh0Ll9sZWF2ZShudWxsLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9TSE9XJDQpKSB7XG4gICAgICAgICAgdGhpcy5fbGVhdmUobnVsbCwgdGhpcyk7XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9lbnRlcihudWxsLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLnJlbW92ZURhdGEodGhpcy5lbGVtZW50LCB0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZKTtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLmVsZW1lbnQpLm9mZih0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSk7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5lbGVtZW50KS5jbG9zZXN0KCcubW9kYWwnKS5vZmYoJ2hpZGUuYnMubW9kYWwnLCB0aGlzLl9oaWRlTW9kYWxIYW5kbGVyKTtcblxuICAgICAgaWYgKHRoaXMudGlwKSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLnRpcCkucmVtb3ZlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzRW5hYmxlZCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lb3V0ID0gbnVsbDtcbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSBudWxsO1xuICAgICAgdGhpcy5fYWN0aXZlVHJpZ2dlciA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLl9wb3BwZXIpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcG9wcGVyID0gbnVsbDtcbiAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLmNvbmZpZyA9IG51bGw7XG4gICAgICB0aGlzLnRpcCA9IG51bGw7XG4gICAgfTtcblxuICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICgkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5lbGVtZW50KS5jc3MoJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGxlYXNlIHVzZSBzaG93IG9uIHZpc2libGUgZWxlbWVudHMnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHNob3dFdmVudCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LlNIT1cpO1xuXG4gICAgICBpZiAodGhpcy5pc1dpdGhDb250ZW50KCkgJiYgdGhpcy5faXNFbmFibGVkKSB7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcbiAgICAgICAgdmFyIHNoYWRvd1Jvb3QgPSBVdGlsLmZpbmRTaGFkb3dSb290KHRoaXMuZWxlbWVudCk7XG4gICAgICAgIHZhciBpc0luVGhlRG9tID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLmNvbnRhaW5zKHNoYWRvd1Jvb3QgIT09IG51bGwgPyBzaGFkb3dSb290IDogdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLmVsZW1lbnQpO1xuXG4gICAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgfHwgIWlzSW5UaGVEb20pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICAgIHZhciB0aXBJZCA9IFV0aWwuZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7XG4gICAgICAgIHRpcC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGlwSWQpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5JywgdGlwSWQpO1xuICAgICAgICB0aGlzLnNldENvbnRlbnQoKTtcblxuICAgICAgICBpZiAodGhpcy5jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRpcCkuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9GQURFJDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBsYWNlbWVudCA9IHR5cGVvZiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQgPT09ICdmdW5jdGlvbicgPyB0aGlzLmNvbmZpZy5wbGFjZW1lbnQuY2FsbCh0aGlzLCB0aXAsIHRoaXMuZWxlbWVudCkgOiB0aGlzLmNvbmZpZy5wbGFjZW1lbnQ7XG5cbiAgICAgICAgdmFyIGF0dGFjaG1lbnQgPSB0aGlzLl9nZXRBdHRhY2htZW50KHBsYWNlbWVudCk7XG5cbiAgICAgICAgdGhpcy5hZGRBdHRhY2htZW50Q2xhc3MoYXR0YWNobWVudCk7XG5cbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMuX2dldENvbnRhaW5lcigpO1xuXG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aXApLmRhdGEodGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSwgdGhpcyk7XG5cbiAgICAgICAgaWYgKCEkX19kZWZhdWx0WydkZWZhdWx0J10uY29udGFpbnModGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCB0aGlzLnRpcCkpIHtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGlwKS5hcHBlbmRUbyhjb250YWluZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuZWxlbWVudCkudHJpZ2dlcih0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LklOU0VSVEVEKTtcbiAgICAgICAgdGhpcy5fcG9wcGVyID0gbmV3IFBvcHBlcl9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuZWxlbWVudCwgdGlwLCB0aGlzLl9nZXRQb3BwZXJDb25maWcoYXR0YWNobWVudCkpO1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGlwKS5hZGRDbGFzcyhDTEFTU19OQU1FX1NIT1ckNCk7IC8vIElmIHRoaXMgaXMgYSB0b3VjaC1lbmFibGVkIGRldmljZSB3ZSBhZGQgZXh0cmFcbiAgICAgICAgLy8gZW1wdHkgbW91c2VvdmVyIGxpc3RlbmVycyB0byB0aGUgYm9keSdzIGltbWVkaWF0ZSBjaGlsZHJlbjtcbiAgICAgICAgLy8gb25seSBuZWVkZWQgYmVjYXVzZSBvZiBicm9rZW4gZXZlbnQgZGVsZWdhdGlvbiBvbiBpT1NcbiAgICAgICAgLy8gaHR0cHM6Ly93d3cucXVpcmtzbW9kZS5vcmcvYmxvZy9hcmNoaXZlcy8yMDE0LzAyL21vdXNlX2V2ZW50X2J1Yi5odG1sXG5cbiAgICAgICAgaWYgKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShkb2N1bWVudC5ib2R5KS5jaGlsZHJlbigpLm9uKCdtb3VzZW92ZXInLCBudWxsLCAkX19kZWZhdWx0WydkZWZhdWx0J10ubm9vcCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgICBpZiAoX3RoaXMuY29uZmlnLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuX2ZpeFRyYW5zaXRpb24oKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgcHJldkhvdmVyU3RhdGUgPSBfdGhpcy5faG92ZXJTdGF0ZTtcbiAgICAgICAgICBfdGhpcy5faG92ZXJTdGF0ZSA9IG51bGw7XG4gICAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKF90aGlzLmVsZW1lbnQpLnRyaWdnZXIoX3RoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPV04pO1xuXG4gICAgICAgICAgaWYgKHByZXZIb3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9PVVQpIHtcbiAgICAgICAgICAgIF90aGlzLl9sZWF2ZShudWxsLCBfdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICgkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy50aXApLmhhc0NsYXNzKENMQVNTX05BTUVfRkFERSQyKSkge1xuICAgICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMudGlwKTtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy50aXApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5oaWRlID0gZnVuY3Rpb24gaGlkZShjYWxsYmFjaykge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciB0aXAgPSB0aGlzLmdldFRpcEVsZW1lbnQoKTtcbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10uRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIGlmIChfdGhpczIuX2hvdmVyU3RhdGUgIT09IEhPVkVSX1NUQVRFX1NIT1cgJiYgdGlwLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICB0aXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aXApO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLl9jbGVhblRpcENsYXNzKCk7XG5cbiAgICAgICAgX3RoaXMyLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRlc2NyaWJlZGJ5Jyk7XG5cbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKF90aGlzMi5lbGVtZW50KS50cmlnZ2VyKF90aGlzMi5jb25zdHJ1Y3Rvci5FdmVudC5ISURERU4pO1xuXG4gICAgICAgIGlmIChfdGhpczIuX3BvcHBlciAhPT0gbnVsbCkge1xuICAgICAgICAgIF90aGlzMi5fcG9wcGVyLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoaGlkZUV2ZW50KTtcblxuICAgICAgaWYgKGhpZGVFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aXApLnJlbW92ZUNsYXNzKENMQVNTX05BTUVfU0hPVyQ0KTsgLy8gSWYgdGhpcyBpcyBhIHRvdWNoLWVuYWJsZWQgZGV2aWNlIHdlIHJlbW92ZSB0aGUgZXh0cmFcbiAgICAgIC8vIGVtcHR5IG1vdXNlb3ZlciBsaXN0ZW5lcnMgd2UgYWRkZWQgZm9yIGlPUyBzdXBwb3J0XG5cbiAgICAgIGlmICgnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGRvY3VtZW50LmJvZHkpLmNoaWxkcmVuKCkub2ZmKCdtb3VzZW92ZXInLCBudWxsLCAkX19kZWZhdWx0WydkZWZhdWx0J10ubm9vcCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9DTElDS10gPSBmYWxzZTtcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9GT0NVU10gPSBmYWxzZTtcbiAgICAgIHRoaXMuX2FjdGl2ZVRyaWdnZXJbVFJJR0dFUl9IT1ZFUl0gPSBmYWxzZTtcblxuICAgICAgaWYgKCRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLnRpcCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9GQURFJDIpKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRpcCk7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aXApLm9uZShVdGlsLlRSQU5TSVRJT05fRU5ELCBjb21wbGV0ZSkuZW11bGF0ZVRyYW5zaXRpb25FbmQodHJhbnNpdGlvbkR1cmF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hvdmVyU3RhdGUgPSAnJztcbiAgICB9O1xuXG4gICAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAgIGlmICh0aGlzLl9wb3BwZXIgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fcG9wcGVyLnNjaGVkdWxlVXBkYXRlKCk7XG4gICAgICB9XG4gICAgfSAvLyBQcm90ZWN0ZWRcbiAgICA7XG5cbiAgICBfcHJvdG8uaXNXaXRoQ29udGVudCA9IGZ1bmN0aW9uIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmdldFRpdGxlKCkpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uYWRkQXR0YWNobWVudENsYXNzID0gZnVuY3Rpb24gYWRkQXR0YWNobWVudENsYXNzKGF0dGFjaG1lbnQpIHtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoQ0xBU1NfUFJFRklYICsgXCItXCIgKyBhdHRhY2htZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldFRpcEVsZW1lbnQgPSBmdW5jdGlvbiBnZXRUaXBFbGVtZW50KCkge1xuICAgICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5jb25maWcudGVtcGxhdGUpWzBdO1xuICAgICAgcmV0dXJuIHRoaXMudGlwO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0Q29udGVudCA9IGZ1bmN0aW9uIHNldENvbnRlbnQoKSB7XG4gICAgICB2YXIgdGlwID0gdGhpcy5nZXRUaXBFbGVtZW50KCk7XG4gICAgICB0aGlzLnNldEVsZW1lbnRDb250ZW50KCRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aXAucXVlcnlTZWxlY3RvckFsbChTRUxFQ1RPUl9UT09MVElQX0lOTkVSKSksIHRoaXMuZ2V0VGl0bGUoKSk7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGlwKS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0ZBREUkMiArIFwiIFwiICsgQ0xBU1NfTkFNRV9TSE9XJDQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0RWxlbWVudENvbnRlbnQgPSBmdW5jdGlvbiBzZXRFbGVtZW50Q29udGVudCgkZWxlbWVudCwgY29udGVudCkge1xuICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnb2JqZWN0JyAmJiAoY29udGVudC5ub2RlVHlwZSB8fCBjb250ZW50LmpxdWVyeSkpIHtcbiAgICAgICAgLy8gQ29udGVudCBpcyBhIERPTSBub2RlIG9yIGEgalF1ZXJ5XG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5odG1sKSB7XG4gICAgICAgICAgaWYgKCEkX19kZWZhdWx0WydkZWZhdWx0J10oY29udGVudCkucGFyZW50KCkuaXMoJGVsZW1lbnQpKSB7XG4gICAgICAgICAgICAkZWxlbWVudC5lbXB0eSgpLmFwcGVuZChjb250ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgJGVsZW1lbnQudGV4dCgkX19kZWZhdWx0WydkZWZhdWx0J10oY29udGVudCkudGV4dCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY29uZmlnLmh0bWwpIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZmlnLnNhbml0aXplKSB7XG4gICAgICAgICAgY29udGVudCA9IHNhbml0aXplSHRtbChjb250ZW50LCB0aGlzLmNvbmZpZy53aGl0ZUxpc3QsIHRoaXMuY29uZmlnLnNhbml0aXplRm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgJGVsZW1lbnQuaHRtbChjb250ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRlbGVtZW50LnRleHQoY29udGVudCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5nZXRUaXRsZSA9IGZ1bmN0aW9uIGdldFRpdGxlKCkge1xuICAgICAgdmFyIHRpdGxlID0gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1vcmlnaW5hbC10aXRsZScpO1xuXG4gICAgICBpZiAoIXRpdGxlKSB7XG4gICAgICAgIHRpdGxlID0gdHlwZW9mIHRoaXMuY29uZmlnLnRpdGxlID09PSAnZnVuY3Rpb24nID8gdGhpcy5jb25maWcudGl0bGUuY2FsbCh0aGlzLmVsZW1lbnQpIDogdGhpcy5jb25maWcudGl0bGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aXRsZTtcbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2dldFBvcHBlckNvbmZpZyA9IGZ1bmN0aW9uIF9nZXRQb3BwZXJDb25maWcoYXR0YWNobWVudCkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBkZWZhdWx0QnNDb25maWcgPSB7XG4gICAgICAgIHBsYWNlbWVudDogYXR0YWNobWVudCxcbiAgICAgICAgbW9kaWZpZXJzOiB7XG4gICAgICAgICAgb2Zmc2V0OiB0aGlzLl9nZXRPZmZzZXQoKSxcbiAgICAgICAgICBmbGlwOiB7XG4gICAgICAgICAgICBiZWhhdmlvcjogdGhpcy5jb25maWcuZmFsbGJhY2tQbGFjZW1lbnRcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFycm93OiB7XG4gICAgICAgICAgICBlbGVtZW50OiBTRUxFQ1RPUl9BUlJPV1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcHJldmVudE92ZXJmbG93OiB7XG4gICAgICAgICAgICBib3VuZGFyaWVzRWxlbWVudDogdGhpcy5jb25maWcuYm91bmRhcnlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZShkYXRhKSB7XG4gICAgICAgICAgaWYgKGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgIT09IGRhdGEucGxhY2VtZW50KSB7XG4gICAgICAgICAgICBfdGhpczMuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZShkYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIF90aGlzMy5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBkZWZhdWx0QnNDb25maWcsIHRoaXMuY29uZmlnLnBvcHBlckNvbmZpZyk7XG4gICAgfTtcblxuICAgIF9wcm90by5fZ2V0T2Zmc2V0ID0gZnVuY3Rpb24gX2dldE9mZnNldCgpIHtcbiAgICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgICB2YXIgb2Zmc2V0ID0ge307XG5cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5jb25maWcub2Zmc2V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9mZnNldC5mbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgZGF0YS5vZmZzZXRzID0gX2V4dGVuZHMoe30sIGRhdGEub2Zmc2V0cywgX3RoaXM0LmNvbmZpZy5vZmZzZXQoZGF0YS5vZmZzZXRzLCBfdGhpczQuZWxlbWVudCkgfHwge30pO1xuICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2Zmc2V0Lm9mZnNldCA9IHRoaXMuY29uZmlnLm9mZnNldDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9mZnNldDtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXRDb250YWluZXIgPSBmdW5jdGlvbiBfZ2V0Q29udGFpbmVyKCkge1xuICAgICAgaWYgKHRoaXMuY29uZmlnLmNvbnRhaW5lciA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHk7XG4gICAgICB9XG5cbiAgICAgIGlmIChVdGlsLmlzRWxlbWVudCh0aGlzLmNvbmZpZy5jb250YWluZXIpKSB7XG4gICAgICAgIHJldHVybiAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5jb25maWcuY29udGFpbmVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShkb2N1bWVudCkuZmluZCh0aGlzLmNvbmZpZy5jb250YWluZXIpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldEF0dGFjaG1lbnQgPSBmdW5jdGlvbiBfZ2V0QXR0YWNobWVudChwbGFjZW1lbnQpIHtcbiAgICAgIHJldHVybiBBdHRhY2htZW50TWFwW3BsYWNlbWVudC50b1VwcGVyQ2FzZSgpXTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9zZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBfc2V0TGlzdGVuZXJzKCkge1xuICAgICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICAgIHZhciB0cmlnZ2VycyA9IHRoaXMuY29uZmlnLnRyaWdnZXIuc3BsaXQoJyAnKTtcbiAgICAgIHRyaWdnZXJzLmZvckVhY2goZnVuY3Rpb24gKHRyaWdnZXIpIHtcbiAgICAgICAgaWYgKHRyaWdnZXIgPT09ICdjbGljaycpIHtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oX3RoaXM1LmVsZW1lbnQpLm9uKF90aGlzNS5jb25zdHJ1Y3Rvci5FdmVudC5DTElDSywgX3RoaXM1LmNvbmZpZy5zZWxlY3RvciwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gX3RoaXM1LnRvZ2dsZShldmVudCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHJpZ2dlciAhPT0gVFJJR0dFUl9NQU5VQUwpIHtcbiAgICAgICAgICB2YXIgZXZlbnRJbiA9IHRyaWdnZXIgPT09IFRSSUdHRVJfSE9WRVIgPyBfdGhpczUuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUiA6IF90aGlzNS5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU0lOO1xuICAgICAgICAgIHZhciBldmVudE91dCA9IHRyaWdnZXIgPT09IFRSSUdHRVJfSE9WRVIgPyBfdGhpczUuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VMRUFWRSA6IF90aGlzNS5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU09VVDtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oX3RoaXM1LmVsZW1lbnQpLm9uKGV2ZW50SW4sIF90aGlzNS5jb25maWcuc2VsZWN0b3IsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIF90aGlzNS5fZW50ZXIoZXZlbnQpO1xuICAgICAgICAgIH0pLm9uKGV2ZW50T3V0LCBfdGhpczUuY29uZmlnLnNlbGVjdG9yLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpczUuX2xlYXZlKGV2ZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2hpZGVNb2RhbEhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChfdGhpczUuZWxlbWVudCkge1xuICAgICAgICAgIF90aGlzNS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLmVsZW1lbnQpLmNsb3Nlc3QoJy5tb2RhbCcpLm9uKCdoaWRlLmJzLm1vZGFsJywgdGhpcy5faGlkZU1vZGFsSGFuZGxlcik7XG5cbiAgICAgIGlmICh0aGlzLmNvbmZpZy5zZWxlY3Rvcikge1xuICAgICAgICB0aGlzLmNvbmZpZyA9IF9leHRlbmRzKHt9LCB0aGlzLmNvbmZpZywge1xuICAgICAgICAgIHRyaWdnZXI6ICdtYW51YWwnLFxuICAgICAgICAgIHNlbGVjdG9yOiAnJ1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2ZpeFRpdGxlKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fZml4VGl0bGUgPSBmdW5jdGlvbiBfZml4VGl0bGUoKSB7XG4gICAgICB2YXIgdGl0bGVUeXBlID0gdHlwZW9mIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtb3JpZ2luYWwtdGl0bGUnKTtcblxuICAgICAgaWYgKHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykgfHwgdGl0bGVUeXBlICE9PSAnc3RyaW5nJykge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW9yaWdpbmFsLXRpdGxlJywgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZSgndGl0bGUnKSB8fCAnJyk7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgJycpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2VudGVyID0gZnVuY3Rpb24gX2VudGVyKGV2ZW50LCBjb250ZXh0KSB7XG4gICAgICB2YXIgZGF0YUtleSA9IHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7XG4gICAgICBjb250ZXh0ID0gY29udGV4dCB8fCAkX19kZWZhdWx0WydkZWZhdWx0J10oZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5KTtcblxuICAgICAgaWYgKCFjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQgPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihldmVudC5jdXJyZW50VGFyZ2V0LCB0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKTtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmRhdGEoZGF0YUtleSwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudCkge1xuICAgICAgICBjb250ZXh0Ll9hY3RpdmVUcmlnZ2VyW2V2ZW50LnR5cGUgPT09ICdmb2N1c2luJyA/IFRSSUdHRVJfRk9DVVMgOiBUUklHR0VSX0hPVkVSXSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICgkX19kZWZhdWx0WydkZWZhdWx0J10oY29udGV4dC5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKENMQVNTX05BTUVfU0hPVyQ0KSB8fCBjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9TSE9XKSB7XG4gICAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIT1ZFUl9TVEFURV9TSE9XO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNsZWFyVGltZW91dChjb250ZXh0Ll90aW1lb3V0KTtcbiAgICAgIGNvbnRleHQuX2hvdmVyU3RhdGUgPSBIT1ZFUl9TVEFURV9TSE9XO1xuXG4gICAgICBpZiAoIWNvbnRleHQuY29uZmlnLmRlbGF5IHx8ICFjb250ZXh0LmNvbmZpZy5kZWxheS5zaG93KSB7XG4gICAgICAgIGNvbnRleHQuc2hvdygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuX2hvdmVyU3RhdGUgPT09IEhPVkVSX1NUQVRFX1NIT1cpIHtcbiAgICAgICAgICBjb250ZXh0LnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuc2hvdyk7XG4gICAgfTtcblxuICAgIF9wcm90by5fbGVhdmUgPSBmdW5jdGlvbiBfbGVhdmUoZXZlbnQsIGNvbnRleHQpIHtcbiAgICAgIHZhciBkYXRhS2V5ID0gdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0IHx8ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShldmVudC5jdXJyZW50VGFyZ2V0KS5kYXRhKGRhdGFLZXkpO1xuXG4gICAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dCA9IG5ldyB0aGlzLmNvbnN0cnVjdG9yKGV2ZW50LmN1cnJlbnRUYXJnZXQsIHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpO1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZXZlbnQuY3VycmVudFRhcmdldCkuZGF0YShkYXRhS2V5LCBjb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50KSB7XG4gICAgICAgIGNvbnRleHQuX2FjdGl2ZVRyaWdnZXJbZXZlbnQudHlwZSA9PT0gJ2ZvY3Vzb3V0JyA/IFRSSUdHRVJfRk9DVVMgOiBUUklHR0VSX0hPVkVSXSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29udGV4dC5faXNXaXRoQWN0aXZlVHJpZ2dlcigpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY2xlYXJUaW1lb3V0KGNvbnRleHQuX3RpbWVvdXQpO1xuICAgICAgY29udGV4dC5faG92ZXJTdGF0ZSA9IEhPVkVSX1NUQVRFX09VVDtcblxuICAgICAgaWYgKCFjb250ZXh0LmNvbmZpZy5kZWxheSB8fCAhY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSkge1xuICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll90aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChjb250ZXh0Ll9ob3ZlclN0YXRlID09PSBIT1ZFUl9TVEFURV9PVVQpIHtcbiAgICAgICAgICBjb250ZXh0LmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSwgY29udGV4dC5jb25maWcuZGVsYXkuaGlkZSk7XG4gICAgfTtcblxuICAgIF9wcm90by5faXNXaXRoQWN0aXZlVHJpZ2dlciA9IGZ1bmN0aW9uIF9pc1dpdGhBY3RpdmVUcmlnZ2VyKCkge1xuICAgICAgZm9yICh2YXIgdHJpZ2dlciBpbiB0aGlzLl9hY3RpdmVUcmlnZ2VyKSB7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmVUcmlnZ2VyW3RyaWdnZXJdKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICB2YXIgZGF0YUF0dHJpYnV0ZXMgPSAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5lbGVtZW50KS5kYXRhKCk7XG4gICAgICBPYmplY3Qua2V5cyhkYXRhQXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoZGF0YUF0dHIpIHtcbiAgICAgICAgaWYgKERJU0FMTE9XRURfQVRUUklCVVRFUy5pbmRleE9mKGRhdGFBdHRyKSAhPT0gLTEpIHtcbiAgICAgICAgICBkZWxldGUgZGF0YUF0dHJpYnV0ZXNbZGF0YUF0dHJdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNvbmZpZyA9IF9leHRlbmRzKHt9LCB0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsIGRhdGFBdHRyaWJ1dGVzLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLmRlbGF5ID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25maWcuZGVsYXkgPSB7XG4gICAgICAgICAgc2hvdzogY29uZmlnLmRlbGF5LFxuICAgICAgICAgIGhpZGU6IGNvbmZpZy5kZWxheVxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy50aXRsZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uZmlnLnRpdGxlID0gY29uZmlnLnRpdGxlLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY29uZmlnLmNvbnRlbnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbmZpZy5jb250ZW50ID0gY29uZmlnLmNvbnRlbnQudG9TdHJpbmcoKTtcbiAgICAgIH1cblxuICAgICAgVXRpbC50eXBlQ2hlY2tDb25maWcoTkFNRSQ2LCBjb25maWcsIHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpO1xuXG4gICAgICBpZiAoY29uZmlnLnNhbml0aXplKSB7XG4gICAgICAgIGNvbmZpZy50ZW1wbGF0ZSA9IHNhbml0aXplSHRtbChjb25maWcudGVtcGxhdGUsIGNvbmZpZy53aGl0ZUxpc3QsIGNvbmZpZy5zYW5pdGl6ZUZuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbmZpZztcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9nZXREZWxlZ2F0ZUNvbmZpZyA9IGZ1bmN0aW9uIF9nZXREZWxlZ2F0ZUNvbmZpZygpIHtcbiAgICAgIHZhciBjb25maWcgPSB7fTtcblxuICAgICAgaWYgKHRoaXMuY29uZmlnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNvbmZpZykge1xuICAgICAgICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRba2V5XSAhPT0gdGhpcy5jb25maWdba2V5XSkge1xuICAgICAgICAgICAgY29uZmlnW2tleV0gPSB0aGlzLmNvbmZpZ1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NsZWFuVGlwQ2xhc3MgPSBmdW5jdGlvbiBfY2xlYW5UaXBDbGFzcygpIHtcbiAgICAgIHZhciAkdGlwID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTtcbiAgICAgIHZhciB0YWJDbGFzcyA9ICR0aXAuYXR0cignY2xhc3MnKS5tYXRjaChCU0NMU19QUkVGSVhfUkVHRVgpO1xuXG4gICAgICBpZiAodGFiQ2xhc3MgIT09IG51bGwgJiYgdGFiQ2xhc3MubGVuZ3RoKSB7XG4gICAgICAgICR0aXAucmVtb3ZlQ2xhc3ModGFiQ2xhc3Muam9pbignJykpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSA9IGZ1bmN0aW9uIF9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UocG9wcGVyRGF0YSkge1xuICAgICAgdGhpcy50aXAgPSBwb3BwZXJEYXRhLmluc3RhbmNlLnBvcHBlcjtcblxuICAgICAgdGhpcy5fY2xlYW5UaXBDbGFzcygpO1xuXG4gICAgICB0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHBvcHBlckRhdGEucGxhY2VtZW50KSk7XG4gICAgfTtcblxuICAgIF9wcm90by5fZml4VHJhbnNpdGlvbiA9IGZ1bmN0aW9uIF9maXhUcmFuc2l0aW9uKCkge1xuICAgICAgdmFyIHRpcCA9IHRoaXMuZ2V0VGlwRWxlbWVudCgpO1xuICAgICAgdmFyIGluaXRDb25maWdBbmltYXRpb24gPSB0aGlzLmNvbmZpZy5hbmltYXRpb247XG5cbiAgICAgIGlmICh0aXAuZ2V0QXR0cmlidXRlKCd4LXBsYWNlbWVudCcpICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRpcCkucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9GQURFJDIpO1xuICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gZmFsc2U7XG4gICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgdGhpcy5jb25maWcuYW5pbWF0aW9uID0gaW5pdENvbmZpZ0FuaW1hdGlvbjtcbiAgICB9IC8vIFN0YXRpY1xuICAgIDtcblxuICAgIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZSA9IGZ1bmN0aW9uIF9qUXVlcnlJbnRlcmZhY2UoY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyICRlbGVtZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMpO1xuICAgICAgICB2YXIgZGF0YSA9ICRlbGVtZW50LmRhdGEoREFUQV9LRVkkNik7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWc7XG5cbiAgICAgICAgaWYgKCFkYXRhICYmIC9kaXNwb3NlfGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgVG9vbHRpcCh0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkZWxlbWVudC5kYXRhKERBVEFfS0VZJDYsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBkYXRhW2NvbmZpZ10gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTm8gbWV0aG9kIG5hbWVkIFxcXCJcIiArIGNvbmZpZyArIFwiXFxcIlwiKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2NvbmZpZ10oKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhUb29sdGlwLCBudWxsLCBbe1xuICAgICAga2V5OiBcIlZFUlNJT05cIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gVkVSU0lPTiQ2O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEZWZhdWx0XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHQkNDtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiTkFNRVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBOQU1FJDY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRBVEFfS0VZXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERBVEFfS0VZJDY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkV2ZW50XCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIEV2ZW50O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFVkVOVF9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRVZFTlRfS0VZJDY7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDQ7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRvb2x0aXA7XG4gIH0oKTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkNl0gPSBUb29sdGlwLl9qUXVlcnlJbnRlcmZhY2U7XG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDZdLkNvbnN0cnVjdG9yID0gVG9vbHRpcDtcblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQ2XS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDZdID0gSlFVRVJZX05PX0NPTkZMSUNUJDY7XG4gICAgcmV0dXJuIFRvb2x0aXAuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkNyA9ICdwb3BvdmVyJztcbiAgdmFyIFZFUlNJT04kNyA9ICc0LjUuMyc7XG4gIHZhciBEQVRBX0tFWSQ3ID0gJ2JzLnBvcG92ZXInO1xuICB2YXIgRVZFTlRfS0VZJDcgPSBcIi5cIiArIERBVEFfS0VZJDc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkNyA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDddO1xuICB2YXIgQ0xBU1NfUFJFRklYJDEgPSAnYnMtcG9wb3Zlcic7XG4gIHZhciBCU0NMU19QUkVGSVhfUkVHRVgkMSA9IG5ldyBSZWdFeHAoXCIoXnxcXFxccylcIiArIENMQVNTX1BSRUZJWCQxICsgXCJcXFxcUytcIiwgJ2cnKTtcblxuICB2YXIgRGVmYXVsdCQ1ID0gX2V4dGVuZHMoe30sIFRvb2x0aXAuRGVmYXVsdCwge1xuICAgIHBsYWNlbWVudDogJ3JpZ2h0JyxcbiAgICB0cmlnZ2VyOiAnY2xpY2snLFxuICAgIGNvbnRlbnQ6ICcnLFxuICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cInBvcG92ZXJcIiByb2xlPVwidG9vbHRpcFwiPicgKyAnPGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+JyArICc8aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+JyArICc8ZGl2IGNsYXNzPVwicG9wb3Zlci1ib2R5XCI+PC9kaXY+PC9kaXY+J1xuICB9KTtcblxuICB2YXIgRGVmYXVsdFR5cGUkNSA9IF9leHRlbmRzKHt9LCBUb29sdGlwLkRlZmF1bHRUeXBlLCB7XG4gICAgY29udGVudDogJyhzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbiknXG4gIH0pO1xuXG4gIHZhciBDTEFTU19OQU1FX0ZBREUkMyA9ICdmYWRlJztcbiAgdmFyIENMQVNTX05BTUVfU0hPVyQ1ID0gJ3Nob3cnO1xuICB2YXIgU0VMRUNUT1JfVElUTEUgPSAnLnBvcG92ZXItaGVhZGVyJztcbiAgdmFyIFNFTEVDVE9SX0NPTlRFTlQgPSAnLnBvcG92ZXItYm9keSc7XG4gIHZhciBFdmVudCQxID0ge1xuICAgIEhJREU6IFwiaGlkZVwiICsgRVZFTlRfS0VZJDcsXG4gICAgSElEREVOOiBcImhpZGRlblwiICsgRVZFTlRfS0VZJDcsXG4gICAgU0hPVzogXCJzaG93XCIgKyBFVkVOVF9LRVkkNyxcbiAgICBTSE9XTjogXCJzaG93blwiICsgRVZFTlRfS0VZJDcsXG4gICAgSU5TRVJURUQ6IFwiaW5zZXJ0ZWRcIiArIEVWRU5UX0tFWSQ3LFxuICAgIENMSUNLOiBcImNsaWNrXCIgKyBFVkVOVF9LRVkkNyxcbiAgICBGT0NVU0lOOiBcImZvY3VzaW5cIiArIEVWRU5UX0tFWSQ3LFxuICAgIEZPQ1VTT1VUOiBcImZvY3Vzb3V0XCIgKyBFVkVOVF9LRVkkNyxcbiAgICBNT1VTRUVOVEVSOiBcIm1vdXNlZW50ZXJcIiArIEVWRU5UX0tFWSQ3LFxuICAgIE1PVVNFTEVBVkU6IFwibW91c2VsZWF2ZVwiICsgRVZFTlRfS0VZJDdcbiAgfTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgUG9wb3ZlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1Rvb2x0aXApIHtcbiAgICBfaW5oZXJpdHNMb29zZShQb3BvdmVyLCBfVG9vbHRpcCk7XG5cbiAgICBmdW5jdGlvbiBQb3BvdmVyKCkge1xuICAgICAgcmV0dXJuIF9Ub29sdGlwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvID0gUG9wb3Zlci5wcm90b3R5cGU7XG5cbiAgICAvLyBPdmVycmlkZXNcbiAgICBfcHJvdG8uaXNXaXRoQ29udGVudCA9IGZ1bmN0aW9uIGlzV2l0aENvbnRlbnQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRUaXRsZSgpIHx8IHRoaXMuX2dldENvbnRlbnQoKTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmFkZEF0dGFjaG1lbnRDbGFzcyA9IGZ1bmN0aW9uIGFkZEF0dGFjaG1lbnRDbGFzcyhhdHRhY2htZW50KSB7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5nZXRUaXBFbGVtZW50KCkpLmFkZENsYXNzKENMQVNTX1BSRUZJWCQxICsgXCItXCIgKyBhdHRhY2htZW50KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmdldFRpcEVsZW1lbnQgPSBmdW5jdGlvbiBnZXRUaXBFbGVtZW50KCkge1xuICAgICAgdGhpcy50aXAgPSB0aGlzLnRpcCB8fCAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5jb25maWcudGVtcGxhdGUpWzBdO1xuICAgICAgcmV0dXJuIHRoaXMudGlwO1xuICAgIH07XG5cbiAgICBfcHJvdG8uc2V0Q29udGVudCA9IGZ1bmN0aW9uIHNldENvbnRlbnQoKSB7XG4gICAgICB2YXIgJHRpcCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLmdldFRpcEVsZW1lbnQoKSk7IC8vIFdlIHVzZSBhcHBlbmQgZm9yIGh0bWwgb2JqZWN0cyB0byBtYWludGFpbiBqcyBldmVudHNcblxuICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU0VMRUNUT1JfVElUTEUpLCB0aGlzLmdldFRpdGxlKCkpO1xuXG4gICAgICB2YXIgY29udGVudCA9IHRoaXMuX2dldENvbnRlbnQoKTtcblxuICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnRlbnQgPSBjb250ZW50LmNhbGwodGhpcy5lbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRFbGVtZW50Q29udGVudCgkdGlwLmZpbmQoU0VMRUNUT1JfQ09OVEVOVCksIGNvbnRlbnQpO1xuICAgICAgJHRpcC5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX0ZBREUkMyArIFwiIFwiICsgQ0xBU1NfTkFNRV9TSE9XJDUpO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29udGVudCA9IGZ1bmN0aW9uIF9nZXRDb250ZW50KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ2RhdGEtY29udGVudCcpIHx8IHRoaXMuY29uZmlnLmNvbnRlbnQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fY2xlYW5UaXBDbGFzcyA9IGZ1bmN0aW9uIF9jbGVhblRpcENsYXNzKCkge1xuICAgICAgdmFyICR0aXAgPSAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5nZXRUaXBFbGVtZW50KCkpO1xuICAgICAgdmFyIHRhYkNsYXNzID0gJHRpcC5hdHRyKCdjbGFzcycpLm1hdGNoKEJTQ0xTX1BSRUZJWF9SRUdFWCQxKTtcblxuICAgICAgaWYgKHRhYkNsYXNzICE9PSBudWxsICYmIHRhYkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgJHRpcC5yZW1vdmVDbGFzcyh0YWJDbGFzcy5qb2luKCcnKSk7XG4gICAgICB9XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMpLmRhdGEoREFUQV9LRVkkNyk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyA/IGNvbmZpZyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFkYXRhICYmIC9kaXNwb3NlfGhpZGUvLnRlc3QoY29uZmlnKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgUG9wb3Zlcih0aGlzLCBfY29uZmlnKTtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcykuZGF0YShEQVRBX0tFWSQ3LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgY29uZmlnID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVtjb25maWddID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5vIG1ldGhvZCBuYW1lZCBcXFwiXCIgKyBjb25maWcgKyBcIlxcXCJcIik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGF0YVtjb25maWddKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY3JlYXRlQ2xhc3MoUG9wb3ZlciwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICAvLyBHZXR0ZXJzXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kNztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDU7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIk5BTUVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gTkFNRSQ3O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJEQVRBX0tFWVwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEQVRBX0tFWSQ3O1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFdmVudFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBFdmVudCQxO1xuICAgICAgfVxuICAgIH0sIHtcbiAgICAgIGtleTogXCJFVkVOVF9LRVlcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRVZFTlRfS0VZJDc7XG4gICAgICB9XG4gICAgfSwge1xuICAgICAga2V5OiBcIkRlZmF1bHRUeXBlXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIERlZmF1bHRUeXBlJDU7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFBvcG92ZXI7XG4gIH0oVG9vbHRpcCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDddID0gUG9wb3Zlci5falF1ZXJ5SW50ZXJmYWNlO1xuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQ3XS5Db25zdHJ1Y3RvciA9IFBvcG92ZXI7XG5cbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkN10ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQ3XSA9IEpRVUVSWV9OT19DT05GTElDVCQ3O1xuICAgIHJldHVybiBQb3BvdmVyLl9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDggPSAnc2Nyb2xsc3B5JztcbiAgdmFyIFZFUlNJT04kOCA9ICc0LjUuMyc7XG4gIHZhciBEQVRBX0tFWSQ4ID0gJ2JzLnNjcm9sbHNweSc7XG4gIHZhciBFVkVOVF9LRVkkOCA9IFwiLlwiICsgREFUQV9LRVkkODtcbiAgdmFyIERBVEFfQVBJX0tFWSQ2ID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkOCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDhdO1xuICB2YXIgRGVmYXVsdCQ2ID0ge1xuICAgIG9mZnNldDogMTAsXG4gICAgbWV0aG9kOiAnYXV0bycsXG4gICAgdGFyZ2V0OiAnJ1xuICB9O1xuICB2YXIgRGVmYXVsdFR5cGUkNiA9IHtcbiAgICBvZmZzZXQ6ICdudW1iZXInLFxuICAgIG1ldGhvZDogJ3N0cmluZycsXG4gICAgdGFyZ2V0OiAnKHN0cmluZ3xlbGVtZW50KSdcbiAgfTtcbiAgdmFyIEVWRU5UX0FDVElWQVRFID0gXCJhY3RpdmF0ZVwiICsgRVZFTlRfS0VZJDg7XG4gIHZhciBFVkVOVF9TQ1JPTEwgPSBcInNjcm9sbFwiICsgRVZFTlRfS0VZJDg7XG4gIHZhciBFVkVOVF9MT0FEX0RBVEFfQVBJJDIgPSBcImxvYWRcIiArIEVWRU5UX0tFWSQ4ICsgREFUQV9BUElfS0VZJDY7XG4gIHZhciBDTEFTU19OQU1FX0RST1BET1dOX0lURU0gPSAnZHJvcGRvd24taXRlbSc7XG4gIHZhciBDTEFTU19OQU1FX0FDVElWRSQyID0gJ2FjdGl2ZSc7XG4gIHZhciBTRUxFQ1RPUl9EQVRBX1NQWSA9ICdbZGF0YS1zcHk9XCJzY3JvbGxcIl0nO1xuICB2YXIgU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVAgPSAnLm5hdiwgLmxpc3QtZ3JvdXAnO1xuICB2YXIgU0VMRUNUT1JfTkFWX0xJTktTID0gJy5uYXYtbGluayc7XG4gIHZhciBTRUxFQ1RPUl9OQVZfSVRFTVMgPSAnLm5hdi1pdGVtJztcbiAgdmFyIFNFTEVDVE9SX0xJU1RfSVRFTVMgPSAnLmxpc3QtZ3JvdXAtaXRlbSc7XG4gIHZhciBTRUxFQ1RPUl9EUk9QRE9XTiA9ICcuZHJvcGRvd24nO1xuICB2YXIgU0VMRUNUT1JfRFJPUERPV05fSVRFTVMgPSAnLmRyb3Bkb3duLWl0ZW0nO1xuICB2YXIgU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFID0gJy5kcm9wZG93bi10b2dnbGUnO1xuICB2YXIgTUVUSE9EX09GRlNFVCA9ICdvZmZzZXQnO1xuICB2YXIgTUVUSE9EX1BPU0lUSU9OID0gJ3Bvc2l0aW9uJztcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDbGFzcyBEZWZpbml0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICB2YXIgU2Nyb2xsU3B5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY3JvbGxTcHkoZWxlbWVudCwgY29uZmlnKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB0aGlzLl9lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgIHRoaXMuX3Njcm9sbEVsZW1lbnQgPSBlbGVtZW50LnRhZ05hbWUgPT09ICdCT0RZJyA/IHdpbmRvdyA6IGVsZW1lbnQ7XG4gICAgICB0aGlzLl9jb25maWcgPSB0aGlzLl9nZXRDb25maWcoY29uZmlnKTtcbiAgICAgIHRoaXMuX3NlbGVjdG9yID0gdGhpcy5fY29uZmlnLnRhcmdldCArIFwiIFwiICsgU0VMRUNUT1JfTkFWX0xJTktTICsgXCIsXCIgKyAodGhpcy5fY29uZmlnLnRhcmdldCArIFwiIFwiICsgU0VMRUNUT1JfTElTVF9JVEVNUyArIFwiLFwiKSArICh0aGlzLl9jb25maWcudGFyZ2V0ICsgXCIgXCIgKyBTRUxFQ1RPUl9EUk9QRE9XTl9JVEVNUyk7XG4gICAgICB0aGlzLl9vZmZzZXRzID0gW107XG4gICAgICB0aGlzLl90YXJnZXRzID0gW107XG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsSGVpZ2h0ID0gMDtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihFVkVOVF9TQ1JPTEwsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICByZXR1cm4gX3RoaXMuX3Byb2Nlc3MoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLnJlZnJlc2goKTtcblxuICAgICAgdGhpcy5fcHJvY2VzcygpO1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gU2Nyb2xsU3B5LnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5yZWZyZXNoID0gZnVuY3Rpb24gcmVmcmVzaCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgYXV0b01ldGhvZCA9IHRoaXMuX3Njcm9sbEVsZW1lbnQgPT09IHRoaXMuX3Njcm9sbEVsZW1lbnQud2luZG93ID8gTUVUSE9EX09GRlNFVCA6IE1FVEhPRF9QT1NJVElPTjtcbiAgICAgIHZhciBvZmZzZXRNZXRob2QgPSB0aGlzLl9jb25maWcubWV0aG9kID09PSAnYXV0bycgPyBhdXRvTWV0aG9kIDogdGhpcy5fY29uZmlnLm1ldGhvZDtcbiAgICAgIHZhciBvZmZzZXRCYXNlID0gb2Zmc2V0TWV0aG9kID09PSBNRVRIT0RfUE9TSVRJT04gPyB0aGlzLl9nZXRTY3JvbGxUb3AoKSA6IDA7XG4gICAgICB0aGlzLl9vZmZzZXRzID0gW107XG4gICAgICB0aGlzLl90YXJnZXRzID0gW107XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSB0aGlzLl9nZXRTY3JvbGxIZWlnaHQoKTtcbiAgICAgIHZhciB0YXJnZXRzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NlbGVjdG9yKSk7XG4gICAgICB0YXJnZXRzLm1hcChmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB2YXIgdGFyZ2V0O1xuICAgICAgICB2YXIgdGFyZ2V0U2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgaWYgKHRhcmdldFNlbGVjdG9yKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgICAgdmFyIHRhcmdldEJDUiA9IHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAgIGlmICh0YXJnZXRCQ1Iud2lkdGggfHwgdGFyZ2V0QkNSLmhlaWdodCkge1xuICAgICAgICAgICAgLy8gVE9ETyAoZmF0KTogcmVtb3ZlIHNrZXRjaCByZWxpYW5jZSBvbiBqUXVlcnkgcG9zaXRpb24vb2Zmc2V0XG4gICAgICAgICAgICByZXR1cm4gWyRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0YXJnZXQpW29mZnNldE1ldGhvZF0oKS50b3AgKyBvZmZzZXRCYXNlLCB0YXJnZXRTZWxlY3Rvcl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgICB9KS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhWzBdIC0gYlswXTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgX3RoaXMyLl9vZmZzZXRzLnB1c2goaXRlbVswXSk7XG5cbiAgICAgICAgX3RoaXMyLl90YXJnZXRzLnB1c2goaXRlbVsxXSk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkOCk7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKEVWRU5UX0tFWSQ4KTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLl9jb25maWcgPSBudWxsO1xuICAgICAgdGhpcy5fc2VsZWN0b3IgPSBudWxsO1xuICAgICAgdGhpcy5fb2Zmc2V0cyA9IG51bGw7XG4gICAgICB0aGlzLl90YXJnZXRzID0gbnVsbDtcbiAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG4gICAgICB0aGlzLl9zY3JvbGxIZWlnaHQgPSBudWxsO1xuICAgIH0gLy8gUHJpdmF0ZVxuICAgIDtcblxuICAgIF9wcm90by5fZ2V0Q29uZmlnID0gZnVuY3Rpb24gX2dldENvbmZpZyhjb25maWcpIHtcbiAgICAgIGNvbmZpZyA9IF9leHRlbmRzKHt9LCBEZWZhdWx0JDYsIHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZyA/IGNvbmZpZyA6IHt9KTtcblxuICAgICAgaWYgKHR5cGVvZiBjb25maWcudGFyZ2V0ICE9PSAnc3RyaW5nJyAmJiBVdGlsLmlzRWxlbWVudChjb25maWcudGFyZ2V0KSkge1xuICAgICAgICB2YXIgaWQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10oY29uZmlnLnRhcmdldCkuYXR0cignaWQnKTtcblxuICAgICAgICBpZiAoIWlkKSB7XG4gICAgICAgICAgaWQgPSBVdGlsLmdldFVJRChOQU1FJDgpO1xuICAgICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShjb25maWcudGFyZ2V0KS5hdHRyKCdpZCcsIGlkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZy50YXJnZXQgPSBcIiNcIiArIGlkO1xuICAgICAgfVxuXG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJDgsIGNvbmZpZywgRGVmYXVsdFR5cGUkNik7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFNjcm9sbFRvcCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxUb3AoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gdGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldCA6IHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldFNjcm9sbEhlaWdodCA9IGZ1bmN0aW9uIF9nZXRTY3JvbGxIZWlnaHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudC5zY3JvbGxIZWlnaHQgfHwgTWF0aC5tYXgoZG9jdW1lbnQuYm9keS5zY3JvbGxIZWlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxIZWlnaHQpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2dldE9mZnNldEhlaWdodCA9IGZ1bmN0aW9uIF9nZXRPZmZzZXRIZWlnaHQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudCA9PT0gd2luZG93ID8gd2luZG93LmlubmVySGVpZ2h0IDogdGhpcy5fc2Nyb2xsRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgfTtcblxuICAgIF9wcm90by5fcHJvY2VzcyA9IGZ1bmN0aW9uIF9wcm9jZXNzKCkge1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IHRoaXMuX2dldFNjcm9sbFRvcCgpICsgdGhpcy5fY29uZmlnLm9mZnNldDtcblxuICAgICAgdmFyIHNjcm9sbEhlaWdodCA9IHRoaXMuX2dldFNjcm9sbEhlaWdodCgpO1xuXG4gICAgICB2YXIgbWF4U2Nyb2xsID0gdGhpcy5fY29uZmlnLm9mZnNldCArIHNjcm9sbEhlaWdodCAtIHRoaXMuX2dldE9mZnNldEhlaWdodCgpO1xuXG4gICAgICBpZiAodGhpcy5fc2Nyb2xsSGVpZ2h0ICE9PSBzY3JvbGxIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5yZWZyZXNoKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzY3JvbGxUb3AgPj0gbWF4U2Nyb2xsKSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXRzW3RoaXMuX3RhcmdldHMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAhPT0gdGFyZ2V0KSB7XG4gICAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2FjdGl2ZVRhcmdldCAmJiBzY3JvbGxUb3AgPCB0aGlzLl9vZmZzZXRzWzBdICYmIHRoaXMuX29mZnNldHNbMF0gPiAwKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZVRhcmdldCA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fY2xlYXIoKTtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLl9vZmZzZXRzLmxlbmd0aDsgaS0tOykge1xuICAgICAgICB2YXIgaXNBY3RpdmVUYXJnZXQgPSB0aGlzLl9hY3RpdmVUYXJnZXQgIT09IHRoaXMuX3RhcmdldHNbaV0gJiYgc2Nyb2xsVG9wID49IHRoaXMuX29mZnNldHNbaV0gJiYgKHR5cGVvZiB0aGlzLl9vZmZzZXRzW2kgKyAxXSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2Nyb2xsVG9wIDwgdGhpcy5fb2Zmc2V0c1tpICsgMV0pO1xuXG4gICAgICAgIGlmIChpc0FjdGl2ZVRhcmdldCkge1xuICAgICAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX3RhcmdldHNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5fYWN0aXZhdGUgPSBmdW5jdGlvbiBfYWN0aXZhdGUodGFyZ2V0KSB7XG4gICAgICB0aGlzLl9hY3RpdmVUYXJnZXQgPSB0YXJnZXQ7XG5cbiAgICAgIHRoaXMuX2NsZWFyKCk7XG5cbiAgICAgIHZhciBxdWVyaWVzID0gdGhpcy5fc2VsZWN0b3Iuc3BsaXQoJywnKS5tYXAoZnVuY3Rpb24gKHNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBzZWxlY3RvciArIFwiW2RhdGEtdGFyZ2V0PVxcXCJcIiArIHRhcmdldCArIFwiXFxcIl0sXCIgKyBzZWxlY3RvciArIFwiW2hyZWY9XFxcIlwiICsgdGFyZ2V0ICsgXCJcXFwiXVwiO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciAkbGluayA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShbXS5zbGljZS5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocXVlcmllcy5qb2luKCcsJykpKSk7XG5cbiAgICAgIGlmICgkbGluay5oYXNDbGFzcyhDTEFTU19OQU1FX0RST1BET1dOX0lURU0pKSB7XG4gICAgICAgICRsaW5rLmNsb3Nlc3QoU0VMRUNUT1JfRFJPUERPV04pLmZpbmQoU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhDTEFTU19OQU1FX0FDVElWRSQyKTtcbiAgICAgICAgJGxpbmsuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTZXQgdHJpZ2dlcmVkIGxpbmsgYXMgYWN0aXZlXG4gICAgICAgICRsaW5rLmFkZENsYXNzKENMQVNTX05BTUVfQUNUSVZFJDIpOyAvLyBTZXQgdHJpZ2dlcmVkIGxpbmtzIHBhcmVudHMgYXMgYWN0aXZlXG4gICAgICAgIC8vIFdpdGggYm90aCA8dWw+IGFuZCA8bmF2PiBtYXJrdXAgYSBwYXJlbnQgaXMgdGhlIHByZXZpb3VzIHNpYmxpbmcgb2YgYW55IG5hdiBhbmNlc3RvclxuXG4gICAgICAgICRsaW5rLnBhcmVudHMoU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVApLnByZXYoU0VMRUNUT1JfTkFWX0xJTktTICsgXCIsIFwiICsgU0VMRUNUT1JfTElTVF9JVEVNUykuYWRkQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMik7IC8vIEhhbmRsZSBzcGVjaWFsIGNhc2Ugd2hlbiAubmF2LWxpbmsgaXMgaW5zaWRlIC5uYXYtaXRlbVxuXG4gICAgICAgICRsaW5rLnBhcmVudHMoU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVApLnByZXYoU0VMRUNUT1JfTkFWX0lURU1TKS5jaGlsZHJlbihTRUxFQ1RPUl9OQVZfTElOS1MpLmFkZENsYXNzKENMQVNTX05BTUVfQUNUSVZFJDIpO1xuICAgICAgfVxuXG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fc2Nyb2xsRWxlbWVudCkudHJpZ2dlcihFVkVOVF9BQ1RJVkFURSwge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiB0YXJnZXRcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX2NsZWFyID0gZnVuY3Rpb24gX2NsZWFyKCkge1xuICAgICAgW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX3NlbGVjdG9yKSkuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0FDVElWRSQyKTtcbiAgICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX0FDVElWRSQyKTtcbiAgICAgIH0pO1xuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkYXRhID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMpLmRhdGEoREFUQV9LRVkkOCk7XG5cbiAgICAgICAgdmFyIF9jb25maWcgPSB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWc7XG5cbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgZGF0YSA9IG5ldyBTY3JvbGxTcHkodGhpcywgX2NvbmZpZyk7XG4gICAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMpLmRhdGEoREFUQV9LRVkkOCwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFNjcm9sbFNweSwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kODtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDY7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFNjcm9sbFNweTtcbiAgfSgpO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIERhdGEgQXBpIGltcGxlbWVudGF0aW9uXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh3aW5kb3cpLm9uKEVWRU5UX0xPQURfREFUQV9BUEkkMiwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY3JvbGxTcHlzID0gW10uc2xpY2UuY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFNFTEVDVE9SX0RBVEFfU1BZKSk7XG4gICAgdmFyIHNjcm9sbFNweXNMZW5ndGggPSBzY3JvbGxTcHlzLmxlbmd0aDtcblxuICAgIGZvciAodmFyIGkgPSBzY3JvbGxTcHlzTGVuZ3RoOyBpLS07KSB7XG4gICAgICB2YXIgJHNweSA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShzY3JvbGxTcHlzW2ldKTtcblxuICAgICAgU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkc3B5LCAkc3B5LmRhdGEoKSk7XG4gICAgfVxuICB9KTtcbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBqUXVlcnlcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDhdID0gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2U7XG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDhdLkNvbnN0cnVjdG9yID0gU2Nyb2xsU3B5O1xuXG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDhdLm5vQ29uZmxpY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkOF0gPSBKUVVFUllfTk9fQ09ORkxJQ1QkODtcbiAgICByZXR1cm4gU2Nyb2xsU3B5Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb25zdGFudHNcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIHZhciBOQU1FJDkgPSAndGFiJztcbiAgdmFyIFZFUlNJT04kOSA9ICc0LjUuMyc7XG4gIHZhciBEQVRBX0tFWSQ5ID0gJ2JzLnRhYic7XG4gIHZhciBFVkVOVF9LRVkkOSA9IFwiLlwiICsgREFUQV9LRVkkOTtcbiAgdmFyIERBVEFfQVBJX0tFWSQ3ID0gJy5kYXRhLWFwaSc7XG4gIHZhciBKUVVFUllfTk9fQ09ORkxJQ1QkOSA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJDldO1xuICB2YXIgRVZFTlRfSElERSQzID0gXCJoaWRlXCIgKyBFVkVOVF9LRVkkOTtcbiAgdmFyIEVWRU5UX0hJRERFTiQzID0gXCJoaWRkZW5cIiArIEVWRU5UX0tFWSQ5O1xuICB2YXIgRVZFTlRfU0hPVyQzID0gXCJzaG93XCIgKyBFVkVOVF9LRVkkOTtcbiAgdmFyIEVWRU5UX1NIT1dOJDMgPSBcInNob3duXCIgKyBFVkVOVF9LRVkkOTtcbiAgdmFyIEVWRU5UX0NMSUNLX0RBVEFfQVBJJDYgPSBcImNsaWNrXCIgKyBFVkVOVF9LRVkkOSArIERBVEFfQVBJX0tFWSQ3O1xuICB2YXIgQ0xBU1NfTkFNRV9EUk9QRE9XTl9NRU5VID0gJ2Ryb3Bkb3duLW1lbnUnO1xuICB2YXIgQ0xBU1NfTkFNRV9BQ1RJVkUkMyA9ICdhY3RpdmUnO1xuICB2YXIgQ0xBU1NfTkFNRV9ESVNBQkxFRCQxID0gJ2Rpc2FibGVkJztcbiAgdmFyIENMQVNTX05BTUVfRkFERSQ0ID0gJ2ZhZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9TSE9XJDYgPSAnc2hvdyc7XG4gIHZhciBTRUxFQ1RPUl9EUk9QRE9XTiQxID0gJy5kcm9wZG93bic7XG4gIHZhciBTRUxFQ1RPUl9OQVZfTElTVF9HUk9VUCQxID0gJy5uYXYsIC5saXN0LWdyb3VwJztcbiAgdmFyIFNFTEVDVE9SX0FDVElWRSQyID0gJy5hY3RpdmUnO1xuICB2YXIgU0VMRUNUT1JfQUNUSVZFX1VMID0gJz4gbGkgPiAuYWN0aXZlJztcbiAgdmFyIFNFTEVDVE9SX0RBVEFfVE9HR0xFJDQgPSAnW2RhdGEtdG9nZ2xlPVwidGFiXCJdLCBbZGF0YS10b2dnbGU9XCJwaWxsXCJdLCBbZGF0YS10b2dnbGU9XCJsaXN0XCJdJztcbiAgdmFyIFNFTEVDVE9SX0RST1BET1dOX1RPR0dMRSQxID0gJy5kcm9wZG93bi10b2dnbGUnO1xuICB2YXIgU0VMRUNUT1JfRFJPUERPV05fQUNUSVZFX0NISUxEID0gJz4gLmRyb3Bkb3duLW1lbnUgLmFjdGl2ZSc7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIFRhYiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFiKGVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgIH0gLy8gR2V0dGVyc1xuXG5cbiAgICB2YXIgX3Byb3RvID0gVGFiLnByb3RvdHlwZTtcblxuICAgIC8vIFB1YmxpY1xuICAgIF9wcm90by5zaG93ID0gZnVuY3Rpb24gc2hvdygpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUgJiYgdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlID09PSBOb2RlLkVMRU1FTlRfTk9ERSAmJiAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMykgfHwgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKENMQVNTX05BTUVfRElTQUJMRUQkMSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGFyZ2V0O1xuICAgICAgdmFyIHByZXZpb3VzO1xuICAgICAgdmFyIGxpc3RFbGVtZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoU0VMRUNUT1JfTkFWX0xJU1RfR1JPVVAkMSlbMF07XG4gICAgICB2YXIgc2VsZWN0b3IgPSBVdGlsLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG5cbiAgICAgIGlmIChsaXN0RWxlbWVudCkge1xuICAgICAgICB2YXIgaXRlbVNlbGVjdG9yID0gbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdVTCcgfHwgbGlzdEVsZW1lbnQubm9kZU5hbWUgPT09ICdPTCcgPyBTRUxFQ1RPUl9BQ1RJVkVfVUwgOiBTRUxFQ1RPUl9BQ1RJVkUkMjtcbiAgICAgICAgcHJldmlvdXMgPSAkX19kZWZhdWx0WydkZWZhdWx0J10ubWFrZUFycmF5KCRfX2RlZmF1bHRbJ2RlZmF1bHQnXShsaXN0RWxlbWVudCkuZmluZChpdGVtU2VsZWN0b3IpKTtcbiAgICAgICAgcHJldmlvdXMgPSBwcmV2aW91c1twcmV2aW91cy5sZW5ndGggLSAxXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGhpZGVFdmVudCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5FdmVudChFVkVOVF9ISURFJDMsIHtcbiAgICAgICAgcmVsYXRlZFRhcmdldDogdGhpcy5fZWxlbWVudFxuICAgICAgfSk7XG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLkV2ZW50KEVWRU5UX1NIT1ckMywge1xuICAgICAgICByZWxhdGVkVGFyZ2V0OiBwcmV2aW91c1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10ocHJldmlvdXMpLnRyaWdnZXIoaGlkZUV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoc2hvd0V2ZW50KTtcblxuICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSB8fCBoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgICAgdGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2FjdGl2YXRlKHRoaXMuX2VsZW1lbnQsIGxpc3RFbGVtZW50KTtcblxuICAgICAgdmFyIGNvbXBsZXRlID0gZnVuY3Rpb24gY29tcGxldGUoKSB7XG4gICAgICAgIHZhciBoaWRkZW5FdmVudCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5FdmVudChFVkVOVF9ISURERU4kMywge1xuICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IF90aGlzLl9lbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc2hvd25FdmVudCA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5FdmVudChFVkVOVF9TSE9XTiQzLCB7XG4gICAgICAgICAgcmVsYXRlZFRhcmdldDogcHJldmlvdXNcbiAgICAgICAgfSk7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShwcmV2aW91cykudHJpZ2dlcihoaWRkZW5FdmVudCk7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXShfdGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93bkV2ZW50KTtcbiAgICAgIH07XG5cbiAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZhdGUodGFyZ2V0LCB0YXJnZXQucGFyZW50Tm9kZSwgY29tcGxldGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLmRpc3Bvc2UgPSBmdW5jdGlvbiBkaXNwb3NlKCkge1xuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCwgREFUQV9LRVkkOSk7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2FjdGl2YXRlID0gZnVuY3Rpb24gX2FjdGl2YXRlKGVsZW1lbnQsIGNvbnRhaW5lciwgY2FsbGJhY2spIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgYWN0aXZlRWxlbWVudHMgPSBjb250YWluZXIgJiYgKGNvbnRhaW5lci5ub2RlTmFtZSA9PT0gJ1VMJyB8fCBjb250YWluZXIubm9kZU5hbWUgPT09ICdPTCcpID8gJF9fZGVmYXVsdFsnZGVmYXVsdCddKGNvbnRhaW5lcikuZmluZChTRUxFQ1RPUl9BQ1RJVkVfVUwpIDogJF9fZGVmYXVsdFsnZGVmYXVsdCddKGNvbnRhaW5lcikuY2hpbGRyZW4oU0VMRUNUT1JfQUNUSVZFJDIpO1xuICAgICAgdmFyIGFjdGl2ZSA9IGFjdGl2ZUVsZW1lbnRzWzBdO1xuICAgICAgdmFyIGlzVHJhbnNpdGlvbmluZyA9IGNhbGxiYWNrICYmIGFjdGl2ZSAmJiAkX19kZWZhdWx0WydkZWZhdWx0J10oYWN0aXZlKS5oYXNDbGFzcyhDTEFTU19OQU1FX0ZBREUkNCk7XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICByZXR1cm4gX3RoaXMyLl90cmFuc2l0aW9uQ29tcGxldGUoZWxlbWVudCwgYWN0aXZlLCBjYWxsYmFjayk7XG4gICAgICB9O1xuXG4gICAgICBpZiAoYWN0aXZlICYmIGlzVHJhbnNpdGlvbmluZykge1xuICAgICAgICB2YXIgdHJhbnNpdGlvbkR1cmF0aW9uID0gVXRpbC5nZXRUcmFuc2l0aW9uRHVyYXRpb25Gcm9tRWxlbWVudChhY3RpdmUpO1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oYWN0aXZlKS5yZW1vdmVDbGFzcyhDTEFTU19OQU1FX1NIT1ckNikub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl90cmFuc2l0aW9uQ29tcGxldGUgPSBmdW5jdGlvbiBfdHJhbnNpdGlvbkNvbXBsZXRlKGVsZW1lbnQsIGFjdGl2ZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmIChhY3RpdmUpIHtcbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGFjdGl2ZSkucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMyk7XG4gICAgICAgIHZhciBkcm9wZG93bkNoaWxkID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddKGFjdGl2ZS5wYXJlbnROb2RlKS5maW5kKFNFTEVDVE9SX0RST1BET1dOX0FDVElWRV9DSElMRClbMF07XG5cbiAgICAgICAgaWYgKGRyb3Bkb3duQ2hpbGQpIHtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZHJvcGRvd25DaGlsZCkucmVtb3ZlQ2xhc3MoQ0xBU1NfTkFNRV9BQ1RJVkUkMyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYWN0aXZlLmdldEF0dHJpYnV0ZSgncm9sZScpID09PSAndGFiJykge1xuICAgICAgICAgIGFjdGl2ZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGVsZW1lbnQpLmFkZENsYXNzKENMQVNTX05BTUVfQUNUSVZFJDMpO1xuXG4gICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoJ3JvbGUnKSA9PT0gJ3RhYicpIHtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtc2VsZWN0ZWQnLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgVXRpbC5yZWZsb3coZWxlbWVudCk7XG5cbiAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhDTEFTU19OQU1FX0ZBREUkNCkpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKENMQVNTX05BTUVfU0hPVyQ2KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSAmJiAkX19kZWZhdWx0WydkZWZhdWx0J10oZWxlbWVudC5wYXJlbnROb2RlKS5oYXNDbGFzcyhDTEFTU19OQU1FX0RST1BET1dOX01FTlUpKSB7XG4gICAgICAgIHZhciBkcm9wZG93bkVsZW1lbnQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10oZWxlbWVudCkuY2xvc2VzdChTRUxFQ1RPUl9EUk9QRE9XTiQxKVswXTtcblxuICAgICAgICBpZiAoZHJvcGRvd25FbGVtZW50KSB7XG4gICAgICAgICAgdmFyIGRyb3Bkb3duVG9nZ2xlTGlzdCA9IFtdLnNsaWNlLmNhbGwoZHJvcGRvd25FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoU0VMRUNUT1JfRFJPUERPV05fVE9HR0xFJDEpKTtcbiAgICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oZHJvcGRvd25Ub2dnbGVMaXN0KS5hZGRDbGFzcyhDTEFTU19OQU1FX0FDVElWRSQzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWV4cGFuZGVkJywgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0gLy8gU3RhdGljXG4gICAgO1xuXG4gICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UgPSBmdW5jdGlvbiBfalF1ZXJ5SW50ZXJmYWNlKGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciAkdGhpcyA9ICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzKTtcbiAgICAgICAgdmFyIGRhdGEgPSAkdGhpcy5kYXRhKERBVEFfS0VZJDkpO1xuXG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgIGRhdGEgPSBuZXcgVGFiKHRoaXMpO1xuICAgICAgICAgICR0aGlzLmRhdGEoREFUQV9LRVkkOSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX2NyZWF0ZUNsYXNzKFRhYiwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kOTtcbiAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gVGFiO1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogRGF0YSBBcGkgaW1wbGVtZW50YXRpb25cbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG5cbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKGRvY3VtZW50KS5vbihFVkVOVF9DTElDS19EQVRBX0FQSSQ2LCBTRUxFQ1RPUl9EQVRBX1RPR0dMRSQ0LCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgVGFiLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCgkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcyksICdzaG93Jyk7XG4gIH0pO1xuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIGpRdWVyeVxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkOV0gPSBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkOV0uQ29uc3RydWN0b3IgPSBUYWI7XG5cbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkOV0ubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSQ5XSA9IEpRVUVSWV9OT19DT05GTElDVCQ5O1xuICAgIHJldHVybiBUYWIuX2pRdWVyeUludGVyZmFjZTtcbiAgfTtcblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqIENvbnN0YW50c1xuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIE5BTUUkYSA9ICd0b2FzdCc7XG4gIHZhciBWRVJTSU9OJGEgPSAnNC41LjMnO1xuICB2YXIgREFUQV9LRVkkYSA9ICdicy50b2FzdCc7XG4gIHZhciBFVkVOVF9LRVkkYSA9IFwiLlwiICsgREFUQV9LRVkkYTtcbiAgdmFyIEpRVUVSWV9OT19DT05GTElDVCRhID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkYV07XG4gIHZhciBFVkVOVF9DTElDS19ESVNNSVNTJDEgPSBcImNsaWNrLmRpc21pc3NcIiArIEVWRU5UX0tFWSRhO1xuICB2YXIgRVZFTlRfSElERSQ0ID0gXCJoaWRlXCIgKyBFVkVOVF9LRVkkYTtcbiAgdmFyIEVWRU5UX0hJRERFTiQ0ID0gXCJoaWRkZW5cIiArIEVWRU5UX0tFWSRhO1xuICB2YXIgRVZFTlRfU0hPVyQ0ID0gXCJzaG93XCIgKyBFVkVOVF9LRVkkYTtcbiAgdmFyIEVWRU5UX1NIT1dOJDQgPSBcInNob3duXCIgKyBFVkVOVF9LRVkkYTtcbiAgdmFyIENMQVNTX05BTUVfRkFERSQ1ID0gJ2ZhZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9ISURFID0gJ2hpZGUnO1xuICB2YXIgQ0xBU1NfTkFNRV9TSE9XJDcgPSAnc2hvdyc7XG4gIHZhciBDTEFTU19OQU1FX1NIT1dJTkcgPSAnc2hvd2luZyc7XG4gIHZhciBEZWZhdWx0VHlwZSQ3ID0ge1xuICAgIGFuaW1hdGlvbjogJ2Jvb2xlYW4nLFxuICAgIGF1dG9oaWRlOiAnYm9vbGVhbicsXG4gICAgZGVsYXk6ICdudW1iZXInXG4gIH07XG4gIHZhciBEZWZhdWx0JDcgPSB7XG4gICAgYW5pbWF0aW9uOiB0cnVlLFxuICAgIGF1dG9oaWRlOiB0cnVlLFxuICAgIGRlbGF5OiA1MDBcbiAgfTtcbiAgdmFyIFNFTEVDVE9SX0RBVEFfRElTTUlTUyQxID0gJ1tkYXRhLWRpc21pc3M9XCJ0b2FzdFwiXSc7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogQ2xhc3MgRGVmaW5pdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICovXG5cbiAgdmFyIFRvYXN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUb2FzdChlbGVtZW50LCBjb25maWcpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgdGhpcy5fY29uZmlnID0gdGhpcy5fZ2V0Q29uZmlnKGNvbmZpZyk7XG4gICAgICB0aGlzLl90aW1lb3V0ID0gbnVsbDtcblxuICAgICAgdGhpcy5fc2V0TGlzdGVuZXJzKCk7XG4gICAgfSAvLyBHZXR0ZXJzXG5cblxuICAgIHZhciBfcHJvdG8gPSBUb2FzdC5wcm90b3R5cGU7XG5cbiAgICAvLyBQdWJsaWNcbiAgICBfcHJvdG8uc2hvdyA9IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgc2hvd0V2ZW50ID0gJF9fZGVmYXVsdFsnZGVmYXVsdCddLkV2ZW50KEVWRU5UX1NIT1ckNCk7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkudHJpZ2dlcihzaG93RXZlbnQpO1xuXG4gICAgICBpZiAoc2hvd0V2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2xlYXJUaW1lb3V0KCk7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX0ZBREUkNSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb21wbGV0ZSA9IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgICBfdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfU0hPV0lORyk7XG5cbiAgICAgICAgX3RoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZChDTEFTU19OQU1FX1NIT1ckNyk7XG5cbiAgICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKF90aGlzLl9lbGVtZW50KS50cmlnZ2VyKEVWRU5UX1NIT1dOJDQpO1xuXG4gICAgICAgIGlmIChfdGhpcy5fY29uZmlnLmF1dG9oaWRlKSB7XG4gICAgICAgICAgX3RoaXMuX3RpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmhpZGUoKTtcbiAgICAgICAgICB9LCBfdGhpcy5fY29uZmlnLmRlbGF5KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKENMQVNTX05BTUVfSElERSk7XG5cbiAgICAgIFV0aWwucmVmbG93KHRoaXMuX2VsZW1lbnQpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9TSE9XSU5HKTtcblxuICAgICAgaWYgKHRoaXMuX2NvbmZpZy5hbmltYXRpb24pIHtcbiAgICAgICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbiA9IFV0aWwuZ2V0VHJhbnNpdGlvbkR1cmF0aW9uRnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS5vbmUoVXRpbC5UUkFOU0lUSU9OX0VORCwgY29tcGxldGUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKHRyYW5zaXRpb25EdXJhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8uaGlkZSA9IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICBpZiAoIXRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyQ3KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBoaWRlRXZlbnQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10uRXZlbnQoRVZFTlRfSElERSQ0KTtcbiAgICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGhpZGVFdmVudCk7XG5cbiAgICAgIGlmIChoaWRlRXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jbG9zZSgpO1xuICAgIH07XG5cbiAgICBfcHJvdG8uZGlzcG9zZSA9IGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgICB0aGlzLl9jbGVhclRpbWVvdXQoKTtcblxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKENMQVNTX05BTUVfU0hPVyQ3KSkge1xuICAgICAgICB0aGlzLl9lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoQ0xBU1NfTkFNRV9TSE9XJDcpO1xuICAgICAgfVxuXG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkub2ZmKEVWRU5UX0NMSUNLX0RJU01JU1MkMSk7XG4gICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10ucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LCBEQVRBX0tFWSRhKTtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5fY29uZmlnID0gbnVsbDtcbiAgICB9IC8vIFByaXZhdGVcbiAgICA7XG5cbiAgICBfcHJvdG8uX2dldENvbmZpZyA9IGZ1bmN0aW9uIF9nZXRDb25maWcoY29uZmlnKSB7XG4gICAgICBjb25maWcgPSBfZXh0ZW5kcyh7fSwgRGVmYXVsdCQ3LCAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkuZGF0YSgpLCB0eXBlb2YgY29uZmlnID09PSAnb2JqZWN0JyAmJiBjb25maWcgPyBjb25maWcgOiB7fSk7XG4gICAgICBVdGlsLnR5cGVDaGVja0NvbmZpZyhOQU1FJGEsIGNvbmZpZywgdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSk7XG4gICAgICByZXR1cm4gY29uZmlnO1xuICAgIH07XG5cbiAgICBfcHJvdG8uX3NldExpc3RlbmVycyA9IGZ1bmN0aW9uIF9zZXRMaXN0ZW5lcnMoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgJF9fZGVmYXVsdFsnZGVmYXVsdCddKHRoaXMuX2VsZW1lbnQpLm9uKEVWRU5UX0NMSUNLX0RJU01JU1MkMSwgU0VMRUNUT1JfREFUQV9ESVNNSVNTJDEsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5oaWRlKCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbG9zZSA9IGZ1bmN0aW9uIF9jbG9zZSgpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZSgpIHtcbiAgICAgICAgX3RoaXMzLl9lbGVtZW50LmNsYXNzTGlzdC5hZGQoQ0xBU1NfTkFNRV9ISURFKTtcblxuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10oX3RoaXMzLl9lbGVtZW50KS50cmlnZ2VyKEVWRU5UX0hJRERFTiQ0KTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShDTEFTU19OQU1FX1NIT1ckNyk7XG5cbiAgICAgIGlmICh0aGlzLl9jb25maWcuYW5pbWF0aW9uKSB7XG4gICAgICAgIHZhciB0cmFuc2l0aW9uRHVyYXRpb24gPSBVdGlsLmdldFRyYW5zaXRpb25EdXJhdGlvbkZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO1xuICAgICAgICAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcy5fZWxlbWVudCkub25lKFV0aWwuVFJBTlNJVElPTl9FTkQsIGNvbXBsZXRlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCh0cmFuc2l0aW9uRHVyYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLl9jbGVhclRpbWVvdXQgPSBmdW5jdGlvbiBfY2xlYXJUaW1lb3V0KCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpO1xuICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG4gICAgfSAvLyBTdGF0aWNcbiAgICA7XG5cbiAgICBUb2FzdC5falF1ZXJ5SW50ZXJmYWNlID0gZnVuY3Rpb24gX2pRdWVyeUludGVyZmFjZShjb25maWcpIHtcbiAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgJGVsZW1lbnQgPSAkX19kZWZhdWx0WydkZWZhdWx0J10odGhpcyk7XG4gICAgICAgIHZhciBkYXRhID0gJGVsZW1lbnQuZGF0YShEQVRBX0tFWSRhKTtcblxuICAgICAgICB2YXIgX2NvbmZpZyA9IHR5cGVvZiBjb25maWcgPT09ICdvYmplY3QnICYmIGNvbmZpZztcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICBkYXRhID0gbmV3IFRvYXN0KHRoaXMsIF9jb25maWcpO1xuICAgICAgICAgICRlbGVtZW50LmRhdGEoREFUQV9LRVkkYSwgZGF0YSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGRhdGFbY29uZmlnXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJObyBtZXRob2QgbmFtZWQgXFxcIlwiICsgY29uZmlnICsgXCJcXFwiXCIpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRhdGFbY29uZmlnXSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIF9jcmVhdGVDbGFzcyhUb2FzdCwgbnVsbCwgW3tcbiAgICAgIGtleTogXCJWRVJTSU9OXCIsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIFZFUlNJT04kYTtcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFR5cGVcIixcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gRGVmYXVsdFR5cGUkNztcbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICBrZXk6IFwiRGVmYXVsdFwiLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBEZWZhdWx0JDc7XG4gICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIFRvYXN0O1xuICB9KCk7XG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogalF1ZXJ5XG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuXG4gICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJGFdID0gVG9hc3QuX2pRdWVyeUludGVyZmFjZTtcbiAgJF9fZGVmYXVsdFsnZGVmYXVsdCddLmZuW05BTUUkYV0uQ29uc3RydWN0b3IgPSBUb2FzdDtcblxuICAkX19kZWZhdWx0WydkZWZhdWx0J10uZm5bTkFNRSRhXS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICRfX2RlZmF1bHRbJ2RlZmF1bHQnXS5mbltOQU1FJGFdID0gSlFVRVJZX05PX0NPTkZMSUNUJGE7XG4gICAgcmV0dXJuIFRvYXN0Ll9qUXVlcnlJbnRlcmZhY2U7XG4gIH07XG5cbiAgZXhwb3J0cy5BbGVydCA9IEFsZXJ0O1xuICBleHBvcnRzLkJ1dHRvbiA9IEJ1dHRvbjtcbiAgZXhwb3J0cy5DYXJvdXNlbCA9IENhcm91c2VsO1xuICBleHBvcnRzLkNvbGxhcHNlID0gQ29sbGFwc2U7XG4gIGV4cG9ydHMuRHJvcGRvd24gPSBEcm9wZG93bjtcbiAgZXhwb3J0cy5Nb2RhbCA9IE1vZGFsO1xuICBleHBvcnRzLlBvcG92ZXIgPSBQb3BvdmVyO1xuICBleHBvcnRzLlNjcm9sbHNweSA9IFNjcm9sbFNweTtcbiAgZXhwb3J0cy5UYWIgPSBUYWI7XG4gIGV4cG9ydHMuVG9hc3QgPSBUb2FzdDtcbiAgZXhwb3J0cy5Ub29sdGlwID0gVG9vbHRpcDtcbiAgZXhwb3J0cy5VdGlsID0gVXRpbDtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG59KSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vdHN0cmFwLmpzLm1hcFxuIiwiLyoqIVxuICogQGZpbGVPdmVydmlldyBLaWNrYXNzIGxpYnJhcnkgdG8gY3JlYXRlIGFuZCBwbGFjZSBwb3BwZXJzIG5lYXIgdGhlaXIgcmVmZXJlbmNlIGVsZW1lbnRzLlxuICogQHZlcnNpb24gMS4xNi4xXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE2IEZlZGVyaWNvIFppdm9sbyBhbmQgY29udHJpYnV0b3JzXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuICogY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFXG4gKiBTT0ZUV0FSRS5cbiAqL1xudmFyIGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCc7XG5cbnZhciB0aW1lb3V0RHVyYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBsb25nZXJUaW1lb3V0QnJvd3NlcnMgPSBbJ0VkZ2UnLCAnVHJpZGVudCcsICdGaXJlZm94J107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbG9uZ2VyVGltZW91dEJyb3dzZXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGlzQnJvd3NlciAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YobG9uZ2VyVGltZW91dEJyb3dzZXJzW2ldKSA+PSAwKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIDA7XG59KCk7XG5cbmZ1bmN0aW9uIG1pY3JvdGFza0RlYm91bmNlKGZuKSB7XG4gIHZhciBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY2FsbGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgd2luZG93LlByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgY2FsbGVkID0gZmFsc2U7XG4gICAgICBmbigpO1xuICAgIH0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0YXNrRGVib3VuY2UoZm4pIHtcbiAgdmFyIHNjaGVkdWxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghc2NoZWR1bGVkKSB7XG4gICAgICBzY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICBmbigpO1xuICAgICAgfSwgdGltZW91dER1cmF0aW9uKTtcbiAgICB9XG4gIH07XG59XG5cbnZhciBzdXBwb3J0c01pY3JvVGFza3MgPSBpc0Jyb3dzZXIgJiYgd2luZG93LlByb21pc2U7XG5cbi8qKlxuKiBDcmVhdGUgYSBkZWJvdW5jZWQgdmVyc2lvbiBvZiBhIG1ldGhvZCwgdGhhdCdzIGFzeW5jaHJvbm91c2x5IGRlZmVycmVkXG4qIGJ1dCBjYWxsZWQgaW4gdGhlIG1pbmltdW0gdGltZSBwb3NzaWJsZS5cbipcbiogQG1ldGhvZFxuKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4qIEBhcmd1bWVudCB7RnVuY3Rpb259IGZuXG4qIEByZXR1cm5zIHtGdW5jdGlvbn1cbiovXG52YXIgZGVib3VuY2UgPSBzdXBwb3J0c01pY3JvVGFza3MgPyBtaWNyb3Rhc2tEZWJvdW5jZSA6IHRhc2tEZWJvdW5jZTtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gdmFyaWFibGUgaXMgYSBmdW5jdGlvblxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtBbnl9IGZ1bmN0aW9uVG9DaGVjayAtIHZhcmlhYmxlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYW5zd2VyIHRvOiBpcyBhIGZ1bmN0aW9uP1xuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKGZ1bmN0aW9uVG9DaGVjaykge1xuICB2YXIgZ2V0VHlwZSA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb25Ub0NoZWNrICYmIGdldFR5cGUudG9TdHJpbmcuY2FsbChmdW5jdGlvblRvQ2hlY2spID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG4vKipcbiAqIEdldCBDU1MgY29tcHV0ZWQgcHJvcGVydHkgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gcHJvcGVydHlcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQsIHByb3BlcnR5KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG4gIHZhciB3aW5kb3cgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIHZhciBjc3MgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCBudWxsKTtcbiAgcmV0dXJuIHByb3BlcnR5ID8gY3NzW3Byb3BlcnR5XSA6IGNzcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJlbnROb2RlIG9yIHRoZSBob3N0IG9mIHRoZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShlbGVtZW50KSB7XG4gIGlmIChlbGVtZW50Lm5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuICByZXR1cm4gZWxlbWVudC5wYXJlbnROb2RlIHx8IGVsZW1lbnQuaG9zdDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBzY3JvbGxpbmcgcGFyZW50IG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBzY3JvbGwgcGFyZW50XG4gKi9cbmZ1bmN0aW9uIGdldFNjcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFJldHVybiBib2R5LCBgZ2V0U2Nyb2xsYCB3aWxsIHRha2UgY2FyZSB0byBnZXQgdGhlIGNvcnJlY3QgYHNjcm9sbFRvcGAgZnJvbSBpdFxuICBpZiAoIWVsZW1lbnQpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keTtcbiAgfVxuXG4gIHN3aXRjaCAoZWxlbWVudC5ub2RlTmFtZSkge1xuICAgIGNhc2UgJ0hUTUwnOlxuICAgIGNhc2UgJ0JPRFknOlxuICAgICAgcmV0dXJuIGVsZW1lbnQub3duZXJEb2N1bWVudC5ib2R5O1xuICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICByZXR1cm4gZWxlbWVudC5ib2R5O1xuICB9XG5cbiAgLy8gRmlyZWZveCB3YW50IHVzIHRvIGNoZWNrIGAteGAgYW5kIGAteWAgdmFyaWF0aW9ucyBhcyB3ZWxsXG5cbiAgdmFyIF9nZXRTdHlsZUNvbXB1dGVkUHJvcCA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93LFxuICAgICAgb3ZlcmZsb3dYID0gX2dldFN0eWxlQ29tcHV0ZWRQcm9wLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRTdHlsZUNvbXB1dGVkUHJvcC5vdmVyZmxvd1k7XG5cbiAgaWYgKC8oYXV0b3xzY3JvbGx8b3ZlcmxheSkvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHJlZmVyZW5jZSBub2RlIG9mIHRoZSByZWZlcmVuY2Ugb2JqZWN0LCBvciB0aGUgcmVmZXJlbmNlIG9iamVjdCBpdHNlbGYuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSByZWZlcmVuY2UgLSB0aGUgcmVmZXJlbmNlIGVsZW1lbnQgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHJldHVybnMge0VsZW1lbnR9IHBhcmVudFxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkge1xuICByZXR1cm4gcmVmZXJlbmNlICYmIHJlZmVyZW5jZS5yZWZlcmVuY2VOb2RlID8gcmVmZXJlbmNlLnJlZmVyZW5jZU5vZGUgOiByZWZlcmVuY2U7XG59XG5cbnZhciBpc0lFMTEgPSBpc0Jyb3dzZXIgJiYgISEod2luZG93Lk1TSW5wdXRNZXRob2RDb250ZXh0ICYmIGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgaXNJRTEwID0gaXNCcm93c2VyICYmIC9NU0lFIDEwLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIERldGVybWluZXMgaWYgdGhlIGJyb3dzZXIgaXMgSW50ZXJuZXQgRXhwbG9yZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7TnVtYmVyfSB2ZXJzaW9uIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gaXNJRVxuICovXG5mdW5jdGlvbiBpc0lFKHZlcnNpb24pIHtcbiAgaWYgKHZlcnNpb24gPT09IDExKSB7XG4gICAgcmV0dXJuIGlzSUUxMTtcbiAgfVxuICBpZiAodmVyc2lvbiA9PT0gMTApIHtcbiAgICByZXR1cm4gaXNJRTEwO1xuICB9XG4gIHJldHVybiBpc0lFMTEgfHwgaXNJRTEwO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG9mZnNldCBwYXJlbnQgb2YgdGhlIGdpdmVuIGVsZW1lbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0VsZW1lbnR9IG9mZnNldCBwYXJlbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIHZhciBub09mZnNldFBhcmVudCA9IGlzSUUoMTApID8gZG9jdW1lbnQuYm9keSA6IG51bGw7XG5cbiAgLy8gTk9URTogMSBET00gYWNjZXNzIGhlcmVcbiAgdmFyIG9mZnNldFBhcmVudCA9IGVsZW1lbnQub2Zmc2V0UGFyZW50IHx8IG51bGw7XG4gIC8vIFNraXAgaGlkZGVuIGVsZW1lbnRzIHdoaWNoIGRvbid0IGhhdmUgYW4gb2Zmc2V0UGFyZW50XG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgPT09IG5vT2Zmc2V0UGFyZW50ICYmIGVsZW1lbnQubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gKGVsZW1lbnQgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZykub2Zmc2V0UGFyZW50O1xuICB9XG5cbiAgdmFyIG5vZGVOYW1lID0gb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudC5ub2RlTmFtZTtcblxuICBpZiAoIW5vZGVOYW1lIHx8IG5vZGVOYW1lID09PSAnQk9EWScgfHwgbm9kZU5hbWUgPT09ICdIVE1MJykge1xuICAgIHJldHVybiBlbGVtZW50ID8gZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgfVxuXG4gIC8vIC5vZmZzZXRQYXJlbnQgd2lsbCByZXR1cm4gdGhlIGNsb3Nlc3QgVEgsIFREIG9yIFRBQkxFIGluIGNhc2VcbiAgLy8gbm8gb2Zmc2V0UGFyZW50IGlzIHByZXNlbnQsIEkgaGF0ZSB0aGlzIGpvYi4uLlxuICBpZiAoWydUSCcsICdURCcsICdUQUJMRSddLmluZGV4T2Yob2Zmc2V0UGFyZW50Lm5vZGVOYW1lKSAhPT0gLTEgJiYgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KG9mZnNldFBhcmVudCwgJ3Bvc2l0aW9uJykgPT09ICdzdGF0aWMnKSB7XG4gICAgcmV0dXJuIGdldE9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudDtcbn1cblxuZnVuY3Rpb24gaXNPZmZzZXRDb250YWluZXIoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBub2RlTmFtZSA9PT0gJ0hUTUwnIHx8IGdldE9mZnNldFBhcmVudChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKSA9PT0gZWxlbWVudDtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgcm9vdCBub2RlIChkb2N1bWVudCwgc2hhZG93RE9NIHJvb3QpIG9mIHRoZSBnaXZlbiBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm5zIHtFbGVtZW50fSByb290IG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0Um9vdChub2RlKSB7XG4gIGlmIChub2RlLnBhcmVudE5vZGUgIT09IG51bGwpIHtcbiAgICByZXR1cm4gZ2V0Um9vdChub2RlLnBhcmVudE5vZGUpO1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogRmluZHMgdGhlIG9mZnNldCBwYXJlbnQgY29tbW9uIHRvIHRoZSB0d28gcHJvdmlkZWQgbm9kZXNcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDFcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudDJcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBjb21tb24gb2Zmc2V0IHBhcmVudFxuICovXG5mdW5jdGlvbiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBlbGVtZW50Mikge1xuICAvLyBUaGlzIGNoZWNrIGlzIG5lZWRlZCB0byBhdm9pZCBlcnJvcnMgaW4gY2FzZSBvbmUgb2YgdGhlIGVsZW1lbnRzIGlzbid0IGRlZmluZWQgZm9yIGFueSByZWFzb25cbiAgaWYgKCFlbGVtZW50MSB8fCAhZWxlbWVudDEubm9kZVR5cGUgfHwgIWVsZW1lbnQyIHx8ICFlbGVtZW50Mi5ub2RlVHlwZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICAvLyBIZXJlIHdlIG1ha2Ugc3VyZSB0byBnaXZlIGFzIFwic3RhcnRcIiB0aGUgZWxlbWVudCB0aGF0IGNvbWVzIGZpcnN0IGluIHRoZSBET01cbiAgdmFyIG9yZGVyID0gZWxlbWVudDEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oZWxlbWVudDIpICYgTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkc7XG4gIHZhciBzdGFydCA9IG9yZGVyID8gZWxlbWVudDEgOiBlbGVtZW50MjtcbiAgdmFyIGVuZCA9IG9yZGVyID8gZWxlbWVudDIgOiBlbGVtZW50MTtcblxuICAvLyBHZXQgY29tbW9uIGFuY2VzdG9yIGNvbnRhaW5lclxuICB2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICByYW5nZS5zZXRTdGFydChzdGFydCwgMCk7XG4gIHJhbmdlLnNldEVuZChlbmQsIDApO1xuICB2YXIgY29tbW9uQW5jZXN0b3JDb250YWluZXIgPSByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lcjtcblxuICAvLyBCb3RoIG5vZGVzIGFyZSBpbnNpZGUgI2RvY3VtZW50XG5cbiAgaWYgKGVsZW1lbnQxICE9PSBjb21tb25BbmNlc3RvckNvbnRhaW5lciAmJiBlbGVtZW50MiAhPT0gY29tbW9uQW5jZXN0b3JDb250YWluZXIgfHwgc3RhcnQuY29udGFpbnMoZW5kKSkge1xuICAgIGlmIChpc09mZnNldENvbnRhaW5lcihjb21tb25BbmNlc3RvckNvbnRhaW5lcikpIHtcbiAgICAgIHJldHVybiBjb21tb25BbmNlc3RvckNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0T2Zmc2V0UGFyZW50KGNvbW1vbkFuY2VzdG9yQ29udGFpbmVyKTtcbiAgfVxuXG4gIC8vIG9uZSBvZiB0aGUgbm9kZXMgaXMgaW5zaWRlIHNoYWRvd0RPTSwgZmluZCB3aGljaCBvbmVcbiAgdmFyIGVsZW1lbnQxcm9vdCA9IGdldFJvb3QoZWxlbWVudDEpO1xuICBpZiAoZWxlbWVudDFyb290Lmhvc3QpIHtcbiAgICByZXR1cm4gZmluZENvbW1vbk9mZnNldFBhcmVudChlbGVtZW50MXJvb3QuaG9zdCwgZWxlbWVudDIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmaW5kQ29tbW9uT2Zmc2V0UGFyZW50KGVsZW1lbnQxLCBnZXRSb290KGVsZW1lbnQyKS5ob3N0KTtcbiAgfVxufVxuXG4vKipcbiAqIEdldHMgdGhlIHNjcm9sbCB2YWx1ZSBvZiB0aGUgZ2l2ZW4gZWxlbWVudCBpbiB0aGUgZ2l2ZW4gc2lkZSAodG9wIGFuZCBsZWZ0KVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAYXJndW1lbnQge1N0cmluZ30gc2lkZSBgdG9wYCBvciBgbGVmdGBcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGFtb3VudCBvZiBzY3JvbGxlZCBwaXhlbHNcbiAqL1xuZnVuY3Rpb24gZ2V0U2Nyb2xsKGVsZW1lbnQpIHtcbiAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICd0b3AnO1xuXG4gIHZhciB1cHBlclNpZGUgPSBzaWRlID09PSAndG9wJyA/ICdzY3JvbGxUb3AnIDogJ3Njcm9sbExlZnQnO1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuXG4gIGlmIChub2RlTmFtZSA9PT0gJ0JPRFknIHx8IG5vZGVOYW1lID09PSAnSFRNTCcpIHtcbiAgICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgdmFyIHNjcm9sbGluZ0VsZW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuc2Nyb2xsaW5nRWxlbWVudCB8fCBodG1sO1xuICAgIHJldHVybiBzY3JvbGxpbmdFbGVtZW50W3VwcGVyU2lkZV07XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFt1cHBlclNpZGVdO1xufVxuXG4vKlxuICogU3VtIG9yIHN1YnRyYWN0IHRoZSBlbGVtZW50IHNjcm9sbCB2YWx1ZXMgKGxlZnQgYW5kIHRvcCkgZnJvbSBhIGdpdmVuIHJlY3Qgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gcmVjdCAtIFJlY3Qgb2JqZWN0IHlvdSB3YW50IHRvIGNoYW5nZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IGZyb20gdGhlIGZ1bmN0aW9uIHJlYWRzIHRoZSBzY3JvbGwgdmFsdWVzXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHN1YnRyYWN0IC0gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gc3VidHJhY3QgdGhlIHNjcm9sbCB2YWx1ZXNcbiAqIEByZXR1cm4ge09iamVjdH0gcmVjdCAtIFRoZSBtb2RpZmllciByZWN0IG9iamVjdFxuICovXG5mdW5jdGlvbiBpbmNsdWRlU2Nyb2xsKHJlY3QsIGVsZW1lbnQpIHtcbiAgdmFyIHN1YnRyYWN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTtcblxuICB2YXIgc2Nyb2xsVG9wID0gZ2V0U2Nyb2xsKGVsZW1lbnQsICd0b3AnKTtcbiAgdmFyIHNjcm9sbExlZnQgPSBnZXRTY3JvbGwoZWxlbWVudCwgJ2xlZnQnKTtcbiAgdmFyIG1vZGlmaWVyID0gc3VidHJhY3QgPyAtMSA6IDE7XG4gIHJlY3QudG9wICs9IHNjcm9sbFRvcCAqIG1vZGlmaWVyO1xuICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3AgKiBtb2RpZmllcjtcbiAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQgKiBtb2RpZmllcjtcbiAgcmVjdC5yaWdodCArPSBzY3JvbGxMZWZ0ICogbW9kaWZpZXI7XG4gIHJldHVybiByZWN0O1xufVxuXG4vKlxuICogSGVscGVyIHRvIGRldGVjdCBib3JkZXJzIG9mIGEgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZXNcbiAqIFJlc3VsdCBvZiBgZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5YCBvbiB0aGUgZ2l2ZW4gZWxlbWVudFxuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgLSBgeGAgb3IgYHlgXG4gKiBAcmV0dXJuIHtudW1iZXJ9IGJvcmRlcnMgLSBUaGUgYm9yZGVycyBzaXplIG9mIHRoZSBnaXZlbiBheGlzXG4gKi9cblxuZnVuY3Rpb24gZ2V0Qm9yZGVyc1NpemUoc3R5bGVzLCBheGlzKSB7XG4gIHZhciBzaWRlQSA9IGF4aXMgPT09ICd4JyA/ICdMZWZ0JyA6ICdUb3AnO1xuICB2YXIgc2lkZUIgPSBzaWRlQSA9PT0gJ0xlZnQnID8gJ1JpZ2h0JyA6ICdCb3R0b20nO1xuXG4gIHJldHVybiBwYXJzZUZsb2F0KHN0eWxlc1snYm9yZGVyJyArIHNpZGVBICsgJ1dpZHRoJ10pICsgcGFyc2VGbG9hdChzdHlsZXNbJ2JvcmRlcicgKyBzaWRlQiArICdXaWR0aCddKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2l6ZShheGlzLCBib2R5LCBodG1sLCBjb21wdXRlZFN0eWxlKSB7XG4gIHJldHVybiBNYXRoLm1heChib2R5WydvZmZzZXQnICsgYXhpc10sIGJvZHlbJ3Njcm9sbCcgKyBheGlzXSwgaHRtbFsnY2xpZW50JyArIGF4aXNdLCBodG1sWydvZmZzZXQnICsgYXhpc10sIGh0bWxbJ3Njcm9sbCcgKyBheGlzXSwgaXNJRSgxMCkgPyBwYXJzZUludChodG1sWydvZmZzZXQnICsgYXhpc10pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdUb3AnIDogJ0xlZnQnKV0pICsgcGFyc2VJbnQoY29tcHV0ZWRTdHlsZVsnbWFyZ2luJyArIChheGlzID09PSAnSGVpZ2h0JyA/ICdCb3R0b20nIDogJ1JpZ2h0JyldKSA6IDApO1xufVxuXG5mdW5jdGlvbiBnZXRXaW5kb3dTaXplcyhkb2N1bWVudCkge1xuICB2YXIgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIHZhciBodG1sID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IGlzSUUoMTApICYmIGdldENvbXB1dGVkU3R5bGUoaHRtbCk7XG5cbiAgcmV0dXJuIHtcbiAgICBoZWlnaHQ6IGdldFNpemUoJ0hlaWdodCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpLFxuICAgIHdpZHRoOiBnZXRTaXplKCdXaWR0aCcsIGJvZHksIGh0bWwsIGNvbXB1dGVkU3R5bGUpXG4gIH07XG59XG5cbnZhciBjbGFzc0NhbGxDaGVjayA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59O1xuXG52YXIgY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gICAgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgICBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgICByZXR1cm4gQ29uc3RydWN0b3I7XG4gIH07XG59KCk7XG5cblxuXG5cblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBHaXZlbiBlbGVtZW50IG9mZnNldHMsIGdlbmVyYXRlIGFuIG91dHB1dCBzaW1pbGFyIHRvIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IG9mZnNldHNcbiAqIEByZXR1cm5zIHtPYmplY3R9IENsaWVudFJlY3QgbGlrZSBvdXRwdXRcbiAqL1xuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdChvZmZzZXRzKSB7XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb2Zmc2V0cywge1xuICAgIHJpZ2h0OiBvZmZzZXRzLmxlZnQgKyBvZmZzZXRzLndpZHRoLFxuICAgIGJvdHRvbTogb2Zmc2V0cy50b3AgKyBvZmZzZXRzLmhlaWdodFxuICB9KTtcbn1cblxuLyoqXG4gKiBHZXQgYm91bmRpbmcgY2xpZW50IHJlY3Qgb2YgZ2l2ZW4gZWxlbWVudFxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybiB7T2JqZWN0fSBjbGllbnQgcmVjdFxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IHt9O1xuXG4gIC8vIElFMTAgMTAgRklYOiBQbGVhc2UsIGRvbid0IGFzaywgdGhlIGVsZW1lbnQgaXNuJ3RcbiAgLy8gY29uc2lkZXJlZCBpbiBET00gaW4gc29tZSBjaXJjdW1zdGFuY2VzLi4uXG4gIC8vIFRoaXMgaXNuJ3QgcmVwcm9kdWNpYmxlIGluIElFMTAgY29tcGF0aWJpbGl0eSBtb2RlIG9mIElFMTFcbiAgdHJ5IHtcbiAgICBpZiAoaXNJRSgxMCkpIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdmFyIHNjcm9sbFRvcCA9IGdldFNjcm9sbChlbGVtZW50LCAndG9wJyk7XG4gICAgICB2YXIgc2Nyb2xsTGVmdCA9IGdldFNjcm9sbChlbGVtZW50LCAnbGVmdCcpO1xuICAgICAgcmVjdC50b3AgKz0gc2Nyb2xsVG9wO1xuICAgICAgcmVjdC5sZWZ0ICs9IHNjcm9sbExlZnQ7XG4gICAgICByZWN0LmJvdHRvbSArPSBzY3JvbGxUb3A7XG4gICAgICByZWN0LnJpZ2h0ICs9IHNjcm9sbExlZnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIGxlZnQ6IHJlY3QubGVmdCxcbiAgICB0b3A6IHJlY3QudG9wLFxuICAgIHdpZHRoOiByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0LFxuICAgIGhlaWdodDogcmVjdC5ib3R0b20gLSByZWN0LnRvcFxuICB9O1xuXG4gIC8vIHN1YnRyYWN0IHNjcm9sbGJhciBzaXplIGZyb20gc2l6ZXNcbiAgdmFyIHNpemVzID0gZWxlbWVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnID8gZ2V0V2luZG93U2l6ZXMoZWxlbWVudC5vd25lckRvY3VtZW50KSA6IHt9O1xuICB2YXIgd2lkdGggPSBzaXplcy53aWR0aCB8fCBlbGVtZW50LmNsaWVudFdpZHRoIHx8IHJlc3VsdC53aWR0aDtcbiAgdmFyIGhlaWdodCA9IHNpemVzLmhlaWdodCB8fCBlbGVtZW50LmNsaWVudEhlaWdodCB8fCByZXN1bHQuaGVpZ2h0O1xuXG4gIHZhciBob3JpelNjcm9sbGJhciA9IGVsZW1lbnQub2Zmc2V0V2lkdGggLSB3aWR0aDtcbiAgdmFyIHZlcnRTY3JvbGxiYXIgPSBlbGVtZW50Lm9mZnNldEhlaWdodCAtIGhlaWdodDtcblxuICAvLyBpZiBhbiBoeXBvdGhldGljYWwgc2Nyb2xsYmFyIGlzIGRldGVjdGVkLCB3ZSBtdXN0IGJlIHN1cmUgaXQncyBub3QgYSBgYm9yZGVyYFxuICAvLyB3ZSBtYWtlIHRoaXMgY2hlY2sgY29uZGl0aW9uYWwgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnNcbiAgaWYgKGhvcml6U2Nyb2xsYmFyIHx8IHZlcnRTY3JvbGxiYXIpIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KGVsZW1lbnQpO1xuICAgIGhvcml6U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3gnKTtcbiAgICB2ZXJ0U2Nyb2xsYmFyIC09IGdldEJvcmRlcnNTaXplKHN0eWxlcywgJ3knKTtcblxuICAgIHJlc3VsdC53aWR0aCAtPSBob3JpelNjcm9sbGJhcjtcbiAgICByZXN1bHQuaGVpZ2h0IC09IHZlcnRTY3JvbGxiYXI7XG4gIH1cblxuICByZXR1cm4gZ2V0Q2xpZW50UmVjdChyZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoY2hpbGRyZW4sIHBhcmVudCkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG5cbiAgdmFyIGlzSUUxMCA9IGlzSUUoMTApO1xuICB2YXIgaXNIVE1MID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCc7XG4gIHZhciBjaGlsZHJlblJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoY2hpbGRyZW4pO1xuICB2YXIgcGFyZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChwYXJlbnQpO1xuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGNoaWxkcmVuKTtcblxuICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVDb21wdXRlZFByb3BlcnR5KHBhcmVudCk7XG4gIHZhciBib3JkZXJUb3BXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlclRvcFdpZHRoKTtcbiAgdmFyIGJvcmRlckxlZnRXaWR0aCA9IHBhcnNlRmxvYXQoc3R5bGVzLmJvcmRlckxlZnRXaWR0aCk7XG5cbiAgLy8gSW4gY2FzZXMgd2hlcmUgdGhlIHBhcmVudCBpcyBmaXhlZCwgd2UgbXVzdCBpZ25vcmUgbmVnYXRpdmUgc2Nyb2xsIGluIG9mZnNldCBjYWxjXG4gIGlmIChmaXhlZFBvc2l0aW9uICYmIGlzSFRNTCkge1xuICAgIHBhcmVudFJlY3QudG9wID0gTWF0aC5tYXgocGFyZW50UmVjdC50b3AsIDApO1xuICAgIHBhcmVudFJlY3QubGVmdCA9IE1hdGgubWF4KHBhcmVudFJlY3QubGVmdCwgMCk7XG4gIH1cbiAgdmFyIG9mZnNldHMgPSBnZXRDbGllbnRSZWN0KHtcbiAgICB0b3A6IGNoaWxkcmVuUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCAtIGJvcmRlclRvcFdpZHRoLFxuICAgIGxlZnQ6IGNoaWxkcmVuUmVjdC5sZWZ0IC0gcGFyZW50UmVjdC5sZWZ0IC0gYm9yZGVyTGVmdFdpZHRoLFxuICAgIHdpZHRoOiBjaGlsZHJlblJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiBjaGlsZHJlblJlY3QuaGVpZ2h0XG4gIH0pO1xuICBvZmZzZXRzLm1hcmdpblRvcCA9IDA7XG4gIG9mZnNldHMubWFyZ2luTGVmdCA9IDA7XG5cbiAgLy8gU3VidHJhY3QgbWFyZ2lucyBvZiBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBpdCdzIGJlaW5nIHVzZWQgYXMgcGFyZW50XG4gIC8vIHdlIGRvIHRoaXMgb25seSBvbiBIVE1MIGJlY2F1c2UgaXQncyB0aGUgb25seSBlbGVtZW50IHRoYXQgYmVoYXZlc1xuICAvLyBkaWZmZXJlbnRseSB3aGVuIG1hcmdpbnMgYXJlIGFwcGxpZWQgdG8gaXQuIFRoZSBtYXJnaW5zIGFyZSBpbmNsdWRlZCBpblxuICAvLyB0aGUgYm94IG9mIHRoZSBkb2N1bWVudEVsZW1lbnQsIGluIHRoZSBvdGhlciBjYXNlcyBub3QuXG4gIGlmICghaXNJRTEwICYmIGlzSFRNTCkge1xuICAgIHZhciBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5Ub3ApO1xuICAgIHZhciBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luTGVmdCk7XG5cbiAgICBvZmZzZXRzLnRvcCAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmJvdHRvbSAtPSBib3JkZXJUb3BXaWR0aCAtIG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLmxlZnQgLT0gYm9yZGVyTGVmdFdpZHRoIC0gbWFyZ2luTGVmdDtcbiAgICBvZmZzZXRzLnJpZ2h0IC09IGJvcmRlckxlZnRXaWR0aCAtIG1hcmdpbkxlZnQ7XG5cbiAgICAvLyBBdHRhY2ggbWFyZ2luVG9wIGFuZCBtYXJnaW5MZWZ0IGJlY2F1c2UgaW4gc29tZSBjaXJjdW1zdGFuY2VzIHdlIG1heSBuZWVkIHRoZW1cbiAgICBvZmZzZXRzLm1hcmdpblRvcCA9IG1hcmdpblRvcDtcbiAgICBvZmZzZXRzLm1hcmdpbkxlZnQgPSBtYXJnaW5MZWZ0O1xuICB9XG5cbiAgaWYgKGlzSUUxMCAmJiAhZml4ZWRQb3NpdGlvbiA/IHBhcmVudC5jb250YWlucyhzY3JvbGxQYXJlbnQpIDogcGFyZW50ID09PSBzY3JvbGxQYXJlbnQgJiYgc2Nyb2xsUGFyZW50Lm5vZGVOYW1lICE9PSAnQk9EWScpIHtcbiAgICBvZmZzZXRzID0gaW5jbHVkZVNjcm9sbChvZmZzZXRzLCBwYXJlbnQpO1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59XG5cbmZ1bmN0aW9uIGdldFZpZXdwb3J0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcnRiaXRyYXJ5Tm9kZShlbGVtZW50KSB7XG4gIHZhciBleGNsdWRlU2Nyb2xsID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcblxuICB2YXIgaHRtbCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIHZhciByZWxhdGl2ZU9mZnNldCA9IGdldE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJiaXRyYXJ5Tm9kZShlbGVtZW50LCBodG1sKTtcbiAgdmFyIHdpZHRoID0gTWF0aC5tYXgoaHRtbC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gIHZhciBoZWlnaHQgPSBNYXRoLm1heChodG1sLmNsaWVudEhlaWdodCwgd2luZG93LmlubmVySGVpZ2h0IHx8IDApO1xuXG4gIHZhciBzY3JvbGxUb3AgPSAhZXhjbHVkZVNjcm9sbCA/IGdldFNjcm9sbChodG1sKSA6IDA7XG4gIHZhciBzY3JvbGxMZWZ0ID0gIWV4Y2x1ZGVTY3JvbGwgPyBnZXRTY3JvbGwoaHRtbCwgJ2xlZnQnKSA6IDA7XG5cbiAgdmFyIG9mZnNldCA9IHtcbiAgICB0b3A6IHNjcm9sbFRvcCAtIHJlbGF0aXZlT2Zmc2V0LnRvcCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpblRvcCxcbiAgICBsZWZ0OiBzY3JvbGxMZWZ0IC0gcmVsYXRpdmVPZmZzZXQubGVmdCArIHJlbGF0aXZlT2Zmc2V0Lm1hcmdpbkxlZnQsXG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0XG4gIH07XG5cbiAgcmV0dXJuIGdldENsaWVudFJlY3Qob2Zmc2V0KTtcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZWxlbWVudCBpcyBmaXhlZCBvciBpcyBpbnNpZGUgYSBmaXhlZCBwYXJlbnRcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7RWxlbWVudH0gZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBjdXN0b21Db250YWluZXJcbiAqIEByZXR1cm5zIHtCb29sZWFufSBhbnN3ZXIgdG8gXCJpc0ZpeGVkP1wiXG4gKi9cbmZ1bmN0aW9uIGlzRml4ZWQoZWxlbWVudCkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtZW50Lm5vZGVOYW1lO1xuICBpZiAobm9kZU5hbWUgPT09ICdCT0RZJyB8fCBub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChnZXRTdHlsZUNvbXB1dGVkUHJvcGVydHkoZWxlbWVudCwgJ3Bvc2l0aW9uJykgPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgcGFyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG4gIGlmICghcGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gaXNGaXhlZChwYXJlbnROb2RlKTtcbn1cblxuLyoqXG4gKiBGaW5kcyB0aGUgZmlyc3QgcGFyZW50IG9mIGFuIGVsZW1lbnQgdGhhdCBoYXMgYSB0cmFuc2Zvcm1lZCBwcm9wZXJ0eSBkZWZpbmVkXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtFbGVtZW50fSBmaXJzdCB0cmFuc2Zvcm1lZCBwYXJlbnQgb3IgZG9jdW1lbnRFbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gZ2V0Rml4ZWRQb3NpdGlvbk9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIC8vIFRoaXMgY2hlY2sgaXMgbmVlZGVkIHRvIGF2b2lkIGVycm9ycyBpbiBjYXNlIG9uZSBvZiB0aGUgZWxlbWVudHMgaXNuJ3QgZGVmaW5lZCBmb3IgYW55IHJlYXNvblxuICBpZiAoIWVsZW1lbnQgfHwgIWVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBpc0lFKCkpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB9XG4gIHZhciBlbCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcbiAgd2hpbGUgKGVsICYmIGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShlbCwgJ3RyYW5zZm9ybScpID09PSAnbm9uZScpIHtcbiAgICBlbCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIGVsIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbn1cblxuLyoqXG4gKiBDb21wdXRlZCB0aGUgYm91bmRhcmllcyBsaW1pdHMgYW5kIHJldHVybiB0aGVtXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXJcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJlZmVyZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IHBhZGRpbmdcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGJvdW5kYXJpZXNFbGVtZW50IC0gRWxlbWVudCB1c2VkIHRvIGRlZmluZSB0aGUgYm91bmRhcmllc1xuICogQHBhcmFtIHtCb29sZWFufSBmaXhlZFBvc2l0aW9uIC0gSXMgaW4gZml4ZWQgcG9zaXRpb24gbW9kZVxuICogQHJldHVybnMge09iamVjdH0gQ29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kYXJpZXNcbiAqL1xuZnVuY3Rpb24gZ2V0Qm91bmRhcmllcyhwb3BwZXIsIHJlZmVyZW5jZSwgcGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQpIHtcbiAgdmFyIGZpeGVkUG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IGZhbHNlO1xuXG4gIC8vIE5PVEU6IDEgRE9NIGFjY2VzcyBoZXJlXG5cbiAgdmFyIGJvdW5kYXJpZXMgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkpO1xuXG4gIC8vIEhhbmRsZSB2aWV3cG9ydCBjYXNlXG4gIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3ZpZXdwb3J0Jykge1xuICAgIGJvdW5kYXJpZXMgPSBnZXRWaWV3cG9ydE9mZnNldFJlY3RSZWxhdGl2ZVRvQXJ0Yml0cmFyeU5vZGUob2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBIYW5kbGUgb3RoZXIgY2FzZXMgYmFzZWQgb24gRE9NIGVsZW1lbnQgdXNlZCBhcyBib3VuZGFyaWVzXG4gICAgdmFyIGJvdW5kYXJpZXNOb2RlID0gdm9pZCAwO1xuICAgIGlmIChib3VuZGFyaWVzRWxlbWVudCA9PT0gJ3Njcm9sbFBhcmVudCcpIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gZ2V0U2Nyb2xsUGFyZW50KGdldFBhcmVudE5vZGUocmVmZXJlbmNlKSk7XG4gICAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdCT0RZJykge1xuICAgICAgICBib3VuZGFyaWVzTm9kZSA9IHBvcHBlci5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGJvdW5kYXJpZXNFbGVtZW50ID09PSAnd2luZG93Jykge1xuICAgICAgYm91bmRhcmllc05vZGUgPSBwb3BwZXIub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdW5kYXJpZXNOb2RlID0gYm91bmRhcmllc0VsZW1lbnQ7XG4gICAgfVxuXG4gICAgdmFyIG9mZnNldHMgPSBnZXRPZmZzZXRSZWN0UmVsYXRpdmVUb0FyYml0cmFyeU5vZGUoYm91bmRhcmllc05vZGUsIG9mZnNldFBhcmVudCwgZml4ZWRQb3NpdGlvbik7XG5cbiAgICAvLyBJbiBjYXNlIG9mIEhUTUwsIHdlIG5lZWQgYSBkaWZmZXJlbnQgY29tcHV0YXRpb25cbiAgICBpZiAoYm91bmRhcmllc05vZGUubm9kZU5hbWUgPT09ICdIVE1MJyAmJiAhaXNGaXhlZChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICB2YXIgX2dldFdpbmRvd1NpemVzID0gZ2V0V2luZG93U2l6ZXMocG9wcGVyLm93bmVyRG9jdW1lbnQpLFxuICAgICAgICAgIGhlaWdodCA9IF9nZXRXaW5kb3dTaXplcy5oZWlnaHQsXG4gICAgICAgICAgd2lkdGggPSBfZ2V0V2luZG93U2l6ZXMud2lkdGg7XG5cbiAgICAgIGJvdW5kYXJpZXMudG9wICs9IG9mZnNldHMudG9wIC0gb2Zmc2V0cy5tYXJnaW5Ub3A7XG4gICAgICBib3VuZGFyaWVzLmJvdHRvbSA9IGhlaWdodCArIG9mZnNldHMudG9wO1xuICAgICAgYm91bmRhcmllcy5sZWZ0ICs9IG9mZnNldHMubGVmdCAtIG9mZnNldHMubWFyZ2luTGVmdDtcbiAgICAgIGJvdW5kYXJpZXMucmlnaHQgPSB3aWR0aCArIG9mZnNldHMubGVmdDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZm9yIGFsbCB0aGUgb3RoZXIgRE9NIGVsZW1lbnRzLCB0aGlzIG9uZSBpcyBnb29kXG4gICAgICBib3VuZGFyaWVzID0gb2Zmc2V0cztcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgcGFkZGluZ3NcbiAgcGFkZGluZyA9IHBhZGRpbmcgfHwgMDtcbiAgdmFyIGlzUGFkZGluZ051bWJlciA9IHR5cGVvZiBwYWRkaW5nID09PSAnbnVtYmVyJztcbiAgYm91bmRhcmllcy5sZWZ0ICs9IGlzUGFkZGluZ051bWJlciA/IHBhZGRpbmcgOiBwYWRkaW5nLmxlZnQgfHwgMDtcbiAgYm91bmRhcmllcy50b3AgKz0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcudG9wIHx8IDA7XG4gIGJvdW5kYXJpZXMucmlnaHQgLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcucmlnaHQgfHwgMDtcbiAgYm91bmRhcmllcy5ib3R0b20gLT0gaXNQYWRkaW5nTnVtYmVyID8gcGFkZGluZyA6IHBhZGRpbmcuYm90dG9tIHx8IDA7XG5cbiAgcmV0dXJuIGJvdW5kYXJpZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFyZWEoX3JlZikge1xuICB2YXIgd2lkdGggPSBfcmVmLndpZHRoLFxuICAgICAgaGVpZ2h0ID0gX3JlZi5oZWlnaHQ7XG5cbiAgcmV0dXJuIHdpZHRoICogaGVpZ2h0O1xufVxuXG4vKipcbiAqIFV0aWxpdHkgdXNlZCB0byB0cmFuc2Zvcm0gdGhlIGBhdXRvYCBwbGFjZW1lbnQgdG8gdGhlIHBsYWNlbWVudCB3aXRoIG1vcmVcbiAqIGF2YWlsYWJsZSBzcGFjZS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVBdXRvUGxhY2VtZW50KHBsYWNlbWVudCwgcmVmUmVjdCwgcG9wcGVyLCByZWZlcmVuY2UsIGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gIHZhciBwYWRkaW5nID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiAwO1xuXG4gIGlmIChwbGFjZW1lbnQuaW5kZXhPZignYXV0bycpID09PSAtMSkge1xuICAgIHJldHVybiBwbGFjZW1lbnQ7XG4gIH1cblxuICB2YXIgYm91bmRhcmllcyA9IGdldEJvdW5kYXJpZXMocG9wcGVyLCByZWZlcmVuY2UsIHBhZGRpbmcsIGJvdW5kYXJpZXNFbGVtZW50KTtcblxuICB2YXIgcmVjdHMgPSB7XG4gICAgdG9wOiB7XG4gICAgICB3aWR0aDogYm91bmRhcmllcy53aWR0aCxcbiAgICAgIGhlaWdodDogcmVmUmVjdC50b3AgLSBib3VuZGFyaWVzLnRvcFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHdpZHRoOiBib3VuZGFyaWVzLnJpZ2h0IC0gcmVmUmVjdC5yaWdodCxcbiAgICAgIGhlaWdodDogYm91bmRhcmllcy5oZWlnaHRcbiAgICB9LFxuICAgIGJvdHRvbToge1xuICAgICAgd2lkdGg6IGJvdW5kYXJpZXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuYm90dG9tIC0gcmVmUmVjdC5ib3R0b21cbiAgICB9LFxuICAgIGxlZnQ6IHtcbiAgICAgIHdpZHRoOiByZWZSZWN0LmxlZnQgLSBib3VuZGFyaWVzLmxlZnQsXG4gICAgICBoZWlnaHQ6IGJvdW5kYXJpZXMuaGVpZ2h0XG4gICAgfVxuICB9O1xuXG4gIHZhciBzb3J0ZWRBcmVhcyA9IE9iamVjdC5rZXlzKHJlY3RzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBrZXk6IGtleVxuICAgIH0sIHJlY3RzW2tleV0sIHtcbiAgICAgIGFyZWE6IGdldEFyZWEocmVjdHNba2V5XSlcbiAgICB9KTtcbiAgfSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBiLmFyZWEgLSBhLmFyZWE7XG4gIH0pO1xuXG4gIHZhciBmaWx0ZXJlZEFyZWFzID0gc29ydGVkQXJlYXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciB3aWR0aCA9IF9yZWYyLndpZHRoLFxuICAgICAgICBoZWlnaHQgPSBfcmVmMi5oZWlnaHQ7XG4gICAgcmV0dXJuIHdpZHRoID49IHBvcHBlci5jbGllbnRXaWR0aCAmJiBoZWlnaHQgPj0gcG9wcGVyLmNsaWVudEhlaWdodDtcbiAgfSk7XG5cbiAgdmFyIGNvbXB1dGVkUGxhY2VtZW50ID0gZmlsdGVyZWRBcmVhcy5sZW5ndGggPiAwID8gZmlsdGVyZWRBcmVhc1swXS5rZXkgOiBzb3J0ZWRBcmVhc1swXS5rZXk7XG5cbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzFdO1xuXG4gIHJldHVybiBjb21wdXRlZFBsYWNlbWVudCArICh2YXJpYXRpb24gPyAnLScgKyB2YXJpYXRpb24gOiAnJyk7XG59XG5cbi8qKlxuICogR2V0IG9mZnNldHMgdG8gdGhlIHJlZmVyZW5jZSBlbGVtZW50XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhdGVcbiAqIEBwYXJhbSB7RWxlbWVudH0gcG9wcGVyIC0gdGhlIHBvcHBlciBlbGVtZW50XG4gKiBAcGFyYW0ge0VsZW1lbnR9IHJlZmVyZW5jZSAtIHRoZSByZWZlcmVuY2UgZWxlbWVudCAodGhlIHBvcHBlciB3aWxsIGJlIHJlbGF0aXZlIHRvIHRoaXMpXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGZpeGVkUG9zaXRpb24gLSBpcyBpbiBmaXhlZCBwb3NpdGlvbiBtb2RlXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VPZmZzZXRzKHN0YXRlLCBwb3BwZXIsIHJlZmVyZW5jZSkge1xuICB2YXIgZml4ZWRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB2YXIgY29tbW9uT2Zmc2V0UGFyZW50ID0gZml4ZWRQb3NpdGlvbiA/IGdldEZpeGVkUG9zaXRpb25PZmZzZXRQYXJlbnQocG9wcGVyKSA6IGZpbmRDb21tb25PZmZzZXRQYXJlbnQocG9wcGVyLCBnZXRSZWZlcmVuY2VOb2RlKHJlZmVyZW5jZSkpO1xuICByZXR1cm4gZ2V0T2Zmc2V0UmVjdFJlbGF0aXZlVG9BcmJpdHJhcnlOb2RlKHJlZmVyZW5jZSwgY29tbW9uT2Zmc2V0UGFyZW50LCBmaXhlZFBvc2l0aW9uKTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG91dGVyIHNpemVzIG9mIHRoZSBnaXZlbiBlbGVtZW50IChvZmZzZXQgc2l6ZSArIG1hcmdpbnMpXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IG9iamVjdCBjb250YWluaW5nIHdpZHRoIGFuZCBoZWlnaHQgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRPdXRlclNpemVzKGVsZW1lbnQpIHtcbiAgdmFyIHdpbmRvdyA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICB2YXIgeCA9IHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpblRvcCB8fCAwKSArIHBhcnNlRmxvYXQoc3R5bGVzLm1hcmdpbkJvdHRvbSB8fCAwKTtcbiAgdmFyIHkgPSBwYXJzZUZsb2F0KHN0eWxlcy5tYXJnaW5MZWZ0IHx8IDApICsgcGFyc2VGbG9hdChzdHlsZXMubWFyZ2luUmlnaHQgfHwgMCk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgd2lkdGg6IGVsZW1lbnQub2Zmc2V0V2lkdGggKyB5LFxuICAgIGhlaWdodDogZWxlbWVudC5vZmZzZXRIZWlnaHQgKyB4XG4gIH07XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogR2V0IHRoZSBvcHBvc2l0ZSBwbGFjZW1lbnQgb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudFxuICogQHJldHVybnMge1N0cmluZ30gZmxpcHBlZCBwbGFjZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHZhciBoYXNoID0geyBsZWZ0OiAncmlnaHQnLCByaWdodDogJ2xlZnQnLCBib3R0b206ICd0b3AnLCB0b3A6ICdib3R0b20nIH07XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCBvZmZzZXRzIHRvIHRoZSBwb3BwZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwb3NpdGlvbiAtIENTUyBwb3NpdGlvbiB0aGUgUG9wcGVyIHdpbGwgZ2V0IGFwcGxpZWRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBvcHBlciAtIHRoZSBwb3BwZXIgZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IHJlZmVyZW5jZU9mZnNldHMgLSB0aGUgcmVmZXJlbmNlIG9mZnNldHMgKHRoZSBwb3BwZXIgd2lsbCBiZSByZWxhdGl2ZSB0byB0aGlzKVxuICogQHBhcmFtIHtTdHJpbmd9IHBsYWNlbWVudCAtIG9uZSBvZiB0aGUgdmFsaWQgcGxhY2VtZW50IG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IHBvcHBlck9mZnNldHMgLSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgb2Zmc2V0cyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlclxuICovXG5mdW5jdGlvbiBnZXRQb3BwZXJPZmZzZXRzKHBvcHBlciwgcmVmZXJlbmNlT2Zmc2V0cywgcGxhY2VtZW50KSB7XG4gIHBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuXG4gIC8vIEdldCBwb3BwZXIgbm9kZSBzaXplc1xuICB2YXIgcG9wcGVyUmVjdCA9IGdldE91dGVyU2l6ZXMocG9wcGVyKTtcblxuICAvLyBBZGQgcG9zaXRpb24sIHdpZHRoIGFuZCBoZWlnaHQgdG8gb3VyIG9mZnNldHMgb2JqZWN0XG4gIHZhciBwb3BwZXJPZmZzZXRzID0ge1xuICAgIHdpZHRoOiBwb3BwZXJSZWN0LndpZHRoLFxuICAgIGhlaWdodDogcG9wcGVyUmVjdC5oZWlnaHRcbiAgfTtcblxuICAvLyBkZXBlbmRpbmcgYnkgdGhlIHBvcHBlciBwbGFjZW1lbnQgd2UgaGF2ZSB0byBjb21wdXRlIGl0cyBvZmZzZXRzIHNsaWdodGx5IGRpZmZlcmVudGx5XG4gIHZhciBpc0hvcml6ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcbiAgdmFyIG1haW5TaWRlID0gaXNIb3JpeiA/ICd0b3AnIDogJ2xlZnQnO1xuICB2YXIgc2Vjb25kYXJ5U2lkZSA9IGlzSG9yaXogPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG1lYXN1cmVtZW50ID0gaXNIb3JpeiA/ICdoZWlnaHQnIDogJ3dpZHRoJztcbiAgdmFyIHNlY29uZGFyeU1lYXN1cmVtZW50ID0gIWlzSG9yaXogPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgcG9wcGVyT2Zmc2V0c1ttYWluU2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW21haW5TaWRlXSArIHJlZmVyZW5jZU9mZnNldHNbbWVhc3VyZW1lbnRdIC8gMiAtIHBvcHBlclJlY3RbbWVhc3VyZW1lbnRdIC8gMjtcbiAgaWYgKHBsYWNlbWVudCA9PT0gc2Vjb25kYXJ5U2lkZSkge1xuICAgIHBvcHBlck9mZnNldHNbc2Vjb25kYXJ5U2lkZV0gPSByZWZlcmVuY2VPZmZzZXRzW3NlY29uZGFyeVNpZGVdIC0gcG9wcGVyUmVjdFtzZWNvbmRhcnlNZWFzdXJlbWVudF07XG4gIH0gZWxzZSB7XG4gICAgcG9wcGVyT2Zmc2V0c1tzZWNvbmRhcnlTaWRlXSA9IHJlZmVyZW5jZU9mZnNldHNbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoc2Vjb25kYXJ5U2lkZSldO1xuICB9XG5cbiAgcmV0dXJuIHBvcHBlck9mZnNldHM7XG59XG5cbi8qKlxuICogTWltaWNzIHRoZSBgZmluZGAgbWV0aG9kIG9mIEFycmF5XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmQoYXJyLCBjaGVjaykge1xuICAvLyB1c2UgbmF0aXZlIGZpbmQgaWYgc3VwcG9ydGVkXG4gIGlmIChBcnJheS5wcm90b3R5cGUuZmluZCkge1xuICAgIHJldHVybiBhcnIuZmluZChjaGVjayk7XG4gIH1cblxuICAvLyB1c2UgYGZpbHRlcmAgdG8gb2J0YWluIHRoZSBzYW1lIGJlaGF2aW9yIG9mIGBmaW5kYFxuICByZXR1cm4gYXJyLmZpbHRlcihjaGVjaylbMF07XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hpbmcgb2JqZWN0XG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0FycmF5fSBhcnJcbiAqIEBhcmd1bWVudCBwcm9wXG4gKiBAYXJndW1lbnQgdmFsdWVcbiAqIEByZXR1cm5zIGluZGV4IG9yIC0xXG4gKi9cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHByb3AsIHZhbHVlKSB7XG4gIC8vIHVzZSBuYXRpdmUgZmluZEluZGV4IGlmIHN1cHBvcnRlZFxuICBpZiAoQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCkge1xuICAgIHJldHVybiBhcnIuZmluZEluZGV4KGZ1bmN0aW9uIChjdXIpIHtcbiAgICAgIHJldHVybiBjdXJbcHJvcF0gPT09IHZhbHVlO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gdXNlIGBmaW5kYCArIGBpbmRleE9mYCBpZiBgZmluZEluZGV4YCBpc24ndCBzdXBwb3J0ZWRcbiAgdmFyIG1hdGNoID0gZmluZChhcnIsIGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqW3Byb3BdID09PSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiBhcnIuaW5kZXhPZihtYXRjaCk7XG59XG5cbi8qKlxuICogTG9vcCB0cm91Z2ggdGhlIGxpc3Qgb2YgbW9kaWZpZXJzIGFuZCBydW4gdGhlbSBpbiBvcmRlcixcbiAqIGVhY2ggb2YgdGhlbSB3aWxsIHRoZW4gZWRpdCB0aGUgZGF0YSBvYmplY3QuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge2RhdGFPYmplY3R9IGRhdGFcbiAqIEBwYXJhbSB7QXJyYXl9IG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IGVuZHMgLSBPcHRpb25hbCBtb2RpZmllciBuYW1lIHVzZWQgYXMgc3RvcHBlclxuICogQHJldHVybnMge2RhdGFPYmplY3R9XG4gKi9cbmZ1bmN0aW9uIHJ1bk1vZGlmaWVycyhtb2RpZmllcnMsIGRhdGEsIGVuZHMpIHtcbiAgdmFyIG1vZGlmaWVyc1RvUnVuID0gZW5kcyA9PT0gdW5kZWZpbmVkID8gbW9kaWZpZXJzIDogbW9kaWZpZXJzLnNsaWNlKDAsIGZpbmRJbmRleChtb2RpZmllcnMsICduYW1lJywgZW5kcykpO1xuXG4gIG1vZGlmaWVyc1RvUnVuLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKG1vZGlmaWVyWydmdW5jdGlvbiddKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGRvdC1ub3RhdGlvblxuICAgICAgY29uc29sZS53YXJuKCdgbW9kaWZpZXIuZnVuY3Rpb25gIGlzIGRlcHJlY2F0ZWQsIHVzZSBgbW9kaWZpZXIuZm5gIScpO1xuICAgIH1cbiAgICB2YXIgZm4gPSBtb2RpZmllclsnZnVuY3Rpb24nXSB8fCBtb2RpZmllci5mbjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICBpZiAobW9kaWZpZXIuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgLy8gQWRkIHByb3BlcnRpZXMgdG8gb2Zmc2V0cyB0byBtYWtlIHRoZW0gYSBjb21wbGV0ZSBjbGllbnRSZWN0IG9iamVjdFxuICAgICAgLy8gd2UgZG8gdGhpcyBiZWZvcmUgZWFjaCBtb2RpZmllciB0byBtYWtlIHN1cmUgdGhlIHByZXZpb3VzIG9uZSBkb2Vzbid0XG4gICAgICAvLyBtZXNzIHdpdGggdGhlc2UgdmFsdWVzXG4gICAgICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcbiAgICAgIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRDbGllbnRSZWN0KGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UpO1xuXG4gICAgICBkYXRhID0gZm4oZGF0YSwgbW9kaWZpZXIpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogVXBkYXRlcyB0aGUgcG9zaXRpb24gb2YgdGhlIHBvcHBlciwgY29tcHV0aW5nIHRoZSBuZXcgb2Zmc2V0cyBhbmQgYXBwbHlpbmdcbiAqIHRoZSBuZXcgc3R5bGUuPGJyIC8+XG4gKiBQcmVmZXIgYHNjaGVkdWxlVXBkYXRlYCBvdmVyIGB1cGRhdGVgIGJlY2F1c2Ugb2YgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gdXBkYXRlKCkge1xuICAvLyBpZiBwb3BwZXIgaXMgZGVzdHJveWVkLCBkb24ndCBwZXJmb3JtIGFueSBmdXJ0aGVyIHVwZGF0ZVxuICBpZiAodGhpcy5zdGF0ZS5pc0Rlc3Ryb3llZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBkYXRhID0ge1xuICAgIGluc3RhbmNlOiB0aGlzLFxuICAgIHN0eWxlczoge30sXG4gICAgYXJyb3dTdHlsZXM6IHt9LFxuICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgIGZsaXBwZWQ6IGZhbHNlLFxuICAgIG9mZnNldHM6IHt9XG4gIH07XG5cbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2VPZmZzZXRzKHRoaXMuc3RhdGUsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQpO1xuXG4gIC8vIGNvbXB1dGUgYXV0byBwbGFjZW1lbnQsIHN0b3JlIHBsYWNlbWVudCBpbnNpZGUgdGhlIGRhdGEgb2JqZWN0LFxuICAvLyBtb2RpZmllcnMgd2lsbCBiZSBhYmxlIHRvIGVkaXQgYHBsYWNlbWVudGAgaWYgbmVlZGVkXG4gIC8vIGFuZCByZWZlciB0byBvcmlnaW5hbFBsYWNlbWVudCB0byBrbm93IHRoZSBvcmlnaW5hbCB2YWx1ZVxuICBkYXRhLnBsYWNlbWVudCA9IGNvbXB1dGVBdXRvUGxhY2VtZW50KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIHRoaXMucG9wcGVyLCB0aGlzLnJlZmVyZW5jZSwgdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLmJvdW5kYXJpZXNFbGVtZW50LCB0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgLy8gc3RvcmUgdGhlIGNvbXB1dGVkIHBsYWNlbWVudCBpbnNpZGUgYG9yaWdpbmFsUGxhY2VtZW50YFxuICBkYXRhLm9yaWdpbmFsUGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG5cbiAgZGF0YS5wb3NpdGlvbkZpeGVkID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQ7XG5cbiAgLy8gY29tcHV0ZSB0aGUgcG9wcGVyIG9mZnNldHNcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldFBvcHBlck9mZnNldHModGhpcy5wb3BwZXIsIGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UsIGRhdGEucGxhY2VtZW50KTtcblxuICBkYXRhLm9mZnNldHMucG9wcGVyLnBvc2l0aW9uID0gdGhpcy5vcHRpb25zLnBvc2l0aW9uRml4ZWQgPyAnZml4ZWQnIDogJ2Fic29sdXRlJztcblxuICAvLyBydW4gdGhlIG1vZGlmaWVyc1xuICBkYXRhID0gcnVuTW9kaWZpZXJzKHRoaXMubW9kaWZpZXJzLCBkYXRhKTtcblxuICAvLyB0aGUgZmlyc3QgYHVwZGF0ZWAgd2lsbCBjYWxsIGBvbkNyZWF0ZWAgY2FsbGJhY2tcbiAgLy8gdGhlIG90aGVyIG9uZXMgd2lsbCBjYWxsIGBvblVwZGF0ZWAgY2FsbGJhY2tcbiAgaWYgKCF0aGlzLnN0YXRlLmlzQ3JlYXRlZCkge1xuICAgIHRoaXMuc3RhdGUuaXNDcmVhdGVkID0gdHJ1ZTtcbiAgICB0aGlzLm9wdGlvbnMub25DcmVhdGUoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5vcHRpb25zLm9uVXBkYXRlKGRhdGEpO1xuICB9XG59XG5cbi8qKlxuICogSGVscGVyIHVzZWQgdG8ga25vdyBpZiB0aGUgZ2l2ZW4gbW9kaWZpZXIgaXMgZW5hYmxlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBpc01vZGlmaWVyRW5hYmxlZChtb2RpZmllcnMsIG1vZGlmaWVyTmFtZSkge1xuICByZXR1cm4gbW9kaWZpZXJzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZSxcbiAgICAgICAgZW5hYmxlZCA9IF9yZWYuZW5hYmxlZDtcbiAgICByZXR1cm4gZW5hYmxlZCAmJiBuYW1lID09PSBtb2RpZmllck5hbWU7XG4gIH0pO1xufVxuXG4vKipcbiAqIEdldCB0aGUgcHJlZml4ZWQgc3VwcG9ydGVkIHByb3BlcnR5IG5hbWVcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBwcm9wZXJ0eSAoY2FtZWxDYXNlKVxuICogQHJldHVybnMge1N0cmluZ30gcHJlZml4ZWQgcHJvcGVydHkgKGNhbWVsQ2FzZSBvciBQYXNjYWxDYXNlLCBkZXBlbmRpbmcgb24gdGhlIHZlbmRvciBwcmVmaXgpXG4gKi9cbmZ1bmN0aW9uIGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZShwcm9wZXJ0eSkge1xuICB2YXIgcHJlZml4ZXMgPSBbZmFsc2UsICdtcycsICdXZWJraXQnLCAnTW96JywgJ08nXTtcbiAgdmFyIHVwcGVyUHJvcCA9IHByb3BlcnR5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwcmVmaXggPSBwcmVmaXhlc1tpXTtcbiAgICB2YXIgdG9DaGVjayA9IHByZWZpeCA/ICcnICsgcHJlZml4ICsgdXBwZXJQcm9wIDogcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudC5ib2R5LnN0eWxlW3RvQ2hlY2tdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRvQ2hlY2s7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIERlc3Ryb3lzIHRoZSBwb3BwZXIuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbmZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQgPSB0cnVlO1xuXG4gIC8vIHRvdWNoIERPTSBvbmx5IGlmIGBhcHBseVN0eWxlYCBtb2RpZmllciBpcyBlbmFibGVkXG4gIGlmIChpc01vZGlmaWVyRW5hYmxlZCh0aGlzLm1vZGlmaWVycywgJ2FwcGx5U3R5bGUnKSkge1xuICAgIHRoaXMucG9wcGVyLnJlbW92ZUF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnKTtcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5wb3NpdGlvbiA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLnRvcCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmxlZnQgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZS5yaWdodCA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLmJvdHRvbSA9ICcnO1xuICAgIHRoaXMucG9wcGVyLnN0eWxlLndpbGxDaGFuZ2UgPSAnJztcbiAgICB0aGlzLnBvcHBlci5zdHlsZVtnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpXSA9ICcnO1xuICB9XG5cbiAgdGhpcy5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKTtcblxuICAvLyByZW1vdmUgdGhlIHBvcHBlciBpZiB1c2VyIGV4cGxpY2l0bHkgYXNrZWQgZm9yIHRoZSBkZWxldGlvbiBvbiBkZXN0cm95XG4gIC8vIGRvIG5vdCB1c2UgYHJlbW92ZWAgYmVjYXVzZSBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBpdFxuICBpZiAodGhpcy5vcHRpb25zLnJlbW92ZU9uRGVzdHJveSkge1xuICAgIHRoaXMucG9wcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5wb3BwZXIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG4vKipcbiAqIEdldCB0aGUgd2luZG93IGFzc29jaWF0ZWQgd2l0aCB0aGUgZWxlbWVudFxuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7V2luZG93fVxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coZWxlbWVudCkge1xuICB2YXIgb3duZXJEb2N1bWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudDtcbiAgcmV0dXJuIG93bmVyRG9jdW1lbnQgPyBvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IDogd2luZG93O1xufVxuXG5mdW5jdGlvbiBhdHRhY2hUb1Njcm9sbFBhcmVudHMoc2Nyb2xsUGFyZW50LCBldmVudCwgY2FsbGJhY2ssIHNjcm9sbFBhcmVudHMpIHtcbiAgdmFyIGlzQm9keSA9IHNjcm9sbFBhcmVudC5ub2RlTmFtZSA9PT0gJ0JPRFknO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gc2Nyb2xsUGFyZW50Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgOiBzY3JvbGxQYXJlbnQ7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjaywgeyBwYXNzaXZlOiB0cnVlIH0pO1xuXG4gIGlmICghaXNCb2R5KSB7XG4gICAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKGdldFNjcm9sbFBhcmVudCh0YXJnZXQucGFyZW50Tm9kZSksIGV2ZW50LCBjYWxsYmFjaywgc2Nyb2xsUGFyZW50cyk7XG4gIH1cbiAgc2Nyb2xsUGFyZW50cy5wdXNoKHRhcmdldCk7XG59XG5cbi8qKlxuICogU2V0dXAgbmVlZGVkIGV2ZW50IGxpc3RlbmVycyB1c2VkIHRvIHVwZGF0ZSB0aGUgcG9wcGVyIHBvc2l0aW9uXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBzZXR1cEV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgb3B0aW9ucywgc3RhdGUsIHVwZGF0ZUJvdW5kKSB7XG4gIC8vIFJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgc3RhdGUudXBkYXRlQm91bmQgPSB1cGRhdGVCb3VuZDtcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQsIHsgcGFzc2l2ZTogdHJ1ZSB9KTtcblxuICAvLyBTY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgdmFyIHNjcm9sbEVsZW1lbnQgPSBnZXRTY3JvbGxQYXJlbnQocmVmZXJlbmNlKTtcbiAgYXR0YWNoVG9TY3JvbGxQYXJlbnRzKHNjcm9sbEVsZW1lbnQsICdzY3JvbGwnLCBzdGF0ZS51cGRhdGVCb3VuZCwgc3RhdGUuc2Nyb2xsUGFyZW50cyk7XG4gIHN0YXRlLnNjcm9sbEVsZW1lbnQgPSBzY3JvbGxFbGVtZW50O1xuICBzdGF0ZS5ldmVudHNFbmFibGVkID0gdHJ1ZTtcblxuICByZXR1cm4gc3RhdGU7XG59XG5cbi8qKlxuICogSXQgd2lsbCBhZGQgcmVzaXplL3Njcm9sbCBldmVudHMgYW5kIHN0YXJ0IHJlY2FsY3VsYXRpbmdcbiAqIHBvc2l0aW9uIG9mIHRoZSBwb3BwZXIgZWxlbWVudCB3aGVuIHRoZXkgYXJlIHRyaWdnZXJlZC5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKSB7XG4gIGlmICghdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHNldHVwRXZlbnRMaXN0ZW5lcnModGhpcy5yZWZlcmVuY2UsIHRoaXMub3B0aW9ucywgdGhpcy5zdGF0ZSwgdGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzZWQgdG8gdXBkYXRlIHRoZSBwb3BwZXIgcG9zaXRpb25cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHJlZmVyZW5jZSwgc3RhdGUpIHtcbiAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBvbiB3aW5kb3dcbiAgZ2V0V2luZG93KHJlZmVyZW5jZSkucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgc3RhdGUudXBkYXRlQm91bmQpO1xuXG4gIC8vIFJlbW92ZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgb24gc2Nyb2xsIHBhcmVudHNcbiAgc3RhdGUuc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgc3RhdGUudXBkYXRlQm91bmQpO1xuICB9KTtcblxuICAvLyBSZXNldCBzdGF0ZVxuICBzdGF0ZS51cGRhdGVCb3VuZCA9IG51bGw7XG4gIHN0YXRlLnNjcm9sbFBhcmVudHMgPSBbXTtcbiAgc3RhdGUuc2Nyb2xsRWxlbWVudCA9IG51bGw7XG4gIHN0YXRlLmV2ZW50c0VuYWJsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG4vKipcbiAqIEl0IHdpbGwgcmVtb3ZlIHJlc2l6ZS9zY3JvbGwgZXZlbnRzIGFuZCB3b24ndCByZWNhbGN1bGF0ZSBwb3BwZXIgcG9zaXRpb25cbiAqIHdoZW4gdGhleSBhcmUgdHJpZ2dlcmVkLiBJdCBhbHNvIHdvbid0IHRyaWdnZXIgYG9uVXBkYXRlYCBjYWxsYmFjayBhbnltb3JlLFxuICogdW5sZXNzIHlvdSBjYWxsIGB1cGRhdGVgIG1ldGhvZCBtYW51YWxseS5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXJcbiAqL1xuZnVuY3Rpb24gZGlzYWJsZUV2ZW50TGlzdGVuZXJzKCkge1xuICBpZiAodGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkKSB7XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSk7XG4gICAgdGhpcy5zdGF0ZSA9IHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMucmVmZXJlbmNlLCB0aGlzLnN0YXRlKTtcbiAgfVxufVxuXG4vKipcbiAqIFRlbGxzIGlmIGEgZ2l2ZW4gaW5wdXQgaXMgYSBudW1iZXJcbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIuVXRpbHNcbiAqIEBwYXJhbSB7Kn0gaW5wdXQgdG8gY2hlY2tcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTnVtZXJpYyhuKSB7XG4gIHJldHVybiBuICE9PSAnJyAmJiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG59XG5cbi8qKlxuICogU2V0IHRoZSBzdHlsZSB0byB0aGUgZ2l2ZW4gcG9wcGVyXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge0VsZW1lbnR9IGVsZW1lbnQgLSBFbGVtZW50IHRvIGFwcGx5IHRoZSBzdHlsZSB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdW5pdCA9ICcnO1xuICAgIC8vIGFkZCB1bml0IGlmIHRoZSB2YWx1ZSBpcyBudW1lcmljIGFuZCBpcyBvbmUgb2YgdGhlIGZvbGxvd2luZ1xuICAgIGlmIChbJ3dpZHRoJywgJ2hlaWdodCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5pbmRleE9mKHByb3ApICE9PSAtMSAmJiBpc051bWVyaWMoc3R5bGVzW3Byb3BdKSkge1xuICAgICAgdW5pdCA9ICdweCc7XG4gICAgfVxuICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZXNbcHJvcF0gKyB1bml0O1xuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIGF0dHJpYnV0ZXMgdG8gdGhlIGdpdmVuIHBvcHBlclxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtFbGVtZW50fSBlbGVtZW50IC0gRWxlbWVudCB0byBhcHBseSB0aGUgYXR0cmlidXRlcyB0b1xuICogQGFyZ3VtZW50IHtPYmplY3R9IHN0eWxlc1xuICogT2JqZWN0IHdpdGggYSBsaXN0IG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcyB3aGljaCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlcyhlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW3Byb3BdO1xuICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKHByb3AsIGF0dHJpYnV0ZXNbcHJvcF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEuc3R5bGVzIC0gTGlzdCBvZiBzdHlsZSBwcm9wZXJ0aWVzIC0gdmFsdWVzIHRvIGFwcGx5IHRvIHBvcHBlciBlbGVtZW50XG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YS5hdHRyaWJ1dGVzIC0gTGlzdCBvZiBhdHRyaWJ1dGUgcHJvcGVydGllcyAtIHZhbHVlcyB0byBhcHBseSB0byBwb3BwZXIgZWxlbWVudFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIHNhbWUgZGF0YSBvYmplY3RcbiAqL1xuZnVuY3Rpb24gYXBwbHlTdHlsZShkYXRhKSB7XG4gIC8vIGFueSBwcm9wZXJ0eSBwcmVzZW50IGluIGBkYXRhLnN0eWxlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIGluIHRoaXMgd2F5IHdlIGNhbiBtYWtlIHRoZSAzcmQgcGFydHkgbW9kaWZpZXJzIGFkZCBjdXN0b20gc3R5bGVzIHRvIGl0XG4gIC8vIEJlIGF3YXJlLCBtb2RpZmllcnMgY291bGQgb3ZlcnJpZGUgdGhlIHByb3BlcnRpZXMgZGVmaW5lZCBpbiB0aGUgcHJldmlvdXNcbiAgLy8gbGluZXMgb2YgdGhpcyBtb2RpZmllciFcbiAgc2V0U3R5bGVzKGRhdGEuaW5zdGFuY2UucG9wcGVyLCBkYXRhLnN0eWxlcyk7XG5cbiAgLy8gYW55IHByb3BlcnR5IHByZXNlbnQgaW4gYGRhdGEuYXR0cmlidXRlc2Agd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIsXG4gIC8vIHRoZXkgd2lsbCBiZSBzZXQgYXMgSFRNTCBhdHRyaWJ1dGVzIG9mIHRoZSBlbGVtZW50XG4gIHNldEF0dHJpYnV0ZXMoZGF0YS5pbnN0YW5jZS5wb3BwZXIsIGRhdGEuYXR0cmlidXRlcyk7XG5cbiAgLy8gaWYgYXJyb3dFbGVtZW50IGlzIGRlZmluZWQgYW5kIGFycm93U3R5bGVzIGhhcyBzb21lIHByb3BlcnRpZXNcbiAgaWYgKGRhdGEuYXJyb3dFbGVtZW50ICYmIE9iamVjdC5rZXlzKGRhdGEuYXJyb3dTdHlsZXMpLmxlbmd0aCkge1xuICAgIHNldFN0eWxlcyhkYXRhLmFycm93RWxlbWVudCwgZGF0YS5hcnJvd1N0eWxlcyk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBTZXQgdGhlIHgtcGxhY2VtZW50IGF0dHJpYnV0ZSBiZWZvcmUgZXZlcnl0aGluZyBlbHNlIGJlY2F1c2UgaXQgY291bGQgYmUgdXNlZFxuICogdG8gYWRkIG1hcmdpbnMgdG8gdGhlIHBvcHBlciBtYXJnaW5zIG5lZWRzIHRvIGJlIGNhbGN1bGF0ZWQgdG8gZ2V0IHRoZVxuICogY29ycmVjdCBwb3BwZXIgb2Zmc2V0cy5cbiAqIEBtZXRob2RcbiAqIEBtZW1iZXJvZiBQb3BwZXIubW9kaWZpZXJzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByZWZlcmVuY2UgLSBUaGUgcmVmZXJlbmNlIGVsZW1lbnQgdXNlZCB0byBwb3NpdGlvbiB0aGUgcG9wcGVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBwb3BwZXIgLSBUaGUgSFRNTCBlbGVtZW50IHVzZWQgYXMgcG9wcGVyXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFBvcHBlci5qcyBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGFwcGx5U3R5bGVPbkxvYWQocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgc3RhdGUpIHtcbiAgLy8gY29tcHV0ZSByZWZlcmVuY2UgZWxlbWVudCBvZmZzZXRzXG4gIHZhciByZWZlcmVuY2VPZmZzZXRzID0gZ2V0UmVmZXJlbmNlT2Zmc2V0cyhzdGF0ZSwgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gY29tcHV0ZSBhdXRvIHBsYWNlbWVudCwgc3RvcmUgcGxhY2VtZW50IGluc2lkZSB0aGUgZGF0YSBvYmplY3QsXG4gIC8vIG1vZGlmaWVycyB3aWxsIGJlIGFibGUgdG8gZWRpdCBgcGxhY2VtZW50YCBpZiBuZWVkZWRcbiAgLy8gYW5kIHJlZmVyIHRvIG9yaWdpbmFsUGxhY2VtZW50IHRvIGtub3cgdGhlIG9yaWdpbmFsIHZhbHVlXG4gIHZhciBwbGFjZW1lbnQgPSBjb21wdXRlQXV0b1BsYWNlbWVudChvcHRpb25zLnBsYWNlbWVudCwgcmVmZXJlbmNlT2Zmc2V0cywgcG9wcGVyLCByZWZlcmVuY2UsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsIG9wdGlvbnMubW9kaWZpZXJzLmZsaXAucGFkZGluZyk7XG5cbiAgcG9wcGVyLnNldEF0dHJpYnV0ZSgneC1wbGFjZW1lbnQnLCBwbGFjZW1lbnQpO1xuXG4gIC8vIEFwcGx5IGBwb3NpdGlvbmAgdG8gcG9wcGVyIGJlZm9yZSBhbnl0aGluZyBlbHNlIGJlY2F1c2VcbiAgLy8gd2l0aG91dCB0aGUgcG9zaXRpb24gYXBwbGllZCB3ZSBjYW4ndCBndWFyYW50ZWUgY29ycmVjdCBjb21wdXRhdGlvbnNcbiAgc2V0U3R5bGVzKHBvcHBlciwgeyBwb3NpdGlvbjogb3B0aW9ucy5wb3NpdGlvbkZpeGVkID8gJ2ZpeGVkJyA6ICdhYnNvbHV0ZScgfSk7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge0Jvb2xlYW59IHNob3VsZFJvdW5kIC0gSWYgdGhlIG9mZnNldHMgc2hvdWxkIGJlIHJvdW5kZWQgYXQgYWxsXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgcG9wcGVyJ3MgcG9zaXRpb24gb2Zmc2V0cyByb3VuZGVkXG4gKlxuICogVGhlIHRhbGUgb2YgcGl4ZWwtcGVyZmVjdCBwb3NpdGlvbmluZy4gSXQncyBzdGlsbCBub3QgMTAwJSBwZXJmZWN0LCBidXQgYXNcbiAqIGdvb2QgYXMgaXQgY2FuIGJlIHdpdGhpbiByZWFzb24uXG4gKiBEaXNjdXNzaW9uIGhlcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9GZXpWcmFzdGEvcG9wcGVyLmpzL3B1bGwvNzE1XG4gKlxuICogTG93IERQSSBzY3JlZW5zIGNhdXNlIGEgcG9wcGVyIHRvIGJlIGJsdXJyeSBpZiBub3QgdXNpbmcgZnVsbCBwaXhlbHMgKFNhZmFyaVxuICogYXMgd2VsbCBvbiBIaWdoIERQSSBzY3JlZW5zKS5cbiAqXG4gKiBGaXJlZm94IHByZWZlcnMgbm8gcm91bmRpbmcgZm9yIHBvc2l0aW9uaW5nIGFuZCBkb2VzIG5vdCBoYXZlIGJsdXJyaW5lc3Mgb25cbiAqIGhpZ2ggRFBJIHNjcmVlbnMuXG4gKlxuICogT25seSBob3Jpem9udGFsIHBsYWNlbWVudCBhbmQgbGVmdC9yaWdodCB2YWx1ZXMgbmVlZCB0byBiZSBjb25zaWRlcmVkLlxuICovXG5mdW5jdGlvbiBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCBzaG91bGRSb3VuZCkge1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciByb3VuZCA9IE1hdGgucm91bmQsXG4gICAgICBmbG9vciA9IE1hdGguZmxvb3I7XG5cbiAgdmFyIG5vUm91bmQgPSBmdW5jdGlvbiBub1JvdW5kKHYpIHtcbiAgICByZXR1cm4gdjtcbiAgfTtcblxuICB2YXIgcmVmZXJlbmNlV2lkdGggPSByb3VuZChyZWZlcmVuY2Uud2lkdGgpO1xuICB2YXIgcG9wcGVyV2lkdGggPSByb3VuZChwb3BwZXIud2lkdGgpO1xuXG4gIHZhciBpc1ZlcnRpY2FsID0gWydsZWZ0JywgJ3JpZ2h0J10uaW5kZXhPZihkYXRhLnBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgaXNWYXJpYXRpb24gPSBkYXRhLnBsYWNlbWVudC5pbmRleE9mKCctJykgIT09IC0xO1xuICB2YXIgc2FtZVdpZHRoUGFyaXR5ID0gcmVmZXJlbmNlV2lkdGggJSAyID09PSBwb3BwZXJXaWR0aCAlIDI7XG4gIHZhciBib3RoT2RkV2lkdGggPSByZWZlcmVuY2VXaWR0aCAlIDIgPT09IDEgJiYgcG9wcGVyV2lkdGggJSAyID09PSAxO1xuXG4gIHZhciBob3Jpem9udGFsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IGlzVmVydGljYWwgfHwgaXNWYXJpYXRpb24gfHwgc2FtZVdpZHRoUGFyaXR5ID8gcm91bmQgOiBmbG9vcjtcbiAgdmFyIHZlcnRpY2FsVG9JbnRlZ2VyID0gIXNob3VsZFJvdW5kID8gbm9Sb3VuZCA6IHJvdW5kO1xuXG4gIHJldHVybiB7XG4gICAgbGVmdDogaG9yaXpvbnRhbFRvSW50ZWdlcihib3RoT2RkV2lkdGggJiYgIWlzVmFyaWF0aW9uICYmIHNob3VsZFJvdW5kID8gcG9wcGVyLmxlZnQgLSAxIDogcG9wcGVyLmxlZnQpLFxuICAgIHRvcDogdmVydGljYWxUb0ludGVnZXIocG9wcGVyLnRvcCksXG4gICAgYm90dG9tOiB2ZXJ0aWNhbFRvSW50ZWdlcihwb3BwZXIuYm90dG9tKSxcbiAgICByaWdodDogaG9yaXpvbnRhbFRvSW50ZWdlcihwb3BwZXIucmlnaHQpXG4gIH07XG59XG5cbnZhciBpc0ZpcmVmb3ggPSBpc0Jyb3dzZXIgJiYgL0ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBjb21wdXRlU3R5bGUoZGF0YSwgb3B0aW9ucykge1xuICB2YXIgeCA9IG9wdGlvbnMueCxcbiAgICAgIHkgPSBvcHRpb25zLnk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIC8vIFJlbW92ZSB0aGlzIGxlZ2FjeSBzdXBwb3J0IGluIFBvcHBlci5qcyB2MlxuXG4gIHZhciBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gPSBmaW5kKGRhdGEuaW5zdGFuY2UubW9kaWZpZXJzLCBmdW5jdGlvbiAobW9kaWZpZXIpIHtcbiAgICByZXR1cm4gbW9kaWZpZXIubmFtZSA9PT0gJ2FwcGx5U3R5bGUnO1xuICB9KS5ncHVBY2NlbGVyYXRpb247XG4gIGlmIChsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnNvbGUud2FybignV0FSTklORzogYGdwdUFjY2VsZXJhdGlvbmAgb3B0aW9uIG1vdmVkIHRvIGBjb21wdXRlU3R5bGVgIG1vZGlmaWVyIGFuZCB3aWxsIG5vdCBiZSBzdXBwb3J0ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIFBvcHBlci5qcyEnKTtcbiAgfVxuICB2YXIgZ3B1QWNjZWxlcmF0aW9uID0gbGVnYWN5R3B1QWNjZWxlcmF0aW9uT3B0aW9uICE9PSB1bmRlZmluZWQgPyBsZWdhY3lHcHVBY2NlbGVyYXRpb25PcHRpb24gOiBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbjtcblxuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcbiAgdmFyIG9mZnNldFBhcmVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcblxuICAvLyBTdHlsZXNcbiAgdmFyIHN0eWxlcyA9IHtcbiAgICBwb3NpdGlvbjogcG9wcGVyLnBvc2l0aW9uXG4gIH07XG5cbiAgdmFyIG9mZnNldHMgPSBnZXRSb3VuZGVkT2Zmc2V0cyhkYXRhLCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA8IDIgfHwgIWlzRmlyZWZveCk7XG5cbiAgdmFyIHNpZGVBID0geCA9PT0gJ2JvdHRvbScgPyAndG9wJyA6ICdib3R0b20nO1xuICB2YXIgc2lkZUIgPSB5ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3JpZ2h0JztcblxuICAvLyBpZiBncHVBY2NlbGVyYXRpb24gaXMgc2V0IHRvIGB0cnVlYCBhbmQgdHJhbnNmb3JtIGlzIHN1cHBvcnRlZCxcbiAgLy8gIHdlIHVzZSBgdHJhbnNsYXRlM2RgIHRvIGFwcGx5IHRoZSBwb3NpdGlvbiB0byB0aGUgcG9wcGVyIHdlXG4gIC8vIGF1dG9tYXRpY2FsbHkgdXNlIHRoZSBzdXBwb3J0ZWQgcHJlZml4ZWQgdmVyc2lvbiBpZiBuZWVkZWRcbiAgdmFyIHByZWZpeGVkUHJvcGVydHkgPSBnZXRTdXBwb3J0ZWRQcm9wZXJ0eU5hbWUoJ3RyYW5zZm9ybScpO1xuXG4gIC8vIG5vdywgbGV0J3MgbWFrZSBhIHN0ZXAgYmFjayBhbmQgbG9vayBhdCB0aGlzIGNvZGUgY2xvc2VseSAod3RmPylcbiAgLy8gSWYgdGhlIGNvbnRlbnQgb2YgdGhlIHBvcHBlciBncm93cyBvbmNlIGl0J3MgYmVlbiBwb3NpdGlvbmVkLCBpdFxuICAvLyBtYXkgaGFwcGVuIHRoYXQgdGhlIHBvcHBlciBnZXRzIG1pc3BsYWNlZCBiZWNhdXNlIG9mIHRoZSBuZXcgY29udGVudFxuICAvLyBvdmVyZmxvd2luZyBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVG8gYXZvaWQgdGhpcyBwcm9ibGVtLCB3ZSBwcm92aWRlIHR3byBvcHRpb25zICh4IGFuZCB5KSwgd2hpY2ggYWxsb3dcbiAgLy8gdGhlIGNvbnN1bWVyIHRvIGRlZmluZSB0aGUgb2Zmc2V0IG9yaWdpbi5cbiAgLy8gSWYgd2UgcG9zaXRpb24gYSBwb3BwZXIgb24gdG9wIG9mIGEgcmVmZXJlbmNlIGVsZW1lbnQsIHdlIGNhbiBzZXRcbiAgLy8gYHhgIHRvIGB0b3BgIHRvIG1ha2UgdGhlIHBvcHBlciBncm93IHRvd2FyZHMgaXRzIHRvcCBpbnN0ZWFkIG9mXG4gIC8vIGl0cyBib3R0b20uXG4gIHZhciBsZWZ0ID0gdm9pZCAwLFxuICAgICAgdG9wID0gdm9pZCAwO1xuICBpZiAoc2lkZUEgPT09ICdib3R0b20nKSB7XG4gICAgLy8gd2hlbiBvZmZzZXRQYXJlbnQgaXMgPGh0bWw+IHRoZSBwb3NpdGlvbmluZyBpcyByZWxhdGl2ZSB0byB0aGUgYm90dG9tIG9mIHRoZSBzY3JlZW4gKGV4Y2x1ZGluZyB0aGUgc2Nyb2xsYmFyKVxuICAgIC8vIGFuZCBub3QgdGhlIGJvdHRvbSBvZiB0aGUgaHRtbCBlbGVtZW50XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCArIG9mZnNldHMuYm90dG9tO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3AgPSAtb2Zmc2V0UGFyZW50UmVjdC5oZWlnaHQgKyBvZmZzZXRzLmJvdHRvbTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdG9wID0gb2Zmc2V0cy50b3A7XG4gIH1cbiAgaWYgKHNpZGVCID09PSAncmlnaHQnKSB7XG4gICAgaWYgKG9mZnNldFBhcmVudC5ub2RlTmFtZSA9PT0gJ0hUTUwnKSB7XG4gICAgICBsZWZ0ID0gLW9mZnNldFBhcmVudC5jbGllbnRXaWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlZnQgPSAtb2Zmc2V0UGFyZW50UmVjdC53aWR0aCArIG9mZnNldHMucmlnaHQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlZnQgPSBvZmZzZXRzLmxlZnQ7XG4gIH1cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbiAmJiBwcmVmaXhlZFByb3BlcnR5KSB7XG4gICAgc3R5bGVzW3ByZWZpeGVkUHJvcGVydHldID0gJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LCAnICsgdG9wICsgJ3B4LCAwKSc7XG4gICAgc3R5bGVzW3NpZGVBXSA9IDA7XG4gICAgc3R5bGVzW3NpZGVCXSA9IDA7XG4gICAgc3R5bGVzLndpbGxDaGFuZ2UgPSAndHJhbnNmb3JtJztcbiAgfSBlbHNlIHtcbiAgICAvLyBvdGh3ZXJpc2UsIHdlIHVzZSB0aGUgc3RhbmRhcmQgYHRvcGAsIGBsZWZ0YCwgYGJvdHRvbWAgYW5kIGByaWdodGAgcHJvcGVydGllc1xuICAgIHZhciBpbnZlcnRUb3AgPSBzaWRlQSA9PT0gJ2JvdHRvbScgPyAtMSA6IDE7XG4gICAgdmFyIGludmVydExlZnQgPSBzaWRlQiA9PT0gJ3JpZ2h0JyA/IC0xIDogMTtcbiAgICBzdHlsZXNbc2lkZUFdID0gdG9wICogaW52ZXJ0VG9wO1xuICAgIHN0eWxlc1tzaWRlQl0gPSBsZWZ0ICogaW52ZXJ0TGVmdDtcbiAgICBzdHlsZXMud2lsbENoYW5nZSA9IHNpZGVBICsgJywgJyArIHNpZGVCO1xuICB9XG5cbiAgLy8gQXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlcyA9IHtcbiAgICAneC1wbGFjZW1lbnQnOiBkYXRhLnBsYWNlbWVudFxuICB9O1xuXG4gIC8vIFVwZGF0ZSBgZGF0YWAgYXR0cmlidXRlcywgc3R5bGVzIGFuZCBhcnJvd1N0eWxlc1xuICBkYXRhLmF0dHJpYnV0ZXMgPSBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywgZGF0YS5hdHRyaWJ1dGVzKTtcbiAgZGF0YS5zdHlsZXMgPSBfZXh0ZW5kcyh7fSwgc3R5bGVzLCBkYXRhLnN0eWxlcyk7XG4gIGRhdGEuYXJyb3dTdHlsZXMgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLmFycm93LCBkYXRhLmFycm93U3R5bGVzKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdXNlZCB0byBrbm93IGlmIHRoZSBnaXZlbiBtb2RpZmllciBkZXBlbmRzIGZyb20gYW5vdGhlciBvbmUuPGJyIC8+XG4gKiBJdCBjaGVja3MgaWYgdGhlIG5lZWRlZCBtb2RpZmllciBpcyBsaXN0ZWQgYW5kIGVuYWJsZWQuXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAcGFyYW0ge0FycmF5fSBtb2RpZmllcnMgLSBsaXN0IG9mIG1vZGlmaWVyc1xuICogQHBhcmFtIHtTdHJpbmd9IHJlcXVlc3RpbmdOYW1lIC0gbmFtZSBvZiByZXF1ZXN0aW5nIG1vZGlmaWVyXG4gKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdGVkTmFtZSAtIG5hbWUgb2YgcmVxdWVzdGVkIG1vZGlmaWVyXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNNb2RpZmllclJlcXVpcmVkKG1vZGlmaWVycywgcmVxdWVzdGluZ05hbWUsIHJlcXVlc3RlZE5hbWUpIHtcbiAgdmFyIHJlcXVlc3RpbmcgPSBmaW5kKG1vZGlmaWVycywgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gbmFtZSA9PT0gcmVxdWVzdGluZ05hbWU7XG4gIH0pO1xuXG4gIHZhciBpc1JlcXVpcmVkID0gISFyZXF1ZXN0aW5nICYmIG1vZGlmaWVycy5zb21lKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSByZXF1ZXN0ZWROYW1lICYmIG1vZGlmaWVyLmVuYWJsZWQgJiYgbW9kaWZpZXIub3JkZXIgPCByZXF1ZXN0aW5nLm9yZGVyO1xuICB9KTtcblxuICBpZiAoIWlzUmVxdWlyZWQpIHtcbiAgICB2YXIgX3JlcXVlc3RpbmcgPSAnYCcgKyByZXF1ZXN0aW5nTmFtZSArICdgJztcbiAgICB2YXIgcmVxdWVzdGVkID0gJ2AnICsgcmVxdWVzdGVkTmFtZSArICdgJztcbiAgICBjb25zb2xlLndhcm4ocmVxdWVzdGVkICsgJyBtb2RpZmllciBpcyByZXF1aXJlZCBieSAnICsgX3JlcXVlc3RpbmcgKyAnIG1vZGlmaWVyIGluIG9yZGVyIHRvIHdvcmssIGJlIHN1cmUgdG8gaW5jbHVkZSBpdCBiZWZvcmUgJyArIF9yZXF1ZXN0aW5nICsgJyEnKTtcbiAgfVxuICByZXR1cm4gaXNSZXF1aXJlZDtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGFycm93KGRhdGEsIG9wdGlvbnMpIHtcbiAgdmFyIF9kYXRhJG9mZnNldHMkYXJyb3c7XG5cbiAgLy8gYXJyb3cgZGVwZW5kcyBvbiBrZWVwVG9nZXRoZXIgaW4gb3JkZXIgdG8gd29ya1xuICBpZiAoIWlzTW9kaWZpZXJSZXF1aXJlZChkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgJ2Fycm93JywgJ2tlZXBUb2dldGhlcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYXJyb3dFbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuXG4gIC8vIGlmIGFycm93RWxlbWVudCBpcyBhIHN0cmluZywgc3VwcG9zZSBpdCdzIGEgQ1NTIHNlbGVjdG9yXG4gIGlmICh0eXBlb2YgYXJyb3dFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGFycm93RWxlbWVudCA9IGRhdGEuaW5zdGFuY2UucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIC8vIGlmIGFycm93RWxlbWVudCBpcyBub3QgZm91bmQsIGRvbid0IHJ1biB0aGUgbW9kaWZpZXJcbiAgICBpZiAoIWFycm93RWxlbWVudCkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGlmIHRoZSBhcnJvd0VsZW1lbnQgaXNuJ3QgYSBxdWVyeSBzZWxlY3RvciB3ZSBtdXN0IGNoZWNrIHRoYXQgdGhlXG4gICAgLy8gcHJvdmlkZWQgRE9NIG5vZGUgaXMgY2hpbGQgb2YgaXRzIHBvcHBlciBub2RlXG4gICAgaWYgKCFkYXRhLmluc3RhbmNlLnBvcHBlci5jb250YWlucyhhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dBUk5JTkc6IGBhcnJvdy5lbGVtZW50YCBtdXN0IGJlIGNoaWxkIG9mIGl0cyBwb3BwZXIgZWxlbWVudCEnKTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGFjZW1lbnQgPSBkYXRhLnBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGlzVmVydGljYWwgPSBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICB2YXIgc2lkZUNhcGl0YWxpemVkID0gaXNWZXJ0aWNhbCA/ICdUb3AnIDogJ0xlZnQnO1xuICB2YXIgc2lkZSA9IHNpZGVDYXBpdGFsaXplZC50b0xvd2VyQ2FzZSgpO1xuICB2YXIgYWx0U2lkZSA9IGlzVmVydGljYWwgPyAnbGVmdCcgOiAndG9wJztcbiAgdmFyIG9wU2lkZSA9IGlzVmVydGljYWwgPyAnYm90dG9tJyA6ICdyaWdodCc7XG4gIHZhciBhcnJvd0VsZW1lbnRTaXplID0gZ2V0T3V0ZXJTaXplcyhhcnJvd0VsZW1lbnQpW2xlbl07XG5cbiAgLy9cbiAgLy8gZXh0ZW5kcyBrZWVwVG9nZXRoZXIgYmVoYXZpb3IgbWFraW5nIHN1cmUgdGhlIHBvcHBlciBhbmQgaXRzXG4gIC8vIHJlZmVyZW5jZSBoYXZlIGVub3VnaCBwaXhlbHMgaW4gY29uanVuY3Rpb25cbiAgLy9cblxuICAvLyB0b3AvbGVmdCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUgPCBwb3BwZXJbc2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdIC09IHBvcHBlcltzaWRlXSAtIChyZWZlcmVuY2Vbb3BTaWRlXSAtIGFycm93RWxlbWVudFNpemUpO1xuICB9XG4gIC8vIGJvdHRvbS9yaWdodCBzaWRlXG4gIGlmIChyZWZlcmVuY2Vbc2lkZV0gKyBhcnJvd0VsZW1lbnRTaXplID4gcG9wcGVyW29wU2lkZV0pIHtcbiAgICBkYXRhLm9mZnNldHMucG9wcGVyW3NpZGVdICs9IHJlZmVyZW5jZVtzaWRlXSArIGFycm93RWxlbWVudFNpemUgLSBwb3BwZXJbb3BTaWRlXTtcbiAgfVxuICBkYXRhLm9mZnNldHMucG9wcGVyID0gZ2V0Q2xpZW50UmVjdChkYXRhLm9mZnNldHMucG9wcGVyKTtcblxuICAvLyBjb21wdXRlIGNlbnRlciBvZiB0aGUgcG9wcGVyXG4gIHZhciBjZW50ZXIgPSByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbGVuXSAvIDIgLSBhcnJvd0VsZW1lbnRTaXplIC8gMjtcblxuICAvLyBDb21wdXRlIHRoZSBzaWRlVmFsdWUgdXNpbmcgdGhlIHVwZGF0ZWQgcG9wcGVyIG9mZnNldHNcbiAgLy8gdGFrZSBwb3BwZXIgbWFyZ2luIGluIGFjY291bnQgYmVjYXVzZSB3ZSBkb24ndCBoYXZlIHRoaXMgaW5mbyBhdmFpbGFibGVcbiAgdmFyIGNzcyA9IGdldFN0eWxlQ29tcHV0ZWRQcm9wZXJ0eShkYXRhLmluc3RhbmNlLnBvcHBlcik7XG4gIHZhciBwb3BwZXJNYXJnaW5TaWRlID0gcGFyc2VGbG9hdChjc3NbJ21hcmdpbicgKyBzaWRlQ2FwaXRhbGl6ZWRdKTtcbiAgdmFyIHBvcHBlckJvcmRlclNpZGUgPSBwYXJzZUZsb2F0KGNzc1snYm9yZGVyJyArIHNpZGVDYXBpdGFsaXplZCArICdXaWR0aCddKTtcbiAgdmFyIHNpZGVWYWx1ZSA9IGNlbnRlciAtIGRhdGEub2Zmc2V0cy5wb3BwZXJbc2lkZV0gLSBwb3BwZXJNYXJnaW5TaWRlIC0gcG9wcGVyQm9yZGVyU2lkZTtcblxuICAvLyBwcmV2ZW50IGFycm93RWxlbWVudCBmcm9tIGJlaW5nIHBsYWNlZCBub3QgY29udGlndW91c2x5IHRvIGl0cyBwb3BwZXJcbiAgc2lkZVZhbHVlID0gTWF0aC5tYXgoTWF0aC5taW4ocG9wcGVyW2xlbl0gLSBhcnJvd0VsZW1lbnRTaXplLCBzaWRlVmFsdWUpLCAwKTtcblxuICBkYXRhLmFycm93RWxlbWVudCA9IGFycm93RWxlbWVudDtcbiAgZGF0YS5vZmZzZXRzLmFycm93ID0gKF9kYXRhJG9mZnNldHMkYXJyb3cgPSB7fSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgc2lkZSwgTWF0aC5yb3VuZChzaWRlVmFsdWUpKSwgZGVmaW5lUHJvcGVydHkoX2RhdGEkb2Zmc2V0cyRhcnJvdywgYWx0U2lkZSwgJycpLCBfZGF0YSRvZmZzZXRzJGFycm93KTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBHZXQgdGhlIG9wcG9zaXRlIHBsYWNlbWVudCB2YXJpYXRpb24gb2YgdGhlIGdpdmVuIG9uZVxuICogQG1ldGhvZFxuICogQG1lbWJlcm9mIFBvcHBlci5VdGlsc1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IHBsYWNlbWVudCB2YXJpYXRpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9IGZsaXBwZWQgcGxhY2VtZW50IHZhcmlhdGlvblxuICovXG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvbih2YXJpYXRpb24pIHtcbiAgaWYgKHZhcmlhdGlvbiA9PT0gJ2VuZCcpIHtcbiAgICByZXR1cm4gJ3N0YXJ0JztcbiAgfSBlbHNlIGlmICh2YXJpYXRpb24gPT09ICdzdGFydCcpIHtcbiAgICByZXR1cm4gJ2VuZCc7XG4gIH1cbiAgcmV0dXJuIHZhcmlhdGlvbjtcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFjY2VwdGVkIHBsYWNlbWVudHMgdG8gdXNlIGFzIHZhbHVlcyBvZiB0aGUgYHBsYWNlbWVudGAgb3B0aW9uLjxiciAvPlxuICogVmFsaWQgcGxhY2VtZW50cyBhcmU6XG4gKiAtIGBhdXRvYFxuICogLSBgdG9wYFxuICogLSBgcmlnaHRgXG4gKiAtIGBib3R0b21gXG4gKiAtIGBsZWZ0YFxuICpcbiAqIEVhY2ggcGxhY2VtZW50IGNhbiBoYXZlIGEgdmFyaWF0aW9uIGZyb20gdGhpcyBsaXN0OlxuICogLSBgLXN0YXJ0YFxuICogLSBgLWVuZGBcbiAqXG4gKiBWYXJpYXRpb25zIGFyZSBpbnRlcnByZXRlZCBlYXNpbHkgaWYgeW91IHRoaW5rIG9mIHRoZW0gYXMgdGhlIGxlZnQgdG8gcmlnaHRcbiAqIHdyaXR0ZW4gbGFuZ3VhZ2VzLiBIb3Jpem9udGFsbHkgKGB0b3BgIGFuZCBgYm90dG9tYCksIGBzdGFydGAgaXMgbGVmdCBhbmQgYGVuZGBcbiAqIGlzIHJpZ2h0LjxiciAvPlxuICogVmVydGljYWxseSAoYGxlZnRgIGFuZCBgcmlnaHRgKSwgYHN0YXJ0YCBpcyB0b3AgYW5kIGBlbmRgIGlzIGJvdHRvbS5cbiAqXG4gKiBTb21lIHZhbGlkIGV4YW1wbGVzIGFyZTpcbiAqIC0gYHRvcC1lbmRgIChvbiB0b3Agb2YgcmVmZXJlbmNlLCByaWdodCBhbGlnbmVkKVxuICogLSBgcmlnaHQtc3RhcnRgIChvbiByaWdodCBvZiByZWZlcmVuY2UsIHRvcCBhbGlnbmVkKVxuICogLSBgYm90dG9tYCAob24gYm90dG9tLCBjZW50ZXJlZClcbiAqIC0gYGF1dG8tZW5kYCAob24gdGhlIHNpZGUgd2l0aCBtb3JlIHNwYWNlIGF2YWlsYWJsZSwgYWxpZ25tZW50IGRlcGVuZHMgYnkgcGxhY2VtZW50KVxuICpcbiAqIEBzdGF0aWNcbiAqIEB0eXBlIHtBcnJheX1cbiAqIEBlbnVtIHtTdHJpbmd9XG4gKiBAcmVhZG9ubHlcbiAqIEBtZXRob2QgcGxhY2VtZW50c1xuICogQG1lbWJlcm9mIFBvcHBlclxuICovXG52YXIgcGxhY2VtZW50cyA9IFsnYXV0by1zdGFydCcsICdhdXRvJywgJ2F1dG8tZW5kJywgJ3RvcC1zdGFydCcsICd0b3AnLCAndG9wLWVuZCcsICdyaWdodC1zdGFydCcsICdyaWdodCcsICdyaWdodC1lbmQnLCAnYm90dG9tLWVuZCcsICdib3R0b20nLCAnYm90dG9tLXN0YXJ0JywgJ2xlZnQtZW5kJywgJ2xlZnQnLCAnbGVmdC1zdGFydCddO1xuXG4vLyBHZXQgcmlkIG9mIGBhdXRvYCBgYXV0by1zdGFydGAgYW5kIGBhdXRvLWVuZGBcbnZhciB2YWxpZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLnNsaWNlKDMpO1xuXG4vKipcbiAqIEdpdmVuIGFuIGluaXRpYWwgcGxhY2VtZW50LCByZXR1cm5zIGFsbCB0aGUgc3Vic2VxdWVudCBwbGFjZW1lbnRzXG4gKiBjbG9ja3dpc2UgKG9yIGNvdW50ZXItY2xvY2t3aXNlKS5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAbWVtYmVyb2YgUG9wcGVyLlV0aWxzXG4gKiBAYXJndW1lbnQge1N0cmluZ30gcGxhY2VtZW50IC0gQSB2YWxpZCBwbGFjZW1lbnQgKGl0IGFjY2VwdHMgdmFyaWF0aW9ucylcbiAqIEBhcmd1bWVudCB7Qm9vbGVhbn0gY291bnRlciAtIFNldCB0byB0cnVlIHRvIHdhbGsgdGhlIHBsYWNlbWVudHMgY291bnRlcmNsb2Nrd2lzZVxuICogQHJldHVybnMge0FycmF5fSBwbGFjZW1lbnRzIGluY2x1ZGluZyB0aGVpciB2YXJpYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNsb2Nrd2lzZShwbGFjZW1lbnQpIHtcbiAgdmFyIGNvdW50ZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlO1xuXG4gIHZhciBpbmRleCA9IHZhbGlkUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCk7XG4gIHZhciBhcnIgPSB2YWxpZFBsYWNlbWVudHMuc2xpY2UoaW5kZXggKyAxKS5jb25jYXQodmFsaWRQbGFjZW1lbnRzLnNsaWNlKDAsIGluZGV4KSk7XG4gIHJldHVybiBjb3VudGVyID8gYXJyLnJldmVyc2UoKSA6IGFycjtcbn1cblxudmFyIEJFSEFWSU9SUyA9IHtcbiAgRkxJUDogJ2ZsaXAnLFxuICBDTE9DS1dJU0U6ICdjbG9ja3dpc2UnLFxuICBDT1VOVEVSQ0xPQ0tXSVNFOiAnY291bnRlcmNsb2Nrd2lzZSdcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBmbGlwKGRhdGEsIG9wdGlvbnMpIHtcbiAgLy8gaWYgYGlubmVyYCBtb2RpZmllciBpcyBlbmFibGVkLCB3ZSBjYW4ndCB1c2UgdGhlIGBmbGlwYCBtb2RpZmllclxuICBpZiAoaXNNb2RpZmllckVuYWJsZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdpbm5lcicpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBpZiAoZGF0YS5mbGlwcGVkICYmIGRhdGEucGxhY2VtZW50ID09PSBkYXRhLm9yaWdpbmFsUGxhY2VtZW50KSB7XG4gICAgLy8gc2VlbXMgbGlrZSBmbGlwIGlzIHRyeWluZyB0byBsb29wLCBwcm9iYWJseSB0aGVyZSdzIG5vdCBlbm91Z2ggc3BhY2Ugb24gYW55IG9mIHRoZSBmbGlwcGFibGUgc2lkZXNcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgb3B0aW9ucy5ib3VuZGFyaWVzRWxlbWVudCwgZGF0YS5wb3NpdGlvbkZpeGVkKTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIHBsYWNlbWVudE9wcG9zaXRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMV0gfHwgJyc7XG5cbiAgdmFyIGZsaXBPcmRlciA9IFtdO1xuXG4gIHN3aXRjaCAob3B0aW9ucy5iZWhhdmlvcikge1xuICAgIGNhc2UgQkVIQVZJT1JTLkZMSVA6XG4gICAgICBmbGlwT3JkZXIgPSBbcGxhY2VtZW50LCBwbGFjZW1lbnRPcHBvc2l0ZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlIEJFSEFWSU9SUy5DTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50KTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQkVIQVZJT1JTLkNPVU5URVJDTE9DS1dJU0U6XG4gICAgICBmbGlwT3JkZXIgPSBjbG9ja3dpc2UocGxhY2VtZW50LCB0cnVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBmbGlwT3JkZXIgPSBvcHRpb25zLmJlaGF2aW9yO1xuICB9XG5cbiAgZmxpcE9yZGVyLmZvckVhY2goZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgaWYgKHBsYWNlbWVudCAhPT0gc3RlcCB8fCBmbGlwT3JkZXIubGVuZ3RoID09PSBpbmRleCArIDEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gICAgcGxhY2VtZW50T3Bwb3NpdGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIHBvcHBlck9mZnNldHMgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuICAgIHZhciByZWZPZmZzZXRzID0gZGF0YS5vZmZzZXRzLnJlZmVyZW5jZTtcblxuICAgIC8vIHVzaW5nIGZsb29yIGJlY2F1c2UgdGhlIHJlZmVyZW5jZSBvZmZzZXRzIG1heSBjb250YWluIGRlY2ltYWxzIHdlIGFyZSBub3QgZ29pbmcgdG8gY29uc2lkZXIgaGVyZVxuICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgdmFyIG92ZXJsYXBzUmVmID0gcGxhY2VtZW50ID09PSAnbGVmdCcgJiYgZmxvb3IocG9wcGVyT2Zmc2V0cy5yaWdodCkgPiBmbG9vcihyZWZPZmZzZXRzLmxlZnQpIHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmxlZnQpIDwgZmxvb3IocmVmT2Zmc2V0cy5yaWdodCkgfHwgcGxhY2VtZW50ID09PSAndG9wJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLmJvdHRvbSkgPiBmbG9vcihyZWZPZmZzZXRzLnRvcCkgfHwgcGxhY2VtZW50ID09PSAnYm90dG9tJyAmJiBmbG9vcihwb3BwZXJPZmZzZXRzLnRvcCkgPCBmbG9vcihyZWZPZmZzZXRzLmJvdHRvbSk7XG5cbiAgICB2YXIgb3ZlcmZsb3dzTGVmdCA9IGZsb29yKHBvcHBlck9mZnNldHMubGVmdCkgPCBmbG9vcihib3VuZGFyaWVzLmxlZnQpO1xuICAgIHZhciBvdmVyZmxvd3NSaWdodCA9IGZsb29yKHBvcHBlck9mZnNldHMucmlnaHQpID4gZmxvb3IoYm91bmRhcmllcy5yaWdodCk7XG4gICAgdmFyIG92ZXJmbG93c1RvcCA9IGZsb29yKHBvcHBlck9mZnNldHMudG9wKSA8IGZsb29yKGJvdW5kYXJpZXMudG9wKTtcbiAgICB2YXIgb3ZlcmZsb3dzQm90dG9tID0gZmxvb3IocG9wcGVyT2Zmc2V0cy5ib3R0b20pID4gZmxvb3IoYm91bmRhcmllcy5ib3R0b20pO1xuXG4gICAgdmFyIG92ZXJmbG93c0JvdW5kYXJpZXMgPSBwbGFjZW1lbnQgPT09ICdsZWZ0JyAmJiBvdmVyZmxvd3NMZWZ0IHx8IHBsYWNlbWVudCA9PT0gJ3JpZ2h0JyAmJiBvdmVyZmxvd3NSaWdodCB8fCBwbGFjZW1lbnQgPT09ICd0b3AnICYmIG92ZXJmbG93c1RvcCB8fCBwbGFjZW1lbnQgPT09ICdib3R0b20nICYmIG92ZXJmbG93c0JvdHRvbTtcblxuICAgIC8vIGZsaXAgdGhlIHZhcmlhdGlvbiBpZiByZXF1aXJlZFxuICAgIHZhciBpc1ZlcnRpY2FsID0gWyd0b3AnLCAnYm90dG9tJ10uaW5kZXhPZihwbGFjZW1lbnQpICE9PSAtMTtcblxuICAgIC8vIGZsaXBzIHZhcmlhdGlvbiBpZiByZWZlcmVuY2UgZWxlbWVudCBvdmVyZmxvd3MgYm91bmRhcmllc1xuICAgIHZhciBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnMgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c0xlZnQgfHwgaXNWZXJ0aWNhbCAmJiB2YXJpYXRpb24gPT09ICdlbmQnICYmIG92ZXJmbG93c1JpZ2h0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NUb3AgfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NCb3R0b20pO1xuXG4gICAgLy8gZmxpcHMgdmFyaWF0aW9uIGlmIHBvcHBlciBjb250ZW50IG92ZXJmbG93cyBib3VuZGFyaWVzXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb25CeUNvbnRlbnQgPSAhIW9wdGlvbnMuZmxpcFZhcmlhdGlvbnNCeUNvbnRlbnQgJiYgKGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnc3RhcnQnICYmIG92ZXJmbG93c1JpZ2h0IHx8IGlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NMZWZ0IHx8ICFpc1ZlcnRpY2FsICYmIHZhcmlhdGlvbiA9PT0gJ3N0YXJ0JyAmJiBvdmVyZmxvd3NCb3R0b20gfHwgIWlzVmVydGljYWwgJiYgdmFyaWF0aW9uID09PSAnZW5kJyAmJiBvdmVyZmxvd3NUb3ApO1xuXG4gICAgdmFyIGZsaXBwZWRWYXJpYXRpb24gPSBmbGlwcGVkVmFyaWF0aW9uQnlSZWYgfHwgZmxpcHBlZFZhcmlhdGlvbkJ5Q29udGVudDtcblxuICAgIGlmIChvdmVybGFwc1JlZiB8fCBvdmVyZmxvd3NCb3VuZGFyaWVzIHx8IGZsaXBwZWRWYXJpYXRpb24pIHtcbiAgICAgIC8vIHRoaXMgYm9vbGVhbiB0byBkZXRlY3QgYW55IGZsaXAgbG9vcFxuICAgICAgZGF0YS5mbGlwcGVkID0gdHJ1ZTtcblxuICAgICAgaWYgKG92ZXJsYXBzUmVmIHx8IG92ZXJmbG93c0JvdW5kYXJpZXMpIHtcbiAgICAgICAgcGxhY2VtZW50ID0gZmxpcE9yZGVyW2luZGV4ICsgMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChmbGlwcGVkVmFyaWF0aW9uKSB7XG4gICAgICAgIHZhcmlhdGlvbiA9IGdldE9wcG9zaXRlVmFyaWF0aW9uKHZhcmlhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIGRhdGEucGxhY2VtZW50ID0gcGxhY2VtZW50ICsgKHZhcmlhdGlvbiA/ICctJyArIHZhcmlhdGlvbiA6ICcnKTtcblxuICAgICAgLy8gdGhpcyBvYmplY3QgY29udGFpbnMgYHBvc2l0aW9uYCwgd2Ugd2FudCB0byBwcmVzZXJ2ZSBpdCBhbG9uZyB3aXRoXG4gICAgICAvLyBhbnkgYWRkaXRpb25hbCBwcm9wZXJ0eSB3ZSBtYXkgYWRkIGluIHRoZSBmdXR1cmVcbiAgICAgIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBfZXh0ZW5kcyh7fSwgZGF0YS5vZmZzZXRzLnBvcHBlciwgZ2V0UG9wcGVyT2Zmc2V0cyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5vZmZzZXRzLnJlZmVyZW5jZSwgZGF0YS5wbGFjZW1lbnQpKTtcblxuICAgICAgZGF0YSA9IHJ1bk1vZGlmaWVycyhkYXRhLmluc3RhbmNlLm1vZGlmaWVycywgZGF0YSwgJ2ZsaXAnKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSB1cGRhdGUgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIGtlZXBUb2dldGhlcihkYXRhKSB7XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbiAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbiAgdmFyIGlzVmVydGljYWwgPSBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xO1xuICB2YXIgc2lkZSA9IGlzVmVydGljYWwgPyAncmlnaHQnIDogJ2JvdHRvbSc7XG4gIHZhciBvcFNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gIHZhciBtZWFzdXJlbWVudCA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG5cbiAgaWYgKHBvcHBlcltzaWRlXSA8IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtvcFNpZGVdKSAtIHBvcHBlclttZWFzdXJlbWVudF07XG4gIH1cbiAgaWYgKHBvcHBlcltvcFNpZGVdID4gZmxvb3IocmVmZXJlbmNlW3NpZGVdKSkge1xuICAgIGRhdGEub2Zmc2V0cy5wb3BwZXJbb3BTaWRlXSA9IGZsb29yKHJlZmVyZW5jZVtzaWRlXSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIHN0cmluZyBjb250YWluaW5nIHZhbHVlICsgdW5pdCBpbnRvIGEgcHggdmFsdWUgbnVtYmVyXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiB7bW9kaWZpZXJzfm9mZnNldH1cbiAqIEBwcml2YXRlXG4gKiBAYXJndW1lbnQge1N0cmluZ30gc3RyIC0gVmFsdWUgKyB1bml0IHN0cmluZ1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IG1lYXN1cmVtZW50IC0gYGhlaWdodGAgb3IgYHdpZHRoYFxuICogQGFyZ3VtZW50IHtPYmplY3R9IHBvcHBlck9mZnNldHNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSByZWZlcmVuY2VPZmZzZXRzXG4gKiBAcmV0dXJucyB7TnVtYmVyfFN0cmluZ31cbiAqIFZhbHVlIGluIHBpeGVscywgb3Igb3JpZ2luYWwgc3RyaW5nIGlmIG5vIHZhbHVlcyB3ZXJlIGV4dHJhY3RlZFxuICovXG5mdW5jdGlvbiB0b1ZhbHVlKHN0ciwgbWVhc3VyZW1lbnQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMpIHtcbiAgLy8gc2VwYXJhdGUgdmFsdWUgZnJvbSB1bml0XG4gIHZhciBzcGxpdCA9IHN0ci5tYXRjaCgvKCg/OlxcLXxcXCspP1xcZCpcXC4/XFxkKikoLiopLyk7XG4gIHZhciB2YWx1ZSA9ICtzcGxpdFsxXTtcbiAgdmFyIHVuaXQgPSBzcGxpdFsyXTtcblxuICAvLyBJZiBpdCdzIG5vdCBhIG51bWJlciBpdCdzIGFuIG9wZXJhdG9yLCBJIGd1ZXNzXG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9XG5cbiAgaWYgKHVuaXQuaW5kZXhPZignJScpID09PSAwKSB7XG4gICAgdmFyIGVsZW1lbnQgPSB2b2lkIDA7XG4gICAgc3dpdGNoICh1bml0KSB7XG4gICAgICBjYXNlICclcCc6XG4gICAgICAgIGVsZW1lbnQgPSBwb3BwZXJPZmZzZXRzO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJyUnOlxuICAgICAgY2FzZSAnJXInOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZWxlbWVudCA9IHJlZmVyZW5jZU9mZnNldHM7XG4gICAgfVxuXG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0KGVsZW1lbnQpO1xuICAgIHJldHVybiByZWN0W21lYXN1cmVtZW50XSAvIDEwMCAqIHZhbHVlO1xuICB9IGVsc2UgaWYgKHVuaXQgPT09ICd2aCcgfHwgdW5pdCA9PT0gJ3Z3Jykge1xuICAgIC8vIGlmIGlzIGEgdmggb3IgdncsIHdlIGNhbGN1bGF0ZSB0aGUgc2l6ZSBiYXNlZCBvbiB0aGUgdmlld3BvcnRcbiAgICB2YXIgc2l6ZSA9IHZvaWQgMDtcbiAgICBpZiAodW5pdCA9PT0gJ3ZoJykge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQsIHdpbmRvdy5pbm5lckhlaWdodCB8fCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2l6ZSA9IE1hdGgubWF4KGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCwgd2luZG93LmlubmVyV2lkdGggfHwgMCk7XG4gICAgfVxuICAgIHJldHVybiBzaXplIC8gMTAwICogdmFsdWU7XG4gIH0gZWxzZSB7XG4gICAgLy8gaWYgaXMgYW4gZXhwbGljaXQgcGl4ZWwgdW5pdCwgd2UgZ2V0IHJpZCBvZiB0aGUgdW5pdCBhbmQga2VlcCB0aGUgdmFsdWVcbiAgICAvLyBpZiBpcyBhbiBpbXBsaWNpdCB1bml0LCBpdCdzIHB4LCBhbmQgd2UgcmV0dXJuIGp1c3QgdGhlIHZhbHVlXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYW4gYG9mZnNldGAgc3RyaW5nIHRvIGV4dHJhcG9sYXRlIGB4YCBhbmQgYHlgIG51bWVyaWMgb2Zmc2V0cy5cbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIHttb2RpZmllcnN+b2Zmc2V0fVxuICogQHByaXZhdGVcbiAqIEBhcmd1bWVudCB7U3RyaW5nfSBvZmZzZXRcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBwb3BwZXJPZmZzZXRzXG4gKiBAYXJndW1lbnQge09iamVjdH0gcmVmZXJlbmNlT2Zmc2V0c1xuICogQGFyZ3VtZW50IHtTdHJpbmd9IGJhc2VQbGFjZW1lbnRcbiAqIEByZXR1cm5zIHtBcnJheX0gYSB0d28gY2VsbHMgYXJyYXkgd2l0aCB4IGFuZCB5IG9mZnNldHMgaW4gbnVtYmVyc1xuICovXG5mdW5jdGlvbiBwYXJzZU9mZnNldChvZmZzZXQsIHBvcHBlck9mZnNldHMsIHJlZmVyZW5jZU9mZnNldHMsIGJhc2VQbGFjZW1lbnQpIHtcbiAgdmFyIG9mZnNldHMgPSBbMCwgMF07XG5cbiAgLy8gVXNlIGhlaWdodCBpZiBwbGFjZW1lbnQgaXMgbGVmdCBvciByaWdodCBhbmQgaW5kZXggaXMgMCBvdGhlcndpc2UgdXNlIHdpZHRoXG4gIC8vIGluIHRoaXMgd2F5IHRoZSBmaXJzdCBvZmZzZXQgd2lsbCB1c2UgYW4gYXhpcyBhbmQgdGhlIHNlY29uZCBvbmVcbiAgLy8gd2lsbCB1c2UgdGhlIG90aGVyIG9uZVxuICB2YXIgdXNlSGVpZ2h0ID0gWydyaWdodCcsICdsZWZ0J10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgLy8gU3BsaXQgdGhlIG9mZnNldCBzdHJpbmcgdG8gb2J0YWluIGEgbGlzdCBvZiB2YWx1ZXMgYW5kIG9wZXJhbmRzXG4gIC8vIFRoZSByZWdleCBhZGRyZXNzZXMgdmFsdWVzIHdpdGggdGhlIHBsdXMgb3IgbWludXMgc2lnbiBpbiBmcm9udCAoKzEwLCAtMjAsIGV0YylcbiAgdmFyIGZyYWdtZW50cyA9IG9mZnNldC5zcGxpdCgvKFxcK3xcXC0pLykubWFwKGZ1bmN0aW9uIChmcmFnKSB7XG4gICAgcmV0dXJuIGZyYWcudHJpbSgpO1xuICB9KTtcblxuICAvLyBEZXRlY3QgaWYgdGhlIG9mZnNldCBzdHJpbmcgY29udGFpbnMgYSBwYWlyIG9mIHZhbHVlcyBvciBhIHNpbmdsZSBvbmVcbiAgLy8gdGhleSBjb3VsZCBiZSBzZXBhcmF0ZWQgYnkgY29tbWEgb3Igc3BhY2VcbiAgdmFyIGRpdmlkZXIgPSBmcmFnbWVudHMuaW5kZXhPZihmaW5kKGZyYWdtZW50cywgZnVuY3Rpb24gKGZyYWcpIHtcbiAgICByZXR1cm4gZnJhZy5zZWFyY2goLyx8XFxzLykgIT09IC0xO1xuICB9KSk7XG5cbiAgaWYgKGZyYWdtZW50c1tkaXZpZGVyXSAmJiBmcmFnbWVudHNbZGl2aWRlcl0uaW5kZXhPZignLCcpID09PSAtMSkge1xuICAgIGNvbnNvbGUud2FybignT2Zmc2V0cyBzZXBhcmF0ZWQgYnkgd2hpdGUgc3BhY2UocykgYXJlIGRlcHJlY2F0ZWQsIHVzZSBhIGNvbW1hICgsKSBpbnN0ZWFkLicpO1xuICB9XG5cbiAgLy8gSWYgZGl2aWRlciBpcyBmb3VuZCwgd2UgZGl2aWRlIHRoZSBsaXN0IG9mIHZhbHVlcyBhbmQgb3BlcmFuZHMgdG8gZGl2aWRlXG4gIC8vIHRoZW0gYnkgb2ZzZXQgWCBhbmQgWS5cbiAgdmFyIHNwbGl0UmVnZXggPSAvXFxzKixcXHMqfFxccysvO1xuICB2YXIgb3BzID0gZGl2aWRlciAhPT0gLTEgPyBbZnJhZ21lbnRzLnNsaWNlKDAsIGRpdmlkZXIpLmNvbmNhdChbZnJhZ21lbnRzW2RpdmlkZXJdLnNwbGl0KHNwbGl0UmVnZXgpWzBdXSksIFtmcmFnbWVudHNbZGl2aWRlcl0uc3BsaXQoc3BsaXRSZWdleClbMV1dLmNvbmNhdChmcmFnbWVudHMuc2xpY2UoZGl2aWRlciArIDEpKV0gOiBbZnJhZ21lbnRzXTtcblxuICAvLyBDb252ZXJ0IHRoZSB2YWx1ZXMgd2l0aCB1bml0cyB0byBhYnNvbHV0ZSBwaXhlbHMgdG8gYWxsb3cgb3VyIGNvbXB1dGF0aW9uc1xuICBvcHMgPSBvcHMubWFwKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICAvLyBNb3N0IG9mIHRoZSB1bml0cyByZWx5IG9uIHRoZSBvcmllbnRhdGlvbiBvZiB0aGUgcG9wcGVyXG4gICAgdmFyIG1lYXN1cmVtZW50ID0gKGluZGV4ID09PSAxID8gIXVzZUhlaWdodCA6IHVzZUhlaWdodCkgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG1lcmdlV2l0aFByZXZpb3VzID0gZmFsc2U7XG4gICAgcmV0dXJuIG9wXG4gICAgLy8gVGhpcyBhZ2dyZWdhdGVzIGFueSBgK2Agb3IgYC1gIHNpZ24gdGhhdCBhcmVuJ3QgY29uc2lkZXJlZCBvcGVyYXRvcnNcbiAgICAvLyBlLmcuOiAxMCArICs1ID0+IFsxMCwgKywgKzVdXG4gICAgLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgICAgaWYgKGFbYS5sZW5ndGggLSAxXSA9PT0gJycgJiYgWycrJywgJy0nXS5pbmRleE9mKGIpICE9PSAtMSkge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gPSBiO1xuICAgICAgICBtZXJnZVdpdGhQcmV2aW91cyA9IHRydWU7XG4gICAgICAgIHJldHVybiBhO1xuICAgICAgfSBlbHNlIGlmIChtZXJnZVdpdGhQcmV2aW91cykge1xuICAgICAgICBhW2EubGVuZ3RoIC0gMV0gKz0gYjtcbiAgICAgICAgbWVyZ2VXaXRoUHJldmlvdXMgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5jb25jYXQoYik7XG4gICAgICB9XG4gICAgfSwgW10pXG4gICAgLy8gSGVyZSB3ZSBjb252ZXJ0IHRoZSBzdHJpbmcgdmFsdWVzIGludG8gbnVtYmVyIHZhbHVlcyAoaW4gcHgpXG4gICAgLm1hcChmdW5jdGlvbiAoc3RyKSB7XG4gICAgICByZXR1cm4gdG9WYWx1ZShzdHIsIG1lYXN1cmVtZW50LCBwb3BwZXJPZmZzZXRzLCByZWZlcmVuY2VPZmZzZXRzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgLy8gTG9vcCB0cm91Z2ggdGhlIG9mZnNldHMgYXJyYXlzIGFuZCBleGVjdXRlIHRoZSBvcGVyYXRpb25zXG4gIG9wcy5mb3JFYWNoKGZ1bmN0aW9uIChvcCwgaW5kZXgpIHtcbiAgICBvcC5mb3JFYWNoKGZ1bmN0aW9uIChmcmFnLCBpbmRleDIpIHtcbiAgICAgIGlmIChpc051bWVyaWMoZnJhZykpIHtcbiAgICAgICAgb2Zmc2V0c1tpbmRleF0gKz0gZnJhZyAqIChvcFtpbmRleDIgLSAxXSA9PT0gJy0nID8gLTEgOiAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvZmZzZXRzO1xufVxuXG4vKipcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIE1vZGlmaWVyc1xuICogQGFyZ3VtZW50IHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IHVwZGF0ZSBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEBhcmd1bWVudCB7TnVtYmVyfFN0cmluZ30gb3B0aW9ucy5vZmZzZXQ9MFxuICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIG9mZnNldChkYXRhLCBfcmVmKSB7XG4gIHZhciBvZmZzZXQgPSBfcmVmLm9mZnNldDtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50LFxuICAgICAgX2RhdGEkb2Zmc2V0cyA9IGRhdGEub2Zmc2V0cyxcbiAgICAgIHBvcHBlciA9IF9kYXRhJG9mZnNldHMucG9wcGVyLFxuICAgICAgcmVmZXJlbmNlID0gX2RhdGEkb2Zmc2V0cy5yZWZlcmVuY2U7XG5cbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcblxuICB2YXIgb2Zmc2V0cyA9IHZvaWQgMDtcbiAgaWYgKGlzTnVtZXJpYygrb2Zmc2V0KSkge1xuICAgIG9mZnNldHMgPSBbK29mZnNldCwgMF07XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0cyA9IHBhcnNlT2Zmc2V0KG9mZnNldCwgcG9wcGVyLCByZWZlcmVuY2UsIGJhc2VQbGFjZW1lbnQpO1xuICB9XG5cbiAgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdsZWZ0Jykge1xuICAgIHBvcHBlci50b3AgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIubGVmdCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdyaWdodCcpIHtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1sxXTtcbiAgfSBlbHNlIGlmIChiYXNlUGxhY2VtZW50ID09PSAndG9wJykge1xuICAgIHBvcHBlci5sZWZ0ICs9IG9mZnNldHNbMF07XG4gICAgcG9wcGVyLnRvcCAtPSBvZmZzZXRzWzFdO1xuICB9IGVsc2UgaWYgKGJhc2VQbGFjZW1lbnQgPT09ICdib3R0b20nKSB7XG4gICAgcG9wcGVyLmxlZnQgKz0gb2Zmc2V0c1swXTtcbiAgICBwb3BwZXIudG9wICs9IG9mZnNldHNbMV07XG4gIH1cblxuICBkYXRhLnBvcHBlciA9IHBvcHBlcjtcbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhkYXRhLCBvcHRpb25zKSB7XG4gIHZhciBib3VuZGFyaWVzRWxlbWVudCA9IG9wdGlvbnMuYm91bmRhcmllc0VsZW1lbnQgfHwgZ2V0T2Zmc2V0UGFyZW50KGRhdGEuaW5zdGFuY2UucG9wcGVyKTtcblxuICAvLyBJZiBvZmZzZXRQYXJlbnQgaXMgdGhlIHJlZmVyZW5jZSBlbGVtZW50LCB3ZSByZWFsbHkgd2FudCB0b1xuICAvLyBnbyBvbmUgc3RlcCB1cCBhbmQgdXNlIHRoZSBuZXh0IG9mZnNldFBhcmVudCBhcyByZWZlcmVuY2UgdG9cbiAgLy8gYXZvaWQgdG8gbWFrZSB0aGlzIG1vZGlmaWVyIGNvbXBsZXRlbHkgdXNlbGVzcyBhbmQgbG9vayBsaWtlIGJyb2tlblxuICBpZiAoZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UgPT09IGJvdW5kYXJpZXNFbGVtZW50KSB7XG4gICAgYm91bmRhcmllc0VsZW1lbnQgPSBnZXRPZmZzZXRQYXJlbnQoYm91bmRhcmllc0VsZW1lbnQpO1xuICB9XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc2V0cyB0aGUgcG9wcGVyJ3MgcG9zaXRpb24gc28gdGhhdCB0aGUgZG9jdW1lbnQgc2l6ZSBjYW4gYmUgY2FsY3VsYXRlZCBleGNsdWRpbmdcbiAgLy8gdGhlIHNpemUgb2YgdGhlIHBvcHBlciBlbGVtZW50IGl0c2VsZlxuICB2YXIgdHJhbnNmb3JtUHJvcCA9IGdldFN1cHBvcnRlZFByb3BlcnR5TmFtZSgndHJhbnNmb3JtJyk7XG4gIHZhciBwb3BwZXJTdHlsZXMgPSBkYXRhLmluc3RhbmNlLnBvcHBlci5zdHlsZTsgLy8gYXNzaWdubWVudCB0byBoZWxwIG1pbmlmaWNhdGlvblxuICB2YXIgdG9wID0gcG9wcGVyU3R5bGVzLnRvcCxcbiAgICAgIGxlZnQgPSBwb3BwZXJTdHlsZXMubGVmdCxcbiAgICAgIHRyYW5zZm9ybSA9IHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXTtcblxuICBwb3BwZXJTdHlsZXMudG9wID0gJyc7XG4gIHBvcHBlclN0eWxlcy5sZWZ0ID0gJyc7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9ICcnO1xuXG4gIHZhciBib3VuZGFyaWVzID0gZ2V0Qm91bmRhcmllcyhkYXRhLmluc3RhbmNlLnBvcHBlciwgZGF0YS5pbnN0YW5jZS5yZWZlcmVuY2UsIG9wdGlvbnMucGFkZGluZywgYm91bmRhcmllc0VsZW1lbnQsIGRhdGEucG9zaXRpb25GaXhlZCk7XG5cbiAgLy8gTk9URTogRE9NIGFjY2VzcyBoZXJlXG4gIC8vIHJlc3RvcmVzIHRoZSBvcmlnaW5hbCBzdHlsZSBwcm9wZXJ0aWVzIGFmdGVyIHRoZSBvZmZzZXRzIGhhdmUgYmVlbiBjb21wdXRlZFxuICBwb3BwZXJTdHlsZXMudG9wID0gdG9wO1xuICBwb3BwZXJTdHlsZXMubGVmdCA9IGxlZnQ7XG4gIHBvcHBlclN0eWxlc1t0cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zZm9ybTtcblxuICBvcHRpb25zLmJvdW5kYXJpZXMgPSBib3VuZGFyaWVzO1xuXG4gIHZhciBvcmRlciA9IG9wdGlvbnMucHJpb3JpdHk7XG4gIHZhciBwb3BwZXIgPSBkYXRhLm9mZnNldHMucG9wcGVyO1xuXG4gIHZhciBjaGVjayA9IHtcbiAgICBwcmltYXJ5OiBmdW5jdGlvbiBwcmltYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIHZhbHVlID0gcG9wcGVyW3BsYWNlbWVudF07XG4gICAgICBpZiAocG9wcGVyW3BsYWNlbWVudF0gPCBib3VuZGFyaWVzW3BsYWNlbWVudF0gJiYgIW9wdGlvbnMuZXNjYXBlV2l0aFJlZmVyZW5jZSkge1xuICAgICAgICB2YWx1ZSA9IE1hdGgubWF4KHBvcHBlcltwbGFjZW1lbnRdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBwbGFjZW1lbnQsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNlY29uZGFyeTogZnVuY3Rpb24gc2Vjb25kYXJ5KHBsYWNlbWVudCkge1xuICAgICAgdmFyIG1haW5TaWRlID0gcGxhY2VtZW50ID09PSAncmlnaHQnID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgICB2YXIgdmFsdWUgPSBwb3BwZXJbbWFpblNpZGVdO1xuICAgICAgaWYgKHBvcHBlcltwbGFjZW1lbnRdID4gYm91bmRhcmllc1twbGFjZW1lbnRdICYmICFvcHRpb25zLmVzY2FwZVdpdGhSZWZlcmVuY2UpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLm1pbihwb3BwZXJbbWFpblNpZGVdLCBib3VuZGFyaWVzW3BsYWNlbWVudF0gLSAocGxhY2VtZW50ID09PSAncmlnaHQnID8gcG9wcGVyLndpZHRoIDogcG9wcGVyLmhlaWdodCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlZmluZVByb3BlcnR5KHt9LCBtYWluU2lkZSwgdmFsdWUpO1xuICAgIH1cbiAgfTtcblxuICBvcmRlci5mb3JFYWNoKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICB2YXIgc2lkZSA9IFsnbGVmdCcsICd0b3AnXS5pbmRleE9mKHBsYWNlbWVudCkgIT09IC0xID8gJ3ByaW1hcnknIDogJ3NlY29uZGFyeSc7XG4gICAgcG9wcGVyID0gX2V4dGVuZHMoe30sIHBvcHBlciwgY2hlY2tbc2lkZV0ocGxhY2VtZW50KSk7XG4gIH0pO1xuXG4gIGRhdGEub2Zmc2V0cy5wb3BwZXIgPSBwb3BwZXI7XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgYHVwZGF0ZWAgbWV0aG9kXG4gKiBAYXJndW1lbnQge09iamVjdH0gb3B0aW9ucyAtIE1vZGlmaWVycyBjb25maWd1cmF0aW9uIGFuZCBvcHRpb25zXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgZGF0YSBvYmplY3QsIHByb3Blcmx5IG1vZGlmaWVkXG4gKi9cbmZ1bmN0aW9uIHNoaWZ0KGRhdGEpIHtcbiAgdmFyIHBsYWNlbWVudCA9IGRhdGEucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xuICB2YXIgc2hpZnR2YXJpYXRpb24gPSBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcblxuICAvLyBpZiBzaGlmdCBzaGlmdHZhcmlhdGlvbiBpcyBzcGVjaWZpZWQsIHJ1biB0aGUgbW9kaWZpZXJcbiAgaWYgKHNoaWZ0dmFyaWF0aW9uKSB7XG4gICAgdmFyIF9kYXRhJG9mZnNldHMgPSBkYXRhLm9mZnNldHMsXG4gICAgICAgIHJlZmVyZW5jZSA9IF9kYXRhJG9mZnNldHMucmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXIgPSBfZGF0YSRvZmZzZXRzLnBvcHBlcjtcblxuICAgIHZhciBpc1ZlcnRpY2FsID0gWydib3R0b20nLCAndG9wJ10uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG4gICAgdmFyIHNpZGUgPSBpc1ZlcnRpY2FsID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgdmFyIG1lYXN1cmVtZW50ID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcblxuICAgIHZhciBzaGlmdE9mZnNldHMgPSB7XG4gICAgICBzdGFydDogZGVmaW5lUHJvcGVydHkoe30sIHNpZGUsIHJlZmVyZW5jZVtzaWRlXSksXG4gICAgICBlbmQ6IGRlZmluZVByb3BlcnR5KHt9LCBzaWRlLCByZWZlcmVuY2Vbc2lkZV0gKyByZWZlcmVuY2VbbWVhc3VyZW1lbnRdIC0gcG9wcGVyW21lYXN1cmVtZW50XSlcbiAgICB9O1xuXG4gICAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IF9leHRlbmRzKHt9LCBwb3BwZXIsIHNoaWZ0T2Zmc2V0c1tzaGlmdHZhcmlhdGlvbl0pO1xuICB9XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgTW9kaWZpZXJzXG4gKiBAYXJndW1lbnQge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhIG9iamVjdCBnZW5lcmF0ZWQgYnkgdXBkYXRlIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge09iamVjdH0gVGhlIGRhdGEgb2JqZWN0LCBwcm9wZXJseSBtb2RpZmllZFxuICovXG5mdW5jdGlvbiBoaWRlKGRhdGEpIHtcbiAgaWYgKCFpc01vZGlmaWVyUmVxdWlyZWQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsICdoaWRlJywgJ3ByZXZlbnRPdmVyZmxvdycpKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgcmVmUmVjdCA9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2U7XG4gIHZhciBib3VuZCA9IGZpbmQoZGF0YS5pbnN0YW5jZS5tb2RpZmllcnMsIGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIHJldHVybiBtb2RpZmllci5uYW1lID09PSAncHJldmVudE92ZXJmbG93JztcbiAgfSkuYm91bmRhcmllcztcblxuICBpZiAocmVmUmVjdC5ib3R0b20gPCBib3VuZC50b3AgfHwgcmVmUmVjdC5sZWZ0ID4gYm91bmQucmlnaHQgfHwgcmVmUmVjdC50b3AgPiBib3VuZC5ib3R0b20gfHwgcmVmUmVjdC5yaWdodCA8IGJvdW5kLmxlZnQpIHtcbiAgICAvLyBBdm9pZCB1bm5lY2Vzc2FyeSBET00gYWNjZXNzIGlmIHZpc2liaWxpdHkgaGFzbid0IGNoYW5nZWRcbiAgICBpZiAoZGF0YS5oaWRlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBkYXRhLmhpZGUgPSB0cnVlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gJyc7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXZvaWQgdW5uZWNlc3NhcnkgRE9NIGFjY2VzcyBpZiB2aXNpYmlsaXR5IGhhc24ndCBjaGFuZ2VkXG4gICAgaWYgKGRhdGEuaGlkZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGRhdGEuaGlkZSA9IGZhbHNlO1xuICAgIGRhdGEuYXR0cmlidXRlc1sneC1vdXQtb2YtYm91bmRhcmllcyddID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBNb2RpZmllcnNcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEgb2JqZWN0IGdlbmVyYXRlZCBieSBgdXBkYXRlYCBtZXRob2RcbiAqIEBhcmd1bWVudCB7T2JqZWN0fSBvcHRpb25zIC0gTW9kaWZpZXJzIGNvbmZpZ3VyYXRpb24gYW5kIG9wdGlvbnNcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuZnVuY3Rpb24gaW5uZXIoZGF0YSkge1xuICB2YXIgcGxhY2VtZW50ID0gZGF0YS5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50LnNwbGl0KCctJylbMF07XG4gIHZhciBfZGF0YSRvZmZzZXRzID0gZGF0YS5vZmZzZXRzLFxuICAgICAgcG9wcGVyID0gX2RhdGEkb2Zmc2V0cy5wb3BwZXIsXG4gICAgICByZWZlcmVuY2UgPSBfZGF0YSRvZmZzZXRzLnJlZmVyZW5jZTtcblxuICB2YXIgaXNIb3JpeiA9IFsnbGVmdCcsICdyaWdodCddLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gIHZhciBzdWJ0cmFjdExlbmd0aCA9IFsndG9wJywgJ2xlZnQnXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID09PSAtMTtcblxuICBwb3BwZXJbaXNIb3JpeiA/ICdsZWZ0JyA6ICd0b3AnXSA9IHJlZmVyZW5jZVtiYXNlUGxhY2VtZW50XSAtIChzdWJ0cmFjdExlbmd0aCA/IHBvcHBlcltpc0hvcml6ID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA6IDApO1xuXG4gIGRhdGEucGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgZGF0YS5vZmZzZXRzLnBvcHBlciA9IGdldENsaWVudFJlY3QocG9wcGVyKTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBNb2RpZmllciBmdW5jdGlvbiwgZWFjaCBtb2RpZmllciBjYW4gaGF2ZSBhIGZ1bmN0aW9uIG9mIHRoaXMgdHlwZSBhc3NpZ25lZFxuICogdG8gaXRzIGBmbmAgcHJvcGVydHkuPGJyIC8+XG4gKiBUaGVzZSBmdW5jdGlvbnMgd2lsbCBiZSBjYWxsZWQgb24gZWFjaCB1cGRhdGUsIHRoaXMgbWVhbnMgdGhhdCB5b3UgbXVzdFxuICogbWFrZSBzdXJlIHRoZXkgYXJlIHBlcmZvcm1hbnQgZW5vdWdoIHRvIGF2b2lkIHBlcmZvcm1hbmNlIGJvdHRsZW5lY2tzLlxuICpcbiAqIEBmdW5jdGlvbiBNb2RpZmllckZuXG4gKiBAYXJndW1lbnQge2RhdGFPYmplY3R9IGRhdGEgLSBUaGUgZGF0YSBvYmplY3QgZ2VuZXJhdGVkIGJ5IGB1cGRhdGVgIG1ldGhvZFxuICogQGFyZ3VtZW50IHtPYmplY3R9IG9wdGlvbnMgLSBNb2RpZmllcnMgY29uZmlndXJhdGlvbiBhbmQgb3B0aW9uc1xuICogQHJldHVybnMge2RhdGFPYmplY3R9IFRoZSBkYXRhIG9iamVjdCwgcHJvcGVybHkgbW9kaWZpZWRcbiAqL1xuXG4vKipcbiAqIE1vZGlmaWVycyBhcmUgcGx1Z2lucyB1c2VkIHRvIGFsdGVyIHRoZSBiZWhhdmlvciBvZiB5b3VyIHBvcHBlcnMuPGJyIC8+XG4gKiBQb3BwZXIuanMgdXNlcyBhIHNldCBvZiA5IG1vZGlmaWVycyB0byBwcm92aWRlIGFsbCB0aGUgYmFzaWMgZnVuY3Rpb25hbGl0aWVzXG4gKiBuZWVkZWQgYnkgdGhlIGxpYnJhcnkuXG4gKlxuICogVXN1YWxseSB5b3UgZG9uJ3Qgd2FudCB0byBvdmVycmlkZSB0aGUgYG9yZGVyYCwgYGZuYCBhbmQgYG9uTG9hZGAgcHJvcHMuXG4gKiBBbGwgdGhlIG90aGVyIHByb3BlcnRpZXMgYXJlIGNvbmZpZ3VyYXRpb25zIHRoYXQgY291bGQgYmUgdHdlYWtlZC5cbiAqIEBuYW1lc3BhY2UgbW9kaWZpZXJzXG4gKi9cbnZhciBtb2RpZmllcnMgPSB7XG4gIC8qKlxuICAgKiBNb2RpZmllciB1c2VkIHRvIHNoaWZ0IHRoZSBwb3BwZXIgb24gdGhlIHN0YXJ0IG9yIGVuZCBvZiBpdHMgcmVmZXJlbmNlXG4gICAqIGVsZW1lbnQuPGJyIC8+XG4gICAqIEl0IHdpbGwgcmVhZCB0aGUgdmFyaWF0aW9uIG9mIHRoZSBgcGxhY2VtZW50YCBwcm9wZXJ0eS48YnIgLz5cbiAgICogSXQgY2FuIGJlIG9uZSBlaXRoZXIgYC1lbmRgIG9yIGAtc3RhcnRgLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgc2hpZnQ6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9MTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiAxMDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBzaGlmdFxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgYG9mZnNldGAgbW9kaWZpZXIgY2FuIHNoaWZ0IHlvdXIgcG9wcGVyIG9uIGJvdGggaXRzIGF4aXMuXG4gICAqXG4gICAqIEl0IGFjY2VwdHMgdGhlIGZvbGxvd2luZyB1bml0czpcbiAgICogLSBgcHhgIG9yIHVuaXQtbGVzcywgaW50ZXJwcmV0ZWQgYXMgcGl4ZWxzXG4gICAqIC0gYCVgIG9yIGAlcmAsIHBlcmNlbnRhZ2UgcmVsYXRpdmUgdG8gdGhlIGxlbmd0aCBvZiB0aGUgcmVmZXJlbmNlIGVsZW1lbnRcbiAgICogLSBgJXBgLCBwZXJjZW50YWdlIHJlbGF0aXZlIHRvIHRoZSBsZW5ndGggb2YgdGhlIHBvcHBlciBlbGVtZW50XG4gICAqIC0gYHZ3YCwgQ1NTIHZpZXdwb3J0IHdpZHRoIHVuaXRcbiAgICogLSBgdmhgLCBDU1Mgdmlld3BvcnQgaGVpZ2h0IHVuaXRcbiAgICpcbiAgICogRm9yIGxlbmd0aCBpcyBpbnRlbmRlZCB0aGUgbWFpbiBheGlzIHJlbGF0aXZlIHRvIHRoZSBwbGFjZW1lbnQgb2YgdGhlIHBvcHBlci48YnIgLz5cbiAgICogVGhpcyBtZWFucyB0aGF0IGlmIHRoZSBwbGFjZW1lbnQgaXMgYHRvcGAgb3IgYGJvdHRvbWAsIHRoZSBsZW5ndGggd2lsbCBiZSB0aGVcbiAgICogYHdpZHRoYC4gSW4gY2FzZSBvZiBgbGVmdGAgb3IgYHJpZ2h0YCwgaXQgd2lsbCBiZSB0aGUgYGhlaWdodGAuXG4gICAqXG4gICAqIFlvdSBjYW4gcHJvdmlkZSBhIHNpbmdsZSB2YWx1ZSAoYXMgYE51bWJlcmAgb3IgYFN0cmluZ2ApLCBvciBhIHBhaXIgb2YgdmFsdWVzXG4gICAqIGFzIGBTdHJpbmdgIGRpdmlkZWQgYnkgYSBjb21tYSBvciBvbmUgKG9yIG1vcmUpIHdoaXRlIHNwYWNlcy48YnIgLz5cbiAgICogVGhlIGxhdHRlciBpcyBhIGRlcHJlY2F0ZWQgbWV0aG9kIGJlY2F1c2UgaXQgbGVhZHMgdG8gY29uZnVzaW9uIGFuZCB3aWxsIGJlXG4gICAqIHJlbW92ZWQgaW4gdjIuPGJyIC8+XG4gICAqIEFkZGl0aW9uYWxseSwgaXQgYWNjZXB0cyBhZGRpdGlvbnMgYW5kIHN1YnRyYWN0aW9ucyBiZXR3ZWVuIGRpZmZlcmVudCB1bml0cy5cbiAgICogTm90ZSB0aGF0IG11bHRpcGxpY2F0aW9ucyBhbmQgZGl2aXNpb25zIGFyZW4ndCBzdXBwb3J0ZWQuXG4gICAqXG4gICAqIFZhbGlkIGV4YW1wbGVzIGFyZTpcbiAgICogYGBgXG4gICAqIDEwXG4gICAqICcxMCUnXG4gICAqICcxMCwgMTAnXG4gICAqICcxMCUsIDEwJ1xuICAgKiAnMTAgKyAxMCUnXG4gICAqICcxMCAtIDV2aCArIDMlJ1xuICAgKiAnLTEwcHggKyA1dmgsIDVweCAtIDYlJ1xuICAgKiBgYGBcbiAgICogPiAqKk5CKio6IElmIHlvdSBkZXNpcmUgdG8gYXBwbHkgb2Zmc2V0cyB0byB5b3VyIHBvcHBlcnMgaW4gYSB3YXkgdGhhdCBtYXkgbWFrZSB0aGVtIG92ZXJsYXBcbiAgICogPiB3aXRoIHRoZWlyIHJlZmVyZW5jZSBlbGVtZW50LCB1bmZvcnR1bmF0ZWx5LCB5b3Ugd2lsbCBoYXZlIHRvIGRpc2FibGUgdGhlIGBmbGlwYCBtb2RpZmllci5cbiAgICogPiBZb3UgY2FuIHJlYWQgbW9yZSBvbiB0aGlzIGF0IHRoaXMgW2lzc3VlXShodHRwczovL2dpdGh1Yi5jb20vRmV6VnJhc3RhL3BvcHBlci5qcy9pc3N1ZXMvMzczKS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIG9mZnNldDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0yMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDIwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IG9mZnNldCxcbiAgICAvKiogQHByb3Age051bWJlcnxTdHJpbmd9IG9mZnNldD0wXG4gICAgICogVGhlIG9mZnNldCB2YWx1ZSBhcyBkZXNjcmliZWQgaW4gdGhlIG1vZGlmaWVyIGRlc2NyaXB0aW9uXG4gICAgICovXG4gICAgb2Zmc2V0OiAwXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gcHJldmVudCB0aGUgcG9wcGVyIGZyb20gYmVpbmcgcG9zaXRpb25lZCBvdXRzaWRlIHRoZSBib3VuZGFyeS5cbiAgICpcbiAgICogQSBzY2VuYXJpbyBleGlzdHMgd2hlcmUgdGhlIHJlZmVyZW5jZSBpdHNlbGYgaXMgbm90IHdpdGhpbiB0aGUgYm91bmRhcmllcy48YnIgLz5cbiAgICogV2UgY2FuIHNheSBpdCBoYXMgXCJlc2NhcGVkIHRoZSBib3VuZGFyaWVzXCIg4oCUIG9yIGp1c3QgXCJlc2NhcGVkXCIuPGJyIC8+XG4gICAqIEluIHRoaXMgY2FzZSB3ZSBuZWVkIHRvIGRlY2lkZSB3aGV0aGVyIHRoZSBwb3BwZXIgc2hvdWxkIGVpdGhlcjpcbiAgICpcbiAgICogLSBkZXRhY2ggZnJvbSB0aGUgcmVmZXJlbmNlIGFuZCByZW1haW4gXCJ0cmFwcGVkXCIgaW4gdGhlIGJvdW5kYXJpZXMsIG9yXG4gICAqIC0gaWYgaXQgc2hvdWxkIGlnbm9yZSB0aGUgYm91bmRhcnkgYW5kIFwiZXNjYXBlIHdpdGggaXRzIHJlZmVyZW5jZVwiXG4gICAqXG4gICAqIFdoZW4gYGVzY2FwZVdpdGhSZWZlcmVuY2VgIGlzIHNldCB0b2B0cnVlYCBhbmQgcmVmZXJlbmNlIGlzIGNvbXBsZXRlbHlcbiAgICogb3V0c2lkZSBpdHMgYm91bmRhcmllcywgdGhlIHBvcHBlciB3aWxsIG92ZXJmbG93IChvciBjb21wbGV0ZWx5IGxlYXZlKVxuICAgKiB0aGUgYm91bmRhcmllcyBpbiBvcmRlciB0byByZW1haW4gYXR0YWNoZWQgdG8gdGhlIGVkZ2Ugb2YgdGhlIHJlZmVyZW5jZS5cbiAgICpcbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIHByZXZlbnRPdmVyZmxvdzoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj0zMDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDMwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7QXJyYXl9IFtwcmlvcml0eT1bJ2xlZnQnLCdyaWdodCcsJ3RvcCcsJ2JvdHRvbSddXVxuICAgICAqIFBvcHBlciB3aWxsIHRyeSB0byBwcmV2ZW50IG92ZXJmbG93IGZvbGxvd2luZyB0aGVzZSBwcmlvcml0aWVzIGJ5IGRlZmF1bHQsXG4gICAgICogdGhlbiwgaXQgY291bGQgb3ZlcmZsb3cgb24gdGhlIGxlZnQgYW5kIG9uIHRvcCBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHByaW9yaXR5OiBbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtudW1iZXJ9IHBhZGRpbmc9NVxuICAgICAqIEFtb3VudCBvZiBwaXhlbCB1c2VkIHRvIGRlZmluZSBhIG1pbmltdW0gZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm91bmRhcmllc1xuICAgICAqIGFuZCB0aGUgcG9wcGVyLiBUaGlzIG1ha2VzIHN1cmUgdGhlIHBvcHBlciBhbHdheXMgaGFzIGEgbGl0dGxlIHBhZGRpbmdcbiAgICAgKiBiZXR3ZWVuIHRoZSBlZGdlcyBvZiBpdHMgY29udGFpbmVyXG4gICAgICovXG4gICAgcGFkZGluZzogNSxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7U3RyaW5nfEhUTUxFbGVtZW50fSBib3VuZGFyaWVzRWxlbWVudD0nc2Nyb2xsUGFyZW50J1xuICAgICAqIEJvdW5kYXJpZXMgdXNlZCBieSB0aGUgbW9kaWZpZXIuIENhbiBiZSBgc2Nyb2xsUGFyZW50YCwgYHdpbmRvd2AsXG4gICAgICogYHZpZXdwb3J0YCBvciBhbnkgRE9NIGVsZW1lbnQuXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICdzY3JvbGxQYXJlbnQnXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gbWFrZSBzdXJlIHRoZSByZWZlcmVuY2UgYW5kIGl0cyBwb3BwZXIgc3RheSBuZWFyIGVhY2ggb3RoZXJcbiAgICogd2l0aG91dCBsZWF2aW5nIGFueSBnYXAgYmV0d2VlbiB0aGUgdHdvLiBFc3BlY2lhbGx5IHVzZWZ1bCB3aGVuIHRoZSBhcnJvdyBpc1xuICAgKiBlbmFibGVkIGFuZCB5b3Ugd2FudCB0byBlbnN1cmUgdGhhdCBpdCBwb2ludHMgdG8gaXRzIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBJdCBjYXJlcyBvbmx5IGFib3V0IHRoZSBmaXJzdCBheGlzLiBZb3UgY2FuIHN0aWxsIGhhdmUgcG9wcGVycyB3aXRoIG1hcmdpblxuICAgKiBiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQG1lbWJlcm9mIG1vZGlmaWVyc1xuICAgKiBAaW5uZXJcbiAgICovXG4gIGtlZXBUb2dldGhlcjoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj00MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDQwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGtlZXBUb2dldGhlclxuICB9LFxuXG4gIC8qKlxuICAgKiBUaGlzIG1vZGlmaWVyIGlzIHVzZWQgdG8gbW92ZSB0aGUgYGFycm93RWxlbWVudGAgb2YgdGhlIHBvcHBlciB0byBtYWtlXG4gICAqIHN1cmUgaXQgaXMgcG9zaXRpb25lZCBiZXR3ZWVuIHRoZSByZWZlcmVuY2UgZWxlbWVudCBhbmQgaXRzIHBvcHBlciBlbGVtZW50LlxuICAgKiBJdCB3aWxsIHJlYWQgdGhlIG91dGVyIHNpemUgb2YgdGhlIGBhcnJvd0VsZW1lbnRgIG5vZGUgdG8gZGV0ZWN0IGhvdyBtYW55XG4gICAqIHBpeGVscyBvZiBjb25qdW5jdGlvbiBhcmUgbmVlZGVkLlxuICAgKlxuICAgKiBJdCBoYXMgbm8gZWZmZWN0IGlmIG5vIGBhcnJvd0VsZW1lbnRgIGlzIHByb3ZpZGVkLlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXJyb3c6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NTAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA1MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBhcnJvdyxcbiAgICAvKiogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gZWxlbWVudD0nW3gtYXJyb3ddJyAtIFNlbGVjdG9yIG9yIG5vZGUgdXNlZCBhcyBhcnJvdyAqL1xuICAgIGVsZW1lbnQ6ICdbeC1hcnJvd10nXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gZmxpcCB0aGUgcG9wcGVyJ3MgcGxhY2VtZW50IHdoZW4gaXQgc3RhcnRzIHRvIG92ZXJsYXAgaXRzXG4gICAqIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqXG4gICAqICoqTk9URToqKiB0aGlzIG1vZGlmaWVyIHdpbGwgaW50ZXJydXB0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZSBhbmQgd2lsbFxuICAgKiByZXN0YXJ0IGl0IGlmIGl0IGRldGVjdHMgdGhlIG5lZWQgdG8gZmxpcCB0aGUgcGxhY2VtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgZmxpcDoge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj02MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDYwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGZsaXAsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xBcnJheX0gYmVoYXZpb3I9J2ZsaXAnXG4gICAgICogVGhlIGJlaGF2aW9yIHVzZWQgdG8gY2hhbmdlIHRoZSBwb3BwZXIncyBwbGFjZW1lbnQuIEl0IGNhbiBiZSBvbmUgb2ZcbiAgICAgKiBgZmxpcGAsIGBjbG9ja3dpc2VgLCBgY291bnRlcmNsb2Nrd2lzZWAgb3IgYW4gYXJyYXkgd2l0aCBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgKiBwbGFjZW1lbnRzICh3aXRoIG9wdGlvbmFsIHZhcmlhdGlvbnMpXG4gICAgICovXG4gICAgYmVoYXZpb3I6ICdmbGlwJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7bnVtYmVyfSBwYWRkaW5nPTVcbiAgICAgKiBUaGUgcG9wcGVyIHdpbGwgZmxpcCBpZiBpdCBoaXRzIHRoZSBlZGdlcyBvZiB0aGUgYGJvdW5kYXJpZXNFbGVtZW50YFxuICAgICAqL1xuICAgIHBhZGRpbmc6IDUsXG4gICAgLyoqXG4gICAgICogQHByb3Age1N0cmluZ3xIVE1MRWxlbWVudH0gYm91bmRhcmllc0VsZW1lbnQ9J3ZpZXdwb3J0J1xuICAgICAqIFRoZSBlbGVtZW50IHdoaWNoIHdpbGwgZGVmaW5lIHRoZSBib3VuZGFyaWVzIG9mIHRoZSBwb3BwZXIgcG9zaXRpb24uXG4gICAgICogVGhlIHBvcHBlciB3aWxsIG5ldmVyIGJlIHBsYWNlZCBvdXRzaWRlIG9mIHRoZSBkZWZpbmVkIGJvdW5kYXJpZXNcbiAgICAgKiAoZXhjZXB0IGlmIGBrZWVwVG9nZXRoZXJgIGlzIGVuYWJsZWQpXG4gICAgICovXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6ICd2aWV3cG9ydCcsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGZsaXBWYXJpYXRpb25zPWZhbHNlXG4gICAgICogVGhlIHBvcHBlciB3aWxsIHN3aXRjaCBwbGFjZW1lbnQgdmFyaWF0aW9uIGJldHdlZW4gYC1zdGFydGAgYW5kIGAtZW5kYCB3aGVuXG4gICAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50IG92ZXJsYXBzIGl0cyBib3VuZGFyaWVzLlxuICAgICAqXG4gICAgICogVGhlIG9yaWdpbmFsIHBsYWNlbWVudCBzaG91bGQgaGF2ZSBhIHNldCB2YXJpYXRpb24uXG4gICAgICovXG4gICAgZmxpcFZhcmlhdGlvbnM6IGZhbHNlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtCb29sZWFufSBmbGlwVmFyaWF0aW9uc0J5Q29udGVudD1mYWxzZVxuICAgICAqIFRoZSBwb3BwZXIgd2lsbCBzd2l0Y2ggcGxhY2VtZW50IHZhcmlhdGlvbiBiZXR3ZWVuIGAtc3RhcnRgIGFuZCBgLWVuZGAgd2hlblxuICAgICAqIHRoZSBwb3BwZXIgZWxlbWVudCBvdmVybGFwcyBpdHMgcmVmZXJlbmNlIGJvdW5kYXJpZXMuXG4gICAgICpcbiAgICAgKiBUaGUgb3JpZ2luYWwgcGxhY2VtZW50IHNob3VsZCBoYXZlIGEgc2V0IHZhcmlhdGlvbi5cbiAgICAgKi9cbiAgICBmbGlwVmFyaWF0aW9uc0J5Q29udGVudDogZmFsc2VcbiAgfSxcblxuICAvKipcbiAgICogTW9kaWZpZXIgdXNlZCB0byBtYWtlIHRoZSBwb3BwZXIgZmxvdyB0b3dhcmQgdGhlIGlubmVyIG9mIHRoZSByZWZlcmVuY2UgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgd2hlbiB0aGlzIG1vZGlmaWVyIGlzIGRpc2FibGVkLCB0aGUgcG9wcGVyIHdpbGwgYmUgcGxhY2VkIG91dHNpZGVcbiAgICogdGhlIHJlZmVyZW5jZSBlbGVtZW50LlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgaW5uZXI6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9NzAwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA3MDAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPWZhbHNlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGlubmVyXG4gIH0sXG5cbiAgLyoqXG4gICAqIE1vZGlmaWVyIHVzZWQgdG8gaGlkZSB0aGUgcG9wcGVyIHdoZW4gaXRzIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dHNpZGUgb2YgdGhlXG4gICAqIHBvcHBlciBib3VuZGFyaWVzLiBJdCB3aWxsIHNldCBhIGB4LW91dC1vZi1ib3VuZGFyaWVzYCBhdHRyaWJ1dGUgd2hpY2ggY2FuXG4gICAqIGJlIHVzZWQgdG8gaGlkZSB3aXRoIGEgQ1NTIHNlbGVjdG9yIHRoZSBwb3BwZXIgd2hlbiBpdHMgcmVmZXJlbmNlIGlzXG4gICAqIG91dCBvZiBib3VuZGFyaWVzLlxuICAgKlxuICAgKiBSZXF1aXJlcyB0aGUgYHByZXZlbnRPdmVyZmxvd2AgbW9kaWZpZXIgYmVmb3JlIGl0IGluIG9yZGVyIHRvIHdvcmsuXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBoaWRlOiB7XG4gICAgLyoqIEBwcm9wIHtudW1iZXJ9IG9yZGVyPTgwMCAtIEluZGV4IHVzZWQgdG8gZGVmaW5lIHRoZSBvcmRlciBvZiBleGVjdXRpb24gKi9cbiAgICBvcmRlcjogODAwLFxuICAgIC8qKiBAcHJvcCB7Qm9vbGVhbn0gZW5hYmxlZD10cnVlIC0gV2hldGhlciB0aGUgbW9kaWZpZXIgaXMgZW5hYmxlZCBvciBub3QgKi9cbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIC8qKiBAcHJvcCB7TW9kaWZpZXJGbn0gKi9cbiAgICBmbjogaGlkZVxuICB9LFxuXG4gIC8qKlxuICAgKiBDb21wdXRlcyB0aGUgc3R5bGUgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBlbGVtZW50IHRvIGdldHNcbiAgICogcHJvcGVybHkgcG9zaXRpb25lZC5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRoaXMgbW9kaWZpZXIgd2lsbCBub3QgdG91Y2ggdGhlIERPTSwgaXQganVzdCBwcmVwYXJlcyB0aGUgc3R5bGVzXG4gICAqIHNvIHRoYXQgYGFwcGx5U3R5bGVgIG1vZGlmaWVyIGNhbiBhcHBseSBpdC4gVGhpcyBzZXBhcmF0aW9uIGlzIHVzZWZ1bFxuICAgKiBpbiBjYXNlIHlvdSBuZWVkIHRvIHJlcGxhY2UgYGFwcGx5U3R5bGVgIHdpdGggYSBjdXN0b20gaW1wbGVtZW50YXRpb24uXG4gICAqXG4gICAqIFRoaXMgbW9kaWZpZXIgaGFzIGA4NTBgIGFzIGBvcmRlcmAgdmFsdWUgdG8gbWFpbnRhaW4gYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuICAgKiB3aXRoIHByZXZpb3VzIHZlcnNpb25zIG9mIFBvcHBlci5qcy4gRXhwZWN0IHRoZSBtb2RpZmllcnMgb3JkZXJpbmcgbWV0aG9kXG4gICAqIHRvIGNoYW5nZSBpbiBmdXR1cmUgbWFqb3IgdmVyc2lvbnMgb2YgdGhlIGxpYnJhcnkuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBtb2RpZmllcnNcbiAgICogQGlubmVyXG4gICAqL1xuICBjb21wdXRlU3R5bGU6IHtcbiAgICAvKiogQHByb3Age251bWJlcn0gb3JkZXI9ODUwIC0gSW5kZXggdXNlZCB0byBkZWZpbmUgdGhlIG9yZGVyIG9mIGV4ZWN1dGlvbiAqL1xuICAgIG9yZGVyOiA4NTAsXG4gICAgLyoqIEBwcm9wIHtCb29sZWFufSBlbmFibGVkPXRydWUgLSBXaGV0aGVyIHRoZSBtb2RpZmllciBpcyBlbmFibGVkIG9yIG5vdCAqL1xuICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgLyoqIEBwcm9wIHtNb2RpZmllckZufSAqL1xuICAgIGZuOiBjb21wdXRlU3R5bGUsXG4gICAgLyoqXG4gICAgICogQHByb3Age0Jvb2xlYW59IGdwdUFjY2VsZXJhdGlvbj10cnVlXG4gICAgICogSWYgdHJ1ZSwgaXQgdXNlcyB0aGUgQ1NTIDNEIHRyYW5zZm9ybWF0aW9uIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIuXG4gICAgICogT3RoZXJ3aXNlLCBpdCB3aWxsIHVzZSB0aGUgYHRvcGAgYW5kIGBsZWZ0YCBwcm9wZXJ0aWVzXG4gICAgICovXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiB0cnVlLFxuICAgIC8qKlxuICAgICAqIEBwcm9wIHtzdHJpbmd9IFt4PSdib3R0b20nXVxuICAgICAqIFdoZXJlIHRvIGFuY2hvciB0aGUgWCBheGlzIChgYm90dG9tYCBvciBgdG9wYCkuIEFLQSBYIG9mZnNldCBvcmlnaW4uXG4gICAgICogQ2hhbmdlIHRoaXMgaWYgeW91ciBwb3BwZXIgc2hvdWxkIGdyb3cgaW4gYSBkaXJlY3Rpb24gZGlmZmVyZW50IGZyb20gYGJvdHRvbWBcbiAgICAgKi9cbiAgICB4OiAnYm90dG9tJyxcbiAgICAvKipcbiAgICAgKiBAcHJvcCB7c3RyaW5nfSBbeD0nbGVmdCddXG4gICAgICogV2hlcmUgdG8gYW5jaG9yIHRoZSBZIGF4aXMgKGBsZWZ0YCBvciBgcmlnaHRgKS4gQUtBIFkgb2Zmc2V0IG9yaWdpbi5cbiAgICAgKiBDaGFuZ2UgdGhpcyBpZiB5b3VyIHBvcHBlciBzaG91bGQgZ3JvdyBpbiBhIGRpcmVjdGlvbiBkaWZmZXJlbnQgZnJvbSBgcmlnaHRgXG4gICAgICovXG4gICAgeTogJ3JpZ2h0J1xuICB9LFxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIHRoZSBjb21wdXRlZCBzdHlsZXMgdG8gdGhlIHBvcHBlciBlbGVtZW50LlxuICAgKlxuICAgKiBBbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIGFyZSBsaW1pdGVkIHRvIHRoaXMgbW9kaWZpZXIuIFRoaXMgaXMgdXNlZnVsIGluIGNhc2VcbiAgICogeW91IHdhbnQgdG8gaW50ZWdyYXRlIFBvcHBlci5qcyBpbnNpZGUgYSBmcmFtZXdvcmsgb3IgdmlldyBsaWJyYXJ5IGFuZCB5b3VcbiAgICogd2FudCB0byBkZWxlZ2F0ZSBhbGwgdGhlIERPTSBtYW5pcHVsYXRpb25zIHRvIGl0LlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgeW91IGRpc2FibGUgdGhpcyBtb2RpZmllciwgeW91IG11c3QgbWFrZSBzdXJlIHRoZSBwb3BwZXIgZWxlbWVudFxuICAgKiBoYXMgaXRzIHBvc2l0aW9uIHNldCB0byBgYWJzb2x1dGVgIGJlZm9yZSBQb3BwZXIuanMgY2FuIGRvIGl0cyB3b3JrIVxuICAgKlxuICAgKiBKdXN0IGRpc2FibGUgdGhpcyBtb2RpZmllciBhbmQgZGVmaW5lIHlvdXIgb3duIHRvIGFjaGlldmUgdGhlIGRlc2lyZWQgZWZmZWN0LlxuICAgKlxuICAgKiBAbWVtYmVyb2YgbW9kaWZpZXJzXG4gICAqIEBpbm5lclxuICAgKi9cbiAgYXBwbHlTdHlsZToge1xuICAgIC8qKiBAcHJvcCB7bnVtYmVyfSBvcmRlcj05MDAgLSBJbmRleCB1c2VkIHRvIGRlZmluZSB0aGUgb3JkZXIgb2YgZXhlY3V0aW9uICovXG4gICAgb3JkZXI6IDkwMCxcbiAgICAvKiogQHByb3Age0Jvb2xlYW59IGVuYWJsZWQ9dHJ1ZSAtIFdoZXRoZXIgdGhlIG1vZGlmaWVyIGlzIGVuYWJsZWQgb3Igbm90ICovXG4gICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAvKiogQHByb3Age01vZGlmaWVyRm59ICovXG4gICAgZm46IGFwcGx5U3R5bGUsXG4gICAgLyoqIEBwcm9wIHtGdW5jdGlvbn0gKi9cbiAgICBvbkxvYWQ6IGFwcGx5U3R5bGVPbkxvYWQsXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAxLjEwLjAsIHRoZSBwcm9wZXJ0eSBtb3ZlZCB0byBgY29tcHV0ZVN0eWxlYCBtb2RpZmllclxuICAgICAqIEBwcm9wIHtCb29sZWFufSBncHVBY2NlbGVyYXRpb249dHJ1ZVxuICAgICAqIElmIHRydWUsIGl0IHVzZXMgdGhlIENTUyAzRCB0cmFuc2Zvcm1hdGlvbiB0byBwb3NpdGlvbiB0aGUgcG9wcGVyLlxuICAgICAqIE90aGVyd2lzZSwgaXQgd2lsbCB1c2UgdGhlIGB0b3BgIGFuZCBgbGVmdGAgcHJvcGVydGllc1xuICAgICAqL1xuICAgIGdwdUFjY2VsZXJhdGlvbjogdW5kZWZpbmVkXG4gIH1cbn07XG5cbi8qKlxuICogVGhlIGBkYXRhT2JqZWN0YCBpcyBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGluZm9ybWF0aW9uIHVzZWQgYnkgUG9wcGVyLmpzLlxuICogVGhpcyBvYmplY3QgaXMgcGFzc2VkIHRvIG1vZGlmaWVycyBhbmQgdG8gdGhlIGBvbkNyZWF0ZWAgYW5kIGBvblVwZGF0ZWAgY2FsbGJhY2tzLlxuICogQG5hbWUgZGF0YU9iamVjdFxuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEuaW5zdGFuY2UgVGhlIFBvcHBlci5qcyBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEucGxhY2VtZW50IFBsYWNlbWVudCBhcHBsaWVkIHRvIHBvcHBlclxuICogQHByb3BlcnR5IHtTdHJpbmd9IGRhdGEub3JpZ2luYWxQbGFjZW1lbnQgUGxhY2VtZW50IG9yaWdpbmFsbHkgZGVmaW5lZCBvbiBpbml0XG4gKiBAcHJvcGVydHkge0Jvb2xlYW59IGRhdGEuZmxpcHBlZCBUcnVlIGlmIHBvcHBlciBoYXMgYmVlbiBmbGlwcGVkIGJ5IGZsaXAgbW9kaWZpZXJcbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gZGF0YS5oaWRlIFRydWUgaWYgdGhlIHJlZmVyZW5jZSBlbGVtZW50IGlzIG91dCBvZiBib3VuZGFyaWVzLCB1c2VmdWwgdG8ga25vdyB3aGVuIHRvIGhpZGUgdGhlIHBvcHBlclxuICogQHByb3BlcnR5IHtIVE1MRWxlbWVudH0gZGF0YS5hcnJvd0VsZW1lbnQgTm9kZSB1c2VkIGFzIGFycm93IGJ5IGFycm93IG1vZGlmaWVyXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5zdHlsZXMgQW55IENTUyBwcm9wZXJ0eSBkZWZpbmVkIGhlcmUgd2lsbCBiZSBhcHBsaWVkIHRvIHRoZSBwb3BwZXIuIEl0IGV4cGVjdHMgdGhlIEphdmFTY3JpcHQgbm9tZW5jbGF0dXJlIChlZy4gYG1hcmdpbkJvdHRvbWApXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5hcnJvd1N0eWxlcyBBbnkgQ1NTIHByb3BlcnR5IGRlZmluZWQgaGVyZSB3aWxsIGJlIGFwcGxpZWQgdG8gdGhlIHBvcHBlciBhcnJvdy4gSXQgZXhwZWN0cyB0aGUgSmF2YVNjcmlwdCBub21lbmNsYXR1cmUgKGVnLiBgbWFyZ2luQm90dG9tYClcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLmJvdW5kYXJpZXMgT2Zmc2V0cyBvZiB0aGUgcG9wcGVyIGJvdW5kYXJpZXNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMgVGhlIG1lYXN1cmVtZW50cyBvZiBwb3BwZXIsIHJlZmVyZW5jZSBhbmQgYXJyb3cgZWxlbWVudHNcbiAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBkYXRhLm9mZnNldHMucG9wcGVyIGB0b3BgLCBgbGVmdGAsIGB3aWR0aGAsIGBoZWlnaHRgIHZhbHVlc1xuICogQHByb3BlcnR5IHtPYmplY3R9IGRhdGEub2Zmc2V0cy5yZWZlcmVuY2UgYHRvcGAsIGBsZWZ0YCwgYHdpZHRoYCwgYGhlaWdodGAgdmFsdWVzXG4gKiBAcHJvcGVydHkge09iamVjdH0gZGF0YS5vZmZzZXRzLmFycm93XSBgdG9wYCBhbmQgYGxlZnRgIG9mZnNldHMsIG9ubHkgb25lIG9mIHRoZW0gd2lsbCBiZSBkaWZmZXJlbnQgZnJvbSAwXG4gKi9cblxuLyoqXG4gKiBEZWZhdWx0IG9wdGlvbnMgcHJvdmlkZWQgdG8gUG9wcGVyLmpzIGNvbnN0cnVjdG9yLjxiciAvPlxuICogVGhlc2UgY2FuIGJlIG92ZXJyaWRkZW4gdXNpbmcgdGhlIGBvcHRpb25zYCBhcmd1bWVudCBvZiBQb3BwZXIuanMuPGJyIC8+XG4gKiBUbyBvdmVycmlkZSBhbiBvcHRpb24sIHNpbXBseSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBzYW1lXG4gKiBzdHJ1Y3R1cmUgb2YgdGhlIGBvcHRpb25zYCBvYmplY3QsIGFzIHRoZSAzcmQgYXJndW1lbnQuIEZvciBleGFtcGxlOlxuICogYGBgXG4gKiBuZXcgUG9wcGVyKHJlZiwgcG9wLCB7XG4gKiAgIG1vZGlmaWVyczoge1xuICogICAgIHByZXZlbnRPdmVyZmxvdzogeyBlbmFibGVkOiBmYWxzZSB9XG4gKiAgIH1cbiAqIH0pXG4gKiBgYGBcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyb2YgUG9wcGVyXG4gKi9cbnZhciBEZWZhdWx0cyA9IHtcbiAgLyoqXG4gICAqIFBvcHBlcidzIHBsYWNlbWVudC5cbiAgICogQHByb3Age1BvcHBlci5wbGFjZW1lbnRzfSBwbGFjZW1lbnQ9J2JvdHRvbSdcbiAgICovXG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG5cbiAgLyoqXG4gICAqIFNldCB0aGlzIHRvIHRydWUgaWYgeW91IHdhbnQgcG9wcGVyIHRvIHBvc2l0aW9uIGl0IHNlbGYgaW4gJ2ZpeGVkJyBtb2RlXG4gICAqIEBwcm9wIHtCb29sZWFufSBwb3NpdGlvbkZpeGVkPWZhbHNlXG4gICAqL1xuICBwb3NpdGlvbkZpeGVkOiBmYWxzZSxcblxuICAvKipcbiAgICogV2hldGhlciBldmVudHMgKHJlc2l6ZSwgc2Nyb2xsKSBhcmUgaW5pdGlhbGx5IGVuYWJsZWQuXG4gICAqIEBwcm9wIHtCb29sZWFufSBldmVudHNFbmFibGVkPXRydWVcbiAgICovXG4gIGV2ZW50c0VuYWJsZWQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIFNldCB0byB0cnVlIGlmIHlvdSB3YW50IHRvIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIHRoZSBwb3BwZXIgd2hlblxuICAgKiB5b3UgY2FsbCB0aGUgYGRlc3Ryb3lgIG1ldGhvZC5cbiAgICogQHByb3Age0Jvb2xlYW59IHJlbW92ZU9uRGVzdHJveT1mYWxzZVxuICAgKi9cbiAgcmVtb3ZlT25EZXN0cm95OiBmYWxzZSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdoZW4gdGhlIHBvcHBlciBpcyBjcmVhdGVkLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvbkNyZWF0ZX1cbiAgICovXG4gIG9uQ3JlYXRlOiBmdW5jdGlvbiBvbkNyZWF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBjYWxsZWQgd2hlbiB0aGUgcG9wcGVyIGlzIHVwZGF0ZWQuIFRoaXMgY2FsbGJhY2sgaXMgbm90IGNhbGxlZFxuICAgKiBvbiB0aGUgaW5pdGlhbGl6YXRpb24vY3JlYXRpb24gb2YgdGhlIHBvcHBlciwgYnV0IG9ubHkgb24gc3Vic2VxdWVudFxuICAgKiB1cGRhdGVzLjxiciAvPlxuICAgKiBCeSBkZWZhdWx0LCBpdCBpcyBzZXQgdG8gbm8tb3AuPGJyIC8+XG4gICAqIEFjY2VzcyBQb3BwZXIuanMgaW5zdGFuY2Ugd2l0aCBgZGF0YS5pbnN0YW5jZWAuXG4gICAqIEBwcm9wIHtvblVwZGF0ZX1cbiAgICovXG4gIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZSgpIHt9LFxuXG4gIC8qKlxuICAgKiBMaXN0IG9mIG1vZGlmaWVycyB1c2VkIHRvIG1vZGlmeSB0aGUgb2Zmc2V0cyBiZWZvcmUgdGhleSBhcmUgYXBwbGllZCB0byB0aGUgcG9wcGVyLlxuICAgKiBUaGV5IHByb3ZpZGUgbW9zdCBvZiB0aGUgZnVuY3Rpb25hbGl0aWVzIG9mIFBvcHBlci5qcy5cbiAgICogQHByb3Age21vZGlmaWVyc31cbiAgICovXG4gIG1vZGlmaWVyczogbW9kaWZpZXJzXG59O1xuXG4vKipcbiAqIEBjYWxsYmFjayBvbkNyZWF0ZVxuICogQHBhcmFtIHtkYXRhT2JqZWN0fSBkYXRhXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgb25VcGRhdGVcbiAqIEBwYXJhbSB7ZGF0YU9iamVjdH0gZGF0YVxuICovXG5cbi8vIFV0aWxzXG4vLyBNZXRob2RzXG52YXIgUG9wcGVyID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBQb3BwZXIuanMgaW5zdGFuY2UuXG4gICAqIEBjbGFzcyBQb3BwZXJcbiAgICogQHBhcmFtIHtFbGVtZW50fHJlZmVyZW5jZU9iamVjdH0gcmVmZXJlbmNlIC0gVGhlIHJlZmVyZW5jZSBlbGVtZW50IHVzZWQgdG8gcG9zaXRpb24gdGhlIHBvcHBlclxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IHBvcHBlciAtIFRoZSBIVE1MIC8gWE1MIGVsZW1lbnQgdXNlZCBhcyB0aGUgcG9wcGVyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gWW91ciBjdXN0b20gb3B0aW9ucyB0byBvdmVycmlkZSB0aGUgb25lcyBkZWZpbmVkIGluIFtEZWZhdWx0c10oI2RlZmF1bHRzKVxuICAgKiBAcmV0dXJuIHtPYmplY3R9IGluc3RhbmNlIC0gVGhlIGdlbmVyYXRlZCBQb3BwZXIuanMgaW5zdGFuY2VcbiAgICovXG4gIGZ1bmN0aW9uIFBvcHBlcihyZWZlcmVuY2UsIHBvcHBlcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9wcGVyKTtcblxuICAgIHRoaXMuc2NoZWR1bGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKF90aGlzLnVwZGF0ZSk7XG4gICAgfTtcblxuICAgIC8vIG1ha2UgdXBkYXRlKCkgZGVib3VuY2VkLCBzbyB0aGF0IGl0IG9ubHkgcnVucyBhdCBtb3N0IG9uY2UtcGVyLXRpY2tcbiAgICB0aGlzLnVwZGF0ZSA9IGRlYm91bmNlKHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXG4gICAgLy8gd2l0aCB7fSB3ZSBjcmVhdGUgYSBuZXcgb2JqZWN0IHdpdGggdGhlIG9wdGlvbnMgaW5zaWRlIGl0XG4gICAgdGhpcy5vcHRpb25zID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAvLyBpbml0IHN0YXRlXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGlzRGVzdHJveWVkOiBmYWxzZSxcbiAgICAgIGlzQ3JlYXRlZDogZmFsc2UsXG4gICAgICBzY3JvbGxQYXJlbnRzOiBbXVxuICAgIH07XG5cbiAgICAvLyBnZXQgcmVmZXJlbmNlIGFuZCBwb3BwZXIgZWxlbWVudHMgKGFsbG93IGpRdWVyeSB3cmFwcGVycylcbiAgICB0aGlzLnJlZmVyZW5jZSA9IHJlZmVyZW5jZSAmJiByZWZlcmVuY2UuanF1ZXJ5ID8gcmVmZXJlbmNlWzBdIDogcmVmZXJlbmNlO1xuICAgIHRoaXMucG9wcGVyID0gcG9wcGVyICYmIHBvcHBlci5qcXVlcnkgPyBwb3BwZXJbMF0gOiBwb3BwZXI7XG5cbiAgICAvLyBEZWVwIG1lcmdlIG1vZGlmaWVycyBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zLm1vZGlmaWVycyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKF9leHRlbmRzKHt9LCBQb3BwZXIuRGVmYXVsdHMubW9kaWZpZXJzLCBvcHRpb25zLm1vZGlmaWVycykpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMubW9kaWZpZXJzW25hbWVdID0gX2V4dGVuZHMoe30sIFBvcHBlci5EZWZhdWx0cy5tb2RpZmllcnNbbmFtZV0gfHwge30sIG9wdGlvbnMubW9kaWZpZXJzID8gb3B0aW9ucy5tb2RpZmllcnNbbmFtZV0gOiB7fSk7XG4gICAgfSk7XG5cbiAgICAvLyBSZWZhY3RvcmluZyBtb2RpZmllcnMnIGxpc3QgKE9iamVjdCA9PiBBcnJheSlcbiAgICB0aGlzLm1vZGlmaWVycyA9IE9iamVjdC5rZXlzKHRoaXMub3B0aW9ucy5tb2RpZmllcnMpLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgICAgbmFtZTogbmFtZVxuICAgICAgfSwgX3RoaXMub3B0aW9ucy5tb2RpZmllcnNbbmFtZV0pO1xuICAgIH0pXG4gICAgLy8gc29ydCB0aGUgbW9kaWZpZXJzIGJ5IG9yZGVyXG4gICAgLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBhLm9yZGVyIC0gYi5vcmRlcjtcbiAgICB9KTtcblxuICAgIC8vIG1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIGV4ZWN1dGUgYXJiaXRyYXJ5IGNvZGUgd2hlbiBQb3BwZXIuanMgZ2V0IGluaXRlZFxuICAgIC8vIHN1Y2ggY29kZSBpcyBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBvZiBpdHMgbW9kaWZpZXJcbiAgICAvLyB0aGV5IGNvdWxkIGFkZCBuZXcgcHJvcGVydGllcyB0byB0aGVpciBvcHRpb25zIGNvbmZpZ3VyYXRpb25cbiAgICAvLyBCRSBBV0FSRTogZG9uJ3QgYWRkIG9wdGlvbnMgdG8gYG9wdGlvbnMubW9kaWZpZXJzLm5hbWVgIGJ1dCB0byBgbW9kaWZpZXJPcHRpb25zYCFcbiAgICB0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllck9wdGlvbnMpIHtcbiAgICAgIGlmIChtb2RpZmllck9wdGlvbnMuZW5hYmxlZCAmJiBpc0Z1bmN0aW9uKG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQpKSB7XG4gICAgICAgIG1vZGlmaWVyT3B0aW9ucy5vbkxvYWQoX3RoaXMucmVmZXJlbmNlLCBfdGhpcy5wb3BwZXIsIF90aGlzLm9wdGlvbnMsIG1vZGlmaWVyT3B0aW9ucywgX3RoaXMuc3RhdGUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZmlyZSB0aGUgZmlyc3QgdXBkYXRlIHRvIHBvc2l0aW9uIHRoZSBwb3BwZXIgaW4gdGhlIHJpZ2h0IHBsYWNlXG4gICAgdGhpcy51cGRhdGUoKTtcblxuICAgIHZhciBldmVudHNFbmFibGVkID0gdGhpcy5vcHRpb25zLmV2ZW50c0VuYWJsZWQ7XG4gICAgaWYgKGV2ZW50c0VuYWJsZWQpIHtcbiAgICAgIC8vIHNldHVwIGV2ZW50IGxpc3RlbmVycywgdGhleSB3aWxsIHRha2UgY2FyZSBvZiB1cGRhdGUgdGhlIHBvc2l0aW9uIGluIHNwZWNpZmljIHNpdHVhdGlvbnNcbiAgICAgIHRoaXMuZW5hYmxlRXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQgPSBldmVudHNFbmFibGVkO1xuICB9XG5cbiAgLy8gV2UgY2FuJ3QgdXNlIGNsYXNzIHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGRvbid0IGdldCBsaXN0ZWQgaW4gdGhlXG4gIC8vIGNsYXNzIHByb3RvdHlwZSBhbmQgYnJlYWsgc3R1ZmYgbGlrZSBTaW5vbiBzdHVic1xuXG5cbiAgY3JlYXRlQ2xhc3MoUG9wcGVyLCBbe1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZSQkMSgpIHtcbiAgICAgIHJldHVybiB1cGRhdGUuY2FsbCh0aGlzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZXN0cm95JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSQkMSgpIHtcbiAgICAgIHJldHVybiBkZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbmFibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBlbmFibGVFdmVudExpc3RlbmVycy5jYWxsKHRoaXMpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2Rpc2FibGVFdmVudExpc3RlbmVycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2FibGVFdmVudExpc3RlbmVycyQkMSgpIHtcbiAgICAgIHJldHVybiBkaXNhYmxlRXZlbnRMaXN0ZW5lcnMuY2FsbCh0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTY2hlZHVsZXMgYW4gdXBkYXRlLiBJdCB3aWxsIHJ1biBvbiB0aGUgbmV4dCBVSSB1cGRhdGUgYXZhaWxhYmxlLlxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcbiAgICAgKiBAbWVtYmVyb2YgUG9wcGVyXG4gICAgICovXG5cblxuICAgIC8qKlxuICAgICAqIENvbGxlY3Rpb24gb2YgdXRpbGl0aWVzIHVzZWZ1bCB3aGVuIHdyaXRpbmcgY3VzdG9tIG1vZGlmaWVycy5cbiAgICAgKiBTdGFydGluZyBmcm9tIHZlcnNpb24gMS43LCB0aGlzIG1ldGhvZCBpcyBhdmFpbGFibGUgb25seSBpZiB5b3VcbiAgICAgKiBpbmNsdWRlIGBwb3BwZXItdXRpbHMuanNgIGJlZm9yZSBgcG9wcGVyLmpzYC5cbiAgICAgKlxuICAgICAqICoqREVQUkVDQVRJT04qKjogVGhpcyB3YXkgdG8gYWNjZXNzIFBvcHBlclV0aWxzIGlzIGRlcHJlY2F0ZWRcbiAgICAgKiBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHYyISBVc2UgdGhlIFBvcHBlclV0aWxzIG1vZHVsZSBkaXJlY3RseSBpbnN0ZWFkLlxuICAgICAqIER1ZSB0byB0aGUgaGlnaCBpbnN0YWJpbGl0eSBvZiB0aGUgbWV0aG9kcyBjb250YWluZWQgaW4gVXRpbHMsIHdlIGNhbid0XG4gICAgICogZ3VhcmFudGVlIHRoZW0gdG8gZm9sbG93IHNlbXZlci4gVXNlIHRoZW0gYXQgeW91ciBvd24gcmlzayFcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMS44XG4gICAgICogQG1lbWJlciBVdGlsc1xuICAgICAqIEBtZW1iZXJvZiBQb3BwZXJcbiAgICAgKi9cblxuICB9XSk7XG4gIHJldHVybiBQb3BwZXI7XG59KCk7XG5cbi8qKlxuICogVGhlIGByZWZlcmVuY2VPYmplY3RgIGlzIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGFuIGludGVyZmFjZSBjb21wYXRpYmxlIHdpdGggUG9wcGVyLmpzXG4gKiBhbmQgbGV0cyB5b3UgdXNlIGl0IGFzIHJlcGxhY2VtZW50IG9mIGEgcmVhbCBET00gbm9kZS48YnIgLz5cbiAqIFlvdSBjYW4gdXNlIHRoaXMgbWV0aG9kIHRvIHBvc2l0aW9uIGEgcG9wcGVyIHJlbGF0aXZlbHkgdG8gYSBzZXQgb2YgY29vcmRpbmF0ZXNcbiAqIGluIGNhc2UgeW91IGRvbid0IGhhdmUgYSBET00gbm9kZSB0byB1c2UgYXMgcmVmZXJlbmNlLlxuICpcbiAqIGBgYFxuICogbmV3IFBvcHBlcihyZWZlcmVuY2VPYmplY3QsIHBvcHBlck5vZGUpO1xuICogYGBgXG4gKlxuICogTkI6IFRoaXMgZmVhdHVyZSBpc24ndCBzdXBwb3J0ZWQgaW4gSW50ZXJuZXQgRXhwbG9yZXIgMTAuXG4gKiBAbmFtZSByZWZlcmVuY2VPYmplY3RcbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGRhdGEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG4gKiBBIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhIHNldCBvZiBjb29yZGluYXRlcyBjb21wYXRpYmxlIHdpdGggdGhlIG5hdGl2ZSBgZ2V0Qm91bmRpbmdDbGllbnRSZWN0YCBtZXRob2QuXG4gKiBAcHJvcGVydHkge251bWJlcn0gZGF0YS5jbGllbnRXaWR0aFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSB3aWR0aCBvZiB0aGUgdmlydHVhbCByZWZlcmVuY2UgZWxlbWVudC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkYXRhLmNsaWVudEhlaWdodFxuICogQW4gRVM2IGdldHRlciB0aGF0IHdpbGwgcmV0dXJuIHRoZSBoZWlnaHQgb2YgdGhlIHZpcnR1YWwgcmVmZXJlbmNlIGVsZW1lbnQuXG4gKi9cblxuXG5Qb3BwZXIuVXRpbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpLlBvcHBlclV0aWxzO1xuUG9wcGVyLnBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuUG9wcGVyLkRlZmF1bHRzID0gRGVmYXVsdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFBvcHBlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBvcHBlci5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBKU1ppcCwgeyBKU1ppcE9iamVjdCB9IGZyb20gJ2pzemlwJztcbmltcG9ydCBDb250ZW50WG1sIGZyb20gJy4vQ29udGVudFhtbCc7XG5cbmNsYXNzIE1haW4ge1xuICAgIHByaXZhdGUgJHJlc3VsdDogSlF1ZXJ5O1xuICAgIHByaXZhdGUgQ1g6IENvbnRlbnRYbWw7XG4gICAgcHJpdmF0ZSBkYXRhOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgY29uc3QgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuJHJlc3VsdCA9ICQoJyNqc0ZpbGVMb2FkaW5nJyk7XG4gICAgICAgIHRoaXMuQ1ggPSBuZXcgQ29udGVudFhtbCh7XG4gICAgICAgICAgICBnZXRfZGF0YTogZnVuY3Rpb24gKGtleTogc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmRhdGFba2V5XTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoJyNmaWxlJykub24oJ2NoYW5nZScsIGZ1bmN0aW9uIChlOiBhbnkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGVzID0gZS50YXJnZXQuZmlsZXM7XG4gICAgICAgICAgICBfdGhpcy4kcmVzdWx0Lmh0bWwoJycpO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZUZpbGUoZmlsZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYW5kbGVGaWxlKGZpbGU6IGFueSkge1xuICAgICAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgY29uc3QgJHRpdGxlID0gJCgnPGg0PicsIHtcbiAgICAgICAgICAgIHRleHQ6ICfQktGL0LHRgNCw0L0g0YTQsNC50Ls6ICcgKyBmaWxlLm5hbWUsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLiRyZXN1bHQuYXBwZW5kKCR0aXRsZSk7XG5cbiAgICAgICAgY29uc3QgZGF0ZUJlZm9yZTogYW55ID0gbmV3IERhdGUoKTtcbiAgICAgICAgSlNaaXAubG9hZEFzeW5jKGZpbGUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAxKSByZWFkIHRoZSBCbG9iXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoemlwOiBKU1ppcCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVBZnRlcjogYW55ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAkdGl0bGUuYXBwZW5kKCQoJzxzcGFuPicsIHtcbiAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogJ3NtYWxsJyxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogJyAobG9hZGVkIGluICcgKyAoZGF0ZUFmdGVyIC0gZGF0ZUJlZm9yZSkgKyAnbXMpJ1xuICAgICAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgICAgIHppcC5mb3JFYWNoKGZ1bmN0aW9uIChyZWxhdGl2ZVBhdGg6IHN0cmluZywgemlwRW50cnk6IEpTWmlwT2JqZWN0KSB7ICAvLyAyKSBwcmludCBlbnRyaWVzXG4gICAgICAgICAgICAgICAgICAgIGlmICh6aXBFbnRyeS5uYW1lLnN0YXJ0c1dpdGgoJ0ltYWdlcy8nKSB8fCB6aXBFbnRyeS5uYW1lLnN0YXJ0c1dpdGgoJ0F1ZGlvLycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB6aXBFbnRyeS5hc3luYygnYmFzZTY0JykudGhlbigodHh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGF0YVt6aXBFbnRyeS5uYW1lXSA9IHR4dDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCdjb250ZW50LnhtbCcgPT09IHppcEVudHJ5Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHppcEVudHJ5LmFzeW5jKCd0ZXh0JykudGhlbigodHh0OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5DWC5wYXJzZSh0eHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuJHJlc3VsdC5hcHBlbmQoJCgnPGRpdj4nLCB7XG4gICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICdhbGVydCBhbGVydC1kYW5nZXInLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnRXJyb3IgcmVhZGluZyAnICsgZmlsZS5uYW1lICsgJzogJyArIGUubWVzc2FnZVxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFpbjtcbiIsIi8qIVxuXG5KU1ppcCB2My41LjAgLSBBIEphdmFTY3JpcHQgY2xhc3MgZm9yIGdlbmVyYXRpbmcgYW5kIHJlYWRpbmcgemlwIGZpbGVzXG48aHR0cDovL3N0dWFydGsuY29tL2pzemlwPlxuXG4oYykgMjAwOS0yMDE2IFN0dWFydCBLbmlnaHRsZXkgPHN0dWFydCBbYXRdIHN0dWFydGsuY29tPlxuRHVhbCBsaWNlbmNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2Ugb3IgR1BMdjMuIFNlZSBodHRwczovL3Jhdy5naXRodWIuY29tL1N0dWsvanN6aXAvbWFzdGVyL0xJQ0VOU0UubWFya2Rvd24uXG5cbkpTWmlwIHVzZXMgdGhlIGxpYnJhcnkgcGFrbyByZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgOlxuaHR0cHM6Ly9naXRodWIuY29tL25vZGVjYS9wYWtvL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiovXG5cbiFmdW5jdGlvbih0KXtpZihcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZSltb2R1bGUuZXhwb3J0cz10KCk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQpZGVmaW5lKFtdLHQpO2Vsc2V7KFwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/d2luZG93OlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWw/Z2xvYmFsOlwidW5kZWZpbmVkXCIhPXR5cGVvZiBzZWxmP3NlbGY6dGhpcykuSlNaaXA9dCgpfX0oZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24gcyhhLG8saCl7ZnVuY3Rpb24gdShyLHQpe2lmKCFvW3JdKXtpZighYVtyXSl7dmFyIGU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZTtpZighdCYmZSlyZXR1cm4gZShyLCEwKTtpZihsKXJldHVybiBsKHIsITApO3ZhciBpPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrcitcIidcIik7dGhyb3cgaS5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGl9dmFyIG49b1tyXT17ZXhwb3J0czp7fX07YVtyXVswXS5jYWxsKG4uZXhwb3J0cyxmdW5jdGlvbih0KXt2YXIgZT1hW3JdWzFdW3RdO3JldHVybiB1KGV8fHQpfSxuLG4uZXhwb3J0cyxzLGEsbyxoKX1yZXR1cm4gb1tyXS5leHBvcnRzfWZvcih2YXIgbD1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlLHQ9MDt0PGgubGVuZ3RoO3QrKyl1KGhbdF0pO3JldHVybiB1fSh7MTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBjPXQoXCIuL3V0aWxzXCIpLGQ9dChcIi4vc3VwcG9ydFwiKSxwPVwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz1cIjtyLmVuY29kZT1mdW5jdGlvbih0KXtmb3IodmFyIGUscixpLG4scyxhLG8saD1bXSx1PTAsbD10Lmxlbmd0aCxmPWwsZD1cInN0cmluZ1wiIT09Yy5nZXRUeXBlT2YodCk7dTx0Lmxlbmd0aDspZj1sLXUsaT1kPyhlPXRbdSsrXSxyPXU8bD90W3UrK106MCx1PGw/dFt1KytdOjApOihlPXQuY2hhckNvZGVBdCh1KyspLHI9dTxsP3QuY2hhckNvZGVBdCh1KyspOjAsdTxsP3QuY2hhckNvZGVBdCh1KyspOjApLG49ZT4+MixzPSgzJmUpPDw0fHI+PjQsYT0xPGY/KDE1JnIpPDwyfGk+PjY6NjQsbz0yPGY/NjMmaTo2NCxoLnB1c2gocC5jaGFyQXQobikrcC5jaGFyQXQocykrcC5jaGFyQXQoYSkrcC5jaGFyQXQobykpO3JldHVybiBoLmpvaW4oXCJcIil9LHIuZGVjb2RlPWZ1bmN0aW9uKHQpe3ZhciBlLHIsaSxuLHMsYSxvPTAsaD0wLHU9XCJkYXRhOlwiO2lmKHQuc3Vic3RyKDAsdS5sZW5ndGgpPT09dSl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBpbnB1dCwgaXQgbG9va3MgbGlrZSBhIGRhdGEgdXJsLlwiKTt2YXIgbCxmPTMqKHQ9dC5yZXBsYWNlKC9bXkEtWmEtejAtOVxcK1xcL1xcPV0vZyxcIlwiKSkubGVuZ3RoLzQ7aWYodC5jaGFyQXQodC5sZW5ndGgtMSk9PT1wLmNoYXJBdCg2NCkmJmYtLSx0LmNoYXJBdCh0Lmxlbmd0aC0yKT09PXAuY2hhckF0KDY0KSYmZi0tLGYlMSE9MCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBpbnB1dCwgYmFkIGNvbnRlbnQgbGVuZ3RoLlwiKTtmb3IobD1kLnVpbnQ4YXJyYXk/bmV3IFVpbnQ4QXJyYXkoMHxmKTpuZXcgQXJyYXkoMHxmKTtvPHQubGVuZ3RoOyllPXAuaW5kZXhPZih0LmNoYXJBdChvKyspKTw8Mnwobj1wLmluZGV4T2YodC5jaGFyQXQobysrKSkpPj40LHI9KDE1Jm4pPDw0fChzPXAuaW5kZXhPZih0LmNoYXJBdChvKyspKSk+PjIsaT0oMyZzKTw8NnwoYT1wLmluZGV4T2YodC5jaGFyQXQobysrKSkpLGxbaCsrXT1lLDY0IT09cyYmKGxbaCsrXT1yKSw2NCE9PWEmJihsW2grK109aSk7cmV0dXJuIGx9fSx7XCIuL3N1cHBvcnRcIjozMCxcIi4vdXRpbHNcIjozMn1dLDI6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi9leHRlcm5hbFwiKSxuPXQoXCIuL3N0cmVhbS9EYXRhV29ya2VyXCIpLHM9dChcIi4vc3RyZWFtL0RhdGFMZW5ndGhQcm9iZVwiKSxhPXQoXCIuL3N0cmVhbS9DcmMzMlByb2JlXCIpO3M9dChcIi4vc3RyZWFtL0RhdGFMZW5ndGhQcm9iZVwiKTtmdW5jdGlvbiBvKHQsZSxyLGksbil7dGhpcy5jb21wcmVzc2VkU2l6ZT10LHRoaXMudW5jb21wcmVzc2VkU2l6ZT1lLHRoaXMuY3JjMzI9cix0aGlzLmNvbXByZXNzaW9uPWksdGhpcy5jb21wcmVzc2VkQ29udGVudD1ufW8ucHJvdG90eXBlPXtnZXRDb250ZW50V29ya2VyOmZ1bmN0aW9uKCl7dmFyIHQ9bmV3IG4oaS5Qcm9taXNlLnJlc29sdmUodGhpcy5jb21wcmVzc2VkQ29udGVudCkpLnBpcGUodGhpcy5jb21wcmVzc2lvbi51bmNvbXByZXNzV29ya2VyKCkpLnBpcGUobmV3IHMoXCJkYXRhX2xlbmd0aFwiKSksZT10aGlzO3JldHVybiB0Lm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtpZih0aGlzLnN0cmVhbUluZm8uZGF0YV9sZW5ndGghPT1lLnVuY29tcHJlc3NlZFNpemUpdGhyb3cgbmV3IEVycm9yKFwiQnVnIDogdW5jb21wcmVzc2VkIGRhdGEgc2l6ZSBtaXNtYXRjaFwiKX0pLHR9LGdldENvbXByZXNzZWRXb3JrZXI6ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG4oaS5Qcm9taXNlLnJlc29sdmUodGhpcy5jb21wcmVzc2VkQ29udGVudCkpLndpdGhTdHJlYW1JbmZvKFwiY29tcHJlc3NlZFNpemVcIix0aGlzLmNvbXByZXNzZWRTaXplKS53aXRoU3RyZWFtSW5mbyhcInVuY29tcHJlc3NlZFNpemVcIix0aGlzLnVuY29tcHJlc3NlZFNpemUpLndpdGhTdHJlYW1JbmZvKFwiY3JjMzJcIix0aGlzLmNyYzMyKS53aXRoU3RyZWFtSW5mbyhcImNvbXByZXNzaW9uXCIsdGhpcy5jb21wcmVzc2lvbil9fSxvLmNyZWF0ZVdvcmtlckZyb209ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0LnBpcGUobmV3IGEpLnBpcGUobmV3IHMoXCJ1bmNvbXByZXNzZWRTaXplXCIpKS5waXBlKGUuY29tcHJlc3NXb3JrZXIocikpLnBpcGUobmV3IHMoXCJjb21wcmVzc2VkU2l6ZVwiKSkud2l0aFN0cmVhbUluZm8oXCJjb21wcmVzc2lvblwiLGUpfSxlLmV4cG9ydHM9b30se1wiLi9leHRlcm5hbFwiOjYsXCIuL3N0cmVhbS9DcmMzMlByb2JlXCI6MjUsXCIuL3N0cmVhbS9EYXRhTGVuZ3RoUHJvYmVcIjoyNixcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIjoyN31dLDM6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKTtyLlNUT1JFPXttYWdpYzpcIlxcMFxcMFwiLGNvbXByZXNzV29ya2VyOmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgaShcIlNUT1JFIGNvbXByZXNzaW9uXCIpfSx1bmNvbXByZXNzV29ya2VyOmZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBpKFwiU1RPUkUgZGVjb21wcmVzc2lvblwiKX19LHIuREVGTEFURT10KFwiLi9mbGF0ZVwiKX0se1wiLi9mbGF0ZVwiOjcsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6Mjh9XSw0OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vdXRpbHNcIik7dmFyIG89ZnVuY3Rpb24oKXtmb3IodmFyIHQsZT1bXSxyPTA7cjwyNTY7cisrKXt0PXI7Zm9yKHZhciBpPTA7aTw4O2krKyl0PTEmdD8zOTg4MjkyMzg0XnQ+Pj4xOnQ+Pj4xO2Vbcl09dH1yZXR1cm4gZX0oKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwIT09dCYmdC5sZW5ndGg/XCJzdHJpbmdcIiE9PWkuZ2V0VHlwZU9mKHQpP2Z1bmN0aW9uKHQsZSxyLGkpe3ZhciBuPW8scz1pK3I7dF49LTE7Zm9yKHZhciBhPWk7YTxzO2ErKyl0PXQ+Pj44Xm5bMjU1Jih0XmVbYV0pXTtyZXR1cm4tMV50fSgwfGUsdCx0Lmxlbmd0aCwwKTpmdW5jdGlvbih0LGUscixpKXt2YXIgbj1vLHM9aStyO3RePS0xO2Zvcih2YXIgYT1pO2E8czthKyspdD10Pj4+OF5uWzI1NSYodF5lLmNoYXJDb2RlQXQoYSkpXTtyZXR1cm4tMV50fSgwfGUsdCx0Lmxlbmd0aCwwKTowfX0se1wiLi91dGlsc1wiOjMyfV0sNTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3IuYmFzZTY0PSExLHIuYmluYXJ5PSExLHIuZGlyPSExLHIuY3JlYXRlRm9sZGVycz0hMCxyLmRhdGU9bnVsbCxyLmNvbXByZXNzaW9uPW51bGwsci5jb21wcmVzc2lvbk9wdGlvbnM9bnVsbCxyLmNvbW1lbnQ9bnVsbCxyLnVuaXhQZXJtaXNzaW9ucz1udWxsLHIuZG9zUGVybWlzc2lvbnM9bnVsbH0se31dLDY6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1udWxsO2k9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFByb21pc2U/UHJvbWlzZTp0KFwibGllXCIpLGUuZXhwb3J0cz17UHJvbWlzZTppfX0se2xpZTozN31dLDc6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT1cInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDhBcnJheSYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQxNkFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDMyQXJyYXksbj10KFwicGFrb1wiKSxzPXQoXCIuL3V0aWxzXCIpLGE9dChcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIiksbz1pP1widWludDhhcnJheVwiOlwiYXJyYXlcIjtmdW5jdGlvbiBoKHQsZSl7YS5jYWxsKHRoaXMsXCJGbGF0ZVdvcmtlci9cIit0KSx0aGlzLl9wYWtvPW51bGwsdGhpcy5fcGFrb0FjdGlvbj10LHRoaXMuX3Bha29PcHRpb25zPWUsdGhpcy5tZXRhPXt9fXIubWFnaWM9XCJcXGJcXDBcIixzLmluaGVyaXRzKGgsYSksaC5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKHQpe3RoaXMubWV0YT10Lm1ldGEsbnVsbD09PXRoaXMuX3Bha28mJnRoaXMuX2NyZWF0ZVBha28oKSx0aGlzLl9wYWtvLnB1c2gocy50cmFuc2Zvcm1UbyhvLHQuZGF0YSksITEpfSxoLnByb3RvdHlwZS5mbHVzaD1mdW5jdGlvbigpe2EucHJvdG90eXBlLmZsdXNoLmNhbGwodGhpcyksbnVsbD09PXRoaXMuX3Bha28mJnRoaXMuX2NyZWF0ZVBha28oKSx0aGlzLl9wYWtvLnB1c2goW10sITApfSxoLnByb3RvdHlwZS5jbGVhblVwPWZ1bmN0aW9uKCl7YS5wcm90b3R5cGUuY2xlYW5VcC5jYWxsKHRoaXMpLHRoaXMuX3Bha289bnVsbH0saC5wcm90b3R5cGUuX2NyZWF0ZVBha289ZnVuY3Rpb24oKXt0aGlzLl9wYWtvPW5ldyBuW3RoaXMuX3Bha29BY3Rpb25dKHtyYXc6ITAsbGV2ZWw6dGhpcy5fcGFrb09wdGlvbnMubGV2ZWx8fC0xfSk7dmFyIGU9dGhpczt0aGlzLl9wYWtvLm9uRGF0YT1mdW5jdGlvbih0KXtlLnB1c2goe2RhdGE6dCxtZXRhOmUubWV0YX0pfX0sci5jb21wcmVzc1dvcmtlcj1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IGgoXCJEZWZsYXRlXCIsdCl9LHIudW5jb21wcmVzc1dvcmtlcj1mdW5jdGlvbigpe3JldHVybiBuZXcgaChcIkluZmxhdGVcIix7fSl9fSx7XCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3V0aWxzXCI6MzIscGFrbzozOH1dLDg6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBBKHQsZSl7dmFyIHIsaT1cIlwiO2ZvcihyPTA7cjxlO3IrKylpKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDI1NSZ0KSx0Pj4+PTg7cmV0dXJuIGl9ZnVuY3Rpb24gaSh0LGUscixpLG4scyl7dmFyIGEsbyxoPXQuZmlsZSx1PXQuY29tcHJlc3Npb24sbD1zIT09Ty51dGY4ZW5jb2RlLGY9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHMoaC5uYW1lKSksZD1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsTy51dGY4ZW5jb2RlKGgubmFtZSkpLGM9aC5jb21tZW50LHA9SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLHMoYykpLG09SS50cmFuc2Zvcm1UbyhcInN0cmluZ1wiLE8udXRmOGVuY29kZShjKSksXz1kLmxlbmd0aCE9PWgubmFtZS5sZW5ndGgsZz1tLmxlbmd0aCE9PWMubGVuZ3RoLGI9XCJcIix2PVwiXCIseT1cIlwiLHc9aC5kaXIsaz1oLmRhdGUseD17Y3JjMzI6MCxjb21wcmVzc2VkU2l6ZTowLHVuY29tcHJlc3NlZFNpemU6MH07ZSYmIXJ8fCh4LmNyYzMyPXQuY3JjMzIseC5jb21wcmVzc2VkU2l6ZT10LmNvbXByZXNzZWRTaXplLHgudW5jb21wcmVzc2VkU2l6ZT10LnVuY29tcHJlc3NlZFNpemUpO3ZhciBTPTA7ZSYmKFN8PTgpLGx8fCFfJiYhZ3x8KFN8PTIwNDgpO3ZhciB6PTAsQz0wO3cmJih6fD0xNiksXCJVTklYXCI9PT1uPyhDPTc5OCx6fD1mdW5jdGlvbih0LGUpe3ZhciByPXQ7cmV0dXJuIHR8fChyPWU/MTY4OTM6MzMyMDQpLCg2NTUzNSZyKTw8MTZ9KGgudW5peFBlcm1pc3Npb25zLHcpKTooQz0yMCx6fD1mdW5jdGlvbih0KXtyZXR1cm4gNjMmKHR8fDApfShoLmRvc1Blcm1pc3Npb25zKSksYT1rLmdldFVUQ0hvdXJzKCksYTw8PTYsYXw9ay5nZXRVVENNaW51dGVzKCksYTw8PTUsYXw9ay5nZXRVVENTZWNvbmRzKCkvMixvPWsuZ2V0VVRDRnVsbFllYXIoKS0xOTgwLG88PD00LG98PWsuZ2V0VVRDTW9udGgoKSsxLG88PD01LG98PWsuZ2V0VVRDRGF0ZSgpLF8mJih2PUEoMSwxKStBKEIoZiksNCkrZCxiKz1cInVwXCIrQSh2Lmxlbmd0aCwyKSt2KSxnJiYoeT1BKDEsMSkrQShCKHApLDQpK20sYis9XCJ1Y1wiK0EoeS5sZW5ndGgsMikreSk7dmFyIEU9XCJcIjtyZXR1cm4gRSs9XCJcXG5cXDBcIixFKz1BKFMsMiksRSs9dS5tYWdpYyxFKz1BKGEsMiksRSs9QShvLDIpLEUrPUEoeC5jcmMzMiw0KSxFKz1BKHguY29tcHJlc3NlZFNpemUsNCksRSs9QSh4LnVuY29tcHJlc3NlZFNpemUsNCksRSs9QShmLmxlbmd0aCwyKSxFKz1BKGIubGVuZ3RoLDIpLHtmaWxlUmVjb3JkOlIuTE9DQUxfRklMRV9IRUFERVIrRStmK2IsZGlyUmVjb3JkOlIuQ0VOVFJBTF9GSUxFX0hFQURFUitBKEMsMikrRStBKHAubGVuZ3RoLDIpK1wiXFwwXFwwXFwwXFwwXCIrQSh6LDQpK0EoaSw0KStmK2IrcH19dmFyIEk9dChcIi4uL3V0aWxzXCIpLG49dChcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLE89dChcIi4uL3V0ZjhcIiksQj10KFwiLi4vY3JjMzJcIiksUj10KFwiLi4vc2lnbmF0dXJlXCIpO2Z1bmN0aW9uIHModCxlLHIsaSl7bi5jYWxsKHRoaXMsXCJaaXBGaWxlV29ya2VyXCIpLHRoaXMuYnl0ZXNXcml0dGVuPTAsdGhpcy56aXBDb21tZW50PWUsdGhpcy56aXBQbGF0Zm9ybT1yLHRoaXMuZW5jb2RlRmlsZU5hbWU9aSx0aGlzLnN0cmVhbUZpbGVzPXQsdGhpcy5hY2N1bXVsYXRlPSExLHRoaXMuY29udGVudEJ1ZmZlcj1bXSx0aGlzLmRpclJlY29yZHM9W10sdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0PTAsdGhpcy5lbnRyaWVzQ291bnQ9MCx0aGlzLmN1cnJlbnRGaWxlPW51bGwsdGhpcy5fc291cmNlcz1bXX1JLmluaGVyaXRzKHMsbikscy5wcm90b3R5cGUucHVzaD1mdW5jdGlvbih0KXt2YXIgZT10Lm1ldGEucGVyY2VudHx8MCxyPXRoaXMuZW50cmllc0NvdW50LGk9dGhpcy5fc291cmNlcy5sZW5ndGg7dGhpcy5hY2N1bXVsYXRlP3RoaXMuY29udGVudEJ1ZmZlci5wdXNoKHQpOih0aGlzLmJ5dGVzV3JpdHRlbis9dC5kYXRhLmxlbmd0aCxuLnByb3RvdHlwZS5wdXNoLmNhbGwodGhpcyx7ZGF0YTp0LmRhdGEsbWV0YTp7Y3VycmVudEZpbGU6dGhpcy5jdXJyZW50RmlsZSxwZXJjZW50OnI/KGUrMTAwKihyLWktMSkpL3I6MTAwfX0pKX0scy5wcm90b3R5cGUub3BlbmVkU291cmNlPWZ1bmN0aW9uKHQpe3RoaXMuY3VycmVudFNvdXJjZU9mZnNldD10aGlzLmJ5dGVzV3JpdHRlbix0aGlzLmN1cnJlbnRGaWxlPXQuZmlsZS5uYW1lO3ZhciBlPXRoaXMuc3RyZWFtRmlsZXMmJiF0LmZpbGUuZGlyO2lmKGUpe3ZhciByPWkodCxlLCExLHRoaXMuY3VycmVudFNvdXJjZU9mZnNldCx0aGlzLnppcFBsYXRmb3JtLHRoaXMuZW5jb2RlRmlsZU5hbWUpO3RoaXMucHVzaCh7ZGF0YTpyLmZpbGVSZWNvcmQsbWV0YTp7cGVyY2VudDowfX0pfWVsc2UgdGhpcy5hY2N1bXVsYXRlPSEwfSxzLnByb3RvdHlwZS5jbG9zZWRTb3VyY2U9ZnVuY3Rpb24odCl7dGhpcy5hY2N1bXVsYXRlPSExO3ZhciBlPXRoaXMuc3RyZWFtRmlsZXMmJiF0LmZpbGUuZGlyLHI9aSh0LGUsITAsdGhpcy5jdXJyZW50U291cmNlT2Zmc2V0LHRoaXMuemlwUGxhdGZvcm0sdGhpcy5lbmNvZGVGaWxlTmFtZSk7aWYodGhpcy5kaXJSZWNvcmRzLnB1c2goci5kaXJSZWNvcmQpLGUpdGhpcy5wdXNoKHtkYXRhOmZ1bmN0aW9uKHQpe3JldHVybiBSLkRBVEFfREVTQ1JJUFRPUitBKHQuY3JjMzIsNCkrQSh0LmNvbXByZXNzZWRTaXplLDQpK0EodC51bmNvbXByZXNzZWRTaXplLDQpfSh0KSxtZXRhOntwZXJjZW50OjEwMH19KTtlbHNlIGZvcih0aGlzLnB1c2goe2RhdGE6ci5maWxlUmVjb3JkLG1ldGE6e3BlcmNlbnQ6MH19KTt0aGlzLmNvbnRlbnRCdWZmZXIubGVuZ3RoOyl0aGlzLnB1c2godGhpcy5jb250ZW50QnVmZmVyLnNoaWZ0KCkpO3RoaXMuY3VycmVudEZpbGU9bnVsbH0scy5wcm90b3R5cGUuZmx1c2g9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5ieXRlc1dyaXR0ZW4sZT0wO2U8dGhpcy5kaXJSZWNvcmRzLmxlbmd0aDtlKyspdGhpcy5wdXNoKHtkYXRhOnRoaXMuZGlyUmVjb3Jkc1tlXSxtZXRhOntwZXJjZW50OjEwMH19KTt2YXIgcj10aGlzLmJ5dGVzV3JpdHRlbi10LGk9ZnVuY3Rpb24odCxlLHIsaSxuKXt2YXIgcz1JLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsbihpKSk7cmV0dXJuIFIuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EK1wiXFwwXFwwXFwwXFwwXCIrQSh0LDIpK0EodCwyKStBKGUsNCkrQShyLDQpK0Eocy5sZW5ndGgsMikrc30odGhpcy5kaXJSZWNvcmRzLmxlbmd0aCxyLHQsdGhpcy56aXBDb21tZW50LHRoaXMuZW5jb2RlRmlsZU5hbWUpO3RoaXMucHVzaCh7ZGF0YTppLG1ldGE6e3BlcmNlbnQ6MTAwfX0pfSxzLnByb3RvdHlwZS5wcmVwYXJlTmV4dFNvdXJjZT1mdW5jdGlvbigpe3RoaXMucHJldmlvdXM9dGhpcy5fc291cmNlcy5zaGlmdCgpLHRoaXMub3BlbmVkU291cmNlKHRoaXMucHJldmlvdXMuc3RyZWFtSW5mbyksdGhpcy5pc1BhdXNlZD90aGlzLnByZXZpb3VzLnBhdXNlKCk6dGhpcy5wcmV2aW91cy5yZXN1bWUoKX0scy5wcm90b3R5cGUucmVnaXN0ZXJQcmV2aW91cz1mdW5jdGlvbih0KXt0aGlzLl9zb3VyY2VzLnB1c2godCk7dmFyIGU9dGhpcztyZXR1cm4gdC5vbihcImRhdGFcIixmdW5jdGlvbih0KXtlLnByb2Nlc3NDaHVuayh0KX0pLHQub24oXCJlbmRcIixmdW5jdGlvbigpe2UuY2xvc2VkU291cmNlKGUucHJldmlvdXMuc3RyZWFtSW5mbyksZS5fc291cmNlcy5sZW5ndGg/ZS5wcmVwYXJlTmV4dFNvdXJjZSgpOmUuZW5kKCl9KSx0Lm9uKFwiZXJyb3JcIixmdW5jdGlvbih0KXtlLmVycm9yKHQpfSksdGhpc30scy5wcm90b3R5cGUucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuISFuLnByb3RvdHlwZS5yZXN1bWUuY2FsbCh0aGlzKSYmKCF0aGlzLnByZXZpb3VzJiZ0aGlzLl9zb3VyY2VzLmxlbmd0aD8odGhpcy5wcmVwYXJlTmV4dFNvdXJjZSgpLCEwKTp0aGlzLnByZXZpb3VzfHx0aGlzLl9zb3VyY2VzLmxlbmd0aHx8dGhpcy5nZW5lcmF0ZWRFcnJvcj92b2lkIDA6KHRoaXMuZW5kKCksITApKX0scy5wcm90b3R5cGUuZXJyb3I9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fc291cmNlcztpZighbi5wcm90b3R5cGUuZXJyb3IuY2FsbCh0aGlzLHQpKXJldHVybiExO2Zvcih2YXIgcj0wO3I8ZS5sZW5ndGg7cisrKXRyeXtlW3JdLmVycm9yKHQpfWNhdGNoKHQpe31yZXR1cm4hMH0scy5wcm90b3R5cGUubG9jaz1mdW5jdGlvbigpe24ucHJvdG90eXBlLmxvY2suY2FsbCh0aGlzKTtmb3IodmFyIHQ9dGhpcy5fc291cmNlcyxlPTA7ZTx0Lmxlbmd0aDtlKyspdFtlXS5sb2NrKCl9LGUuZXhwb3J0cz1zfSx7XCIuLi9jcmMzMlwiOjQsXCIuLi9zaWduYXR1cmVcIjoyMyxcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuLi91dGY4XCI6MzEsXCIuLi91dGlsc1wiOjMyfV0sOTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciB1PXQoXCIuLi9jb21wcmVzc2lvbnNcIiksaT10KFwiLi9aaXBGaWxlV29ya2VyXCIpO3IuZ2VuZXJhdGVXb3JrZXI9ZnVuY3Rpb24odCxhLGUpe3ZhciBvPW5ldyBpKGEuc3RyZWFtRmlsZXMsZSxhLnBsYXRmb3JtLGEuZW5jb2RlRmlsZU5hbWUpLGg9MDt0cnl7dC5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7aCsrO3ZhciByPWZ1bmN0aW9uKHQsZSl7dmFyIHI9dHx8ZSxpPXVbcl07aWYoIWkpdGhyb3cgbmV3IEVycm9yKHIrXCIgaXMgbm90IGEgdmFsaWQgY29tcHJlc3Npb24gbWV0aG9kICFcIik7cmV0dXJuIGl9KGUub3B0aW9ucy5jb21wcmVzc2lvbixhLmNvbXByZXNzaW9uKSxpPWUub3B0aW9ucy5jb21wcmVzc2lvbk9wdGlvbnN8fGEuY29tcHJlc3Npb25PcHRpb25zfHx7fSxuPWUuZGlyLHM9ZS5kYXRlO2UuX2NvbXByZXNzV29ya2VyKHIsaSkud2l0aFN0cmVhbUluZm8oXCJmaWxlXCIse25hbWU6dCxkaXI6bixkYXRlOnMsY29tbWVudDplLmNvbW1lbnR8fFwiXCIsdW5peFBlcm1pc3Npb25zOmUudW5peFBlcm1pc3Npb25zLGRvc1Blcm1pc3Npb25zOmUuZG9zUGVybWlzc2lvbnN9KS5waXBlKG8pfSksby5lbnRyaWVzQ291bnQ9aH1jYXRjaCh0KXtvLmVycm9yKHQpfXJldHVybiBvfX0se1wiLi4vY29tcHJlc3Npb25zXCI6MyxcIi4vWmlwRmlsZVdvcmtlclwiOjh9XSwxMDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGkoKXtpZighKHRoaXMgaW5zdGFuY2VvZiBpKSlyZXR1cm4gbmV3IGk7aWYoYXJndW1lbnRzLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY29uc3RydWN0b3Igd2l0aCBwYXJhbWV0ZXJzIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpO3RoaXMuZmlsZXM9e30sdGhpcy5jb21tZW50PW51bGwsdGhpcy5yb290PVwiXCIsdGhpcy5jbG9uZT1mdW5jdGlvbigpe3ZhciB0PW5ldyBpO2Zvcih2YXIgZSBpbiB0aGlzKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbZV0mJih0W2VdPXRoaXNbZV0pO3JldHVybiB0fX0oaS5wcm90b3R5cGU9dChcIi4vb2JqZWN0XCIpKS5sb2FkQXN5bmM9dChcIi4vbG9hZFwiKSxpLnN1cHBvcnQ9dChcIi4vc3VwcG9ydFwiKSxpLmRlZmF1bHRzPXQoXCIuL2RlZmF1bHRzXCIpLGkudmVyc2lvbj1cIjMuNS4wXCIsaS5sb2FkQXN5bmM9ZnVuY3Rpb24odCxlKXtyZXR1cm4obmV3IGkpLmxvYWRBc3luYyh0LGUpfSxpLmV4dGVybmFsPXQoXCIuL2V4dGVybmFsXCIpLGUuZXhwb3J0cz1pfSx7XCIuL2RlZmF1bHRzXCI6NSxcIi4vZXh0ZXJuYWxcIjo2LFwiLi9sb2FkXCI6MTEsXCIuL29iamVjdFwiOjE1LFwiLi9zdXBwb3J0XCI6MzB9XSwxMTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL3V0aWxzXCIpLG49dChcIi4vZXh0ZXJuYWxcIiksbz10KFwiLi91dGY4XCIpLGg9KGk9dChcIi4vdXRpbHNcIiksdChcIi4vemlwRW50cmllc1wiKSkscz10KFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiKSx1PXQoXCIuL25vZGVqc1V0aWxzXCIpO2Z1bmN0aW9uIGwoaSl7cmV0dXJuIG5ldyBuLlByb21pc2UoZnVuY3Rpb24odCxlKXt2YXIgcj1pLmRlY29tcHJlc3NlZC5nZXRDb250ZW50V29ya2VyKCkucGlwZShuZXcgcyk7ci5vbihcImVycm9yXCIsZnVuY3Rpb24odCl7ZSh0KX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtyLnN0cmVhbUluZm8uY3JjMzIhPT1pLmRlY29tcHJlc3NlZC5jcmMzMj9lKG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgOiBDUkMzMiBtaXNtYXRjaFwiKSk6dCgpfSkucmVzdW1lKCl9KX1lLmV4cG9ydHM9ZnVuY3Rpb24odCxzKXt2YXIgYT10aGlzO3JldHVybiBzPWkuZXh0ZW5kKHN8fHt9LHtiYXNlNjQ6ITEsY2hlY2tDUkMzMjohMSxvcHRpbWl6ZWRCaW5hcnlTdHJpbmc6ITEsY3JlYXRlRm9sZGVyczohMSxkZWNvZGVGaWxlTmFtZTpvLnV0ZjhkZWNvZGV9KSx1LmlzTm9kZSYmdS5pc1N0cmVhbSh0KT9uLlByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkpTWmlwIGNhbid0IGFjY2VwdCBhIHN0cmVhbSB3aGVuIGxvYWRpbmcgYSB6aXAgZmlsZS5cIikpOmkucHJlcGFyZUNvbnRlbnQoXCJ0aGUgbG9hZGVkIHppcCBmaWxlXCIsdCwhMCxzLm9wdGltaXplZEJpbmFyeVN0cmluZyxzLmJhc2U2NCkudGhlbihmdW5jdGlvbih0KXt2YXIgZT1uZXcgaChzKTtyZXR1cm4gZS5sb2FkKHQpLGV9KS50aGVuKGZ1bmN0aW9uKHQpe3ZhciBlPVtuLlByb21pc2UucmVzb2x2ZSh0KV0scj10LmZpbGVzO2lmKHMuY2hlY2tDUkMzMilmb3IodmFyIGk9MDtpPHIubGVuZ3RoO2krKyllLnB1c2gobChyW2ldKSk7cmV0dXJuIG4uUHJvbWlzZS5hbGwoZSl9KS50aGVuKGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10LnNoaWZ0KCkscj1lLmZpbGVzLGk9MDtpPHIubGVuZ3RoO2krKyl7dmFyIG49cltpXTthLmZpbGUobi5maWxlTmFtZVN0cixuLmRlY29tcHJlc3NlZCx7YmluYXJ5OiEwLG9wdGltaXplZEJpbmFyeVN0cmluZzohMCxkYXRlOm4uZGF0ZSxkaXI6bi5kaXIsY29tbWVudDpuLmZpbGVDb21tZW50U3RyLmxlbmd0aD9uLmZpbGVDb21tZW50U3RyOm51bGwsdW5peFBlcm1pc3Npb25zOm4udW5peFBlcm1pc3Npb25zLGRvc1Blcm1pc3Npb25zOm4uZG9zUGVybWlzc2lvbnMsY3JlYXRlRm9sZGVyczpzLmNyZWF0ZUZvbGRlcnN9KX1yZXR1cm4gZS56aXBDb21tZW50Lmxlbmd0aCYmKGEuY29tbWVudD1lLnppcENvbW1lbnQpLGF9KX19LHtcIi4vZXh0ZXJuYWxcIjo2LFwiLi9ub2RlanNVdGlsc1wiOjE0LFwiLi9zdHJlYW0vQ3JjMzJQcm9iZVwiOjI1LFwiLi91dGY4XCI6MzEsXCIuL3V0aWxzXCI6MzIsXCIuL3ppcEVudHJpZXNcIjozM31dLDEyOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4uL3V0aWxzXCIpLG49dChcIi4uL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpO2Z1bmN0aW9uIHModCxlKXtuLmNhbGwodGhpcyxcIk5vZGVqcyBzdHJlYW0gaW5wdXQgYWRhcHRlciBmb3IgXCIrdCksdGhpcy5fdXBzdHJlYW1FbmRlZD0hMSx0aGlzLl9iaW5kU3RyZWFtKGUpfWkuaW5oZXJpdHMocyxuKSxzLnByb3RvdHlwZS5fYmluZFN0cmVhbT1mdW5jdGlvbih0KXt2YXIgZT10aGlzOyh0aGlzLl9zdHJlYW09dCkucGF1c2UoKSx0Lm9uKFwiZGF0YVwiLGZ1bmN0aW9uKHQpe2UucHVzaCh7ZGF0YTp0LG1ldGE6e3BlcmNlbnQ6MH19KX0pLm9uKFwiZXJyb3JcIixmdW5jdGlvbih0KXtlLmlzUGF1c2VkP3RoaXMuZ2VuZXJhdGVkRXJyb3I9dDplLmVycm9yKHQpfSkub24oXCJlbmRcIixmdW5jdGlvbigpe2UuaXNQYXVzZWQ/ZS5fdXBzdHJlYW1FbmRlZD0hMDplLmVuZCgpfSl9LHMucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKCl7cmV0dXJuISFuLnByb3RvdHlwZS5wYXVzZS5jYWxsKHRoaXMpJiYodGhpcy5fc3RyZWFtLnBhdXNlKCksITApfSxzLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXtyZXR1cm4hIW4ucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpJiYodGhpcy5fdXBzdHJlYW1FbmRlZD90aGlzLmVuZCgpOnRoaXMuX3N0cmVhbS5yZXN1bWUoKSwhMCl9LGUuZXhwb3J0cz1zfSx7XCIuLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi4vdXRpbHNcIjozMn1dLDEzOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIG49dChcInJlYWRhYmxlLXN0cmVhbVwiKS5SZWFkYWJsZTtmdW5jdGlvbiBpKHQsZSxyKXtuLmNhbGwodGhpcyxlKSx0aGlzLl9oZWxwZXI9dDt2YXIgaT10aGlzO3Qub24oXCJkYXRhXCIsZnVuY3Rpb24odCxlKXtpLnB1c2godCl8fGkuX2hlbHBlci5wYXVzZSgpLHImJnIoZSl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24odCl7aS5lbWl0KFwiZXJyb3JcIix0KX0pLm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtpLnB1c2gobnVsbCl9KX10KFwiLi4vdXRpbHNcIikuaW5oZXJpdHMoaSxuKSxpLnByb3RvdHlwZS5fcmVhZD1mdW5jdGlvbigpe3RoaXMuX2hlbHBlci5yZXN1bWUoKX0sZS5leHBvcnRzPWl9LHtcIi4uL3V0aWxzXCI6MzIsXCJyZWFkYWJsZS1zdHJlYW1cIjoxNn1dLDE0OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXtpc05vZGU6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEJ1ZmZlcixuZXdCdWZmZXJGcm9tOmZ1bmN0aW9uKHQsZSl7aWYoQnVmZmVyLmZyb20mJkJ1ZmZlci5mcm9tIT09VWludDhBcnJheS5mcm9tKXJldHVybiBCdWZmZXIuZnJvbSh0LGUpO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcignVGhlIFwiZGF0YVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJyk7cmV0dXJuIG5ldyBCdWZmZXIodCxlKX0sYWxsb2NCdWZmZXI6ZnVuY3Rpb24odCl7aWYoQnVmZmVyLmFsbG9jKXJldHVybiBCdWZmZXIuYWxsb2ModCk7dmFyIGU9bmV3IEJ1ZmZlcih0KTtyZXR1cm4gZS5maWxsKDApLGV9LGlzQnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiBCdWZmZXIuaXNCdWZmZXIodCl9LGlzU3RyZWFtOmZ1bmN0aW9uKHQpe3JldHVybiB0JiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm9uJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnBhdXNlJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiB0LnJlc3VtZX19fSx7fV0sMTU6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBzKHQsZSxyKXt2YXIgaSxuPXUuZ2V0VHlwZU9mKGUpLHM9dS5leHRlbmQocnx8e30sZik7cy5kYXRlPXMuZGF0ZXx8bmV3IERhdGUsbnVsbCE9PXMuY29tcHJlc3Npb24mJihzLmNvbXByZXNzaW9uPXMuY29tcHJlc3Npb24udG9VcHBlckNhc2UoKSksXCJzdHJpbmdcIj09dHlwZW9mIHMudW5peFBlcm1pc3Npb25zJiYocy51bml4UGVybWlzc2lvbnM9cGFyc2VJbnQocy51bml4UGVybWlzc2lvbnMsOCkpLHMudW5peFBlcm1pc3Npb25zJiYxNjM4NCZzLnVuaXhQZXJtaXNzaW9ucyYmKHMuZGlyPSEwKSxzLmRvc1Blcm1pc3Npb25zJiYxNiZzLmRvc1Blcm1pc3Npb25zJiYocy5kaXI9ITApLHMuZGlyJiYodD1nKHQpKSxzLmNyZWF0ZUZvbGRlcnMmJihpPV8odCkpJiZiLmNhbGwodGhpcyxpLCEwKTt2YXIgYT1cInN0cmluZ1wiPT09biYmITE9PT1zLmJpbmFyeSYmITE9PT1zLmJhc2U2NDtyJiZ2b2lkIDAhPT1yLmJpbmFyeXx8KHMuYmluYXJ5PSFhKSwoZSBpbnN0YW5jZW9mIGQmJjA9PT1lLnVuY29tcHJlc3NlZFNpemV8fHMuZGlyfHwhZXx8MD09PWUubGVuZ3RoKSYmKHMuYmFzZTY0PSExLHMuYmluYXJ5PSEwLGU9XCJcIixzLmNvbXByZXNzaW9uPVwiU1RPUkVcIixuPVwic3RyaW5nXCIpO3ZhciBvPW51bGw7bz1lIGluc3RhbmNlb2YgZHx8ZSBpbnN0YW5jZW9mIGw/ZTpwLmlzTm9kZSYmcC5pc1N0cmVhbShlKT9uZXcgbSh0LGUpOnUucHJlcGFyZUNvbnRlbnQodCxlLHMuYmluYXJ5LHMub3B0aW1pemVkQmluYXJ5U3RyaW5nLHMuYmFzZTY0KTt2YXIgaD1uZXcgYyh0LG8scyk7dGhpcy5maWxlc1t0XT1ofXZhciBuPXQoXCIuL3V0ZjhcIiksdT10KFwiLi91dGlsc1wiKSxsPXQoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpLGE9dChcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiKSxmPXQoXCIuL2RlZmF1bHRzXCIpLGQ9dChcIi4vY29tcHJlc3NlZE9iamVjdFwiKSxjPXQoXCIuL3ppcE9iamVjdFwiKSxvPXQoXCIuL2dlbmVyYXRlXCIpLHA9dChcIi4vbm9kZWpzVXRpbHNcIiksbT10KFwiLi9ub2RlanMvTm9kZWpzU3RyZWFtSW5wdXRBZGFwdGVyXCIpLF89ZnVuY3Rpb24odCl7XCIvXCI9PT10LnNsaWNlKC0xKSYmKHQ9dC5zdWJzdHJpbmcoMCx0Lmxlbmd0aC0xKSk7dmFyIGU9dC5sYXN0SW5kZXhPZihcIi9cIik7cmV0dXJuIDA8ZT90LnN1YnN0cmluZygwLGUpOlwiXCJ9LGc9ZnVuY3Rpb24odCl7cmV0dXJuXCIvXCIhPT10LnNsaWNlKC0xKSYmKHQrPVwiL1wiKSx0fSxiPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU9dm9pZCAwIT09ZT9lOmYuY3JlYXRlRm9sZGVycyx0PWcodCksdGhpcy5maWxlc1t0XXx8cy5jYWxsKHRoaXMsdCxudWxsLHtkaXI6ITAsY3JlYXRlRm9sZGVyczplfSksdGhpcy5maWxlc1t0XX07ZnVuY3Rpb24gaCh0KXtyZXR1cm5cIltvYmplY3QgUmVnRXhwXVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpfXZhciBpPXtsb2FkOmZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBtZXRob2QgaGFzIGJlZW4gcmVtb3ZlZCBpbiBKU1ppcCAzLjAsIHBsZWFzZSBjaGVjayB0aGUgdXBncmFkZSBndWlkZS5cIil9LGZvckVhY2g6ZnVuY3Rpb24odCl7dmFyIGUscixpO2ZvcihlIGluIHRoaXMuZmlsZXMpdGhpcy5maWxlcy5oYXNPd25Qcm9wZXJ0eShlKSYmKGk9dGhpcy5maWxlc1tlXSwocj1lLnNsaWNlKHRoaXMucm9vdC5sZW5ndGgsZS5sZW5ndGgpKSYmZS5zbGljZSgwLHRoaXMucm9vdC5sZW5ndGgpPT09dGhpcy5yb290JiZ0KHIsaSkpfSxmaWx0ZXI6ZnVuY3Rpb24ocil7dmFyIGk9W107cmV0dXJuIHRoaXMuZm9yRWFjaChmdW5jdGlvbih0LGUpe3IodCxlKSYmaS5wdXNoKGUpfSksaX0sZmlsZTpmdW5jdGlvbih0LGUscil7aWYoMSE9PWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHQ9dGhpcy5yb290K3Qscy5jYWxsKHRoaXMsdCxlLHIpLHRoaXM7aWYoaCh0KSl7dmFyIGk9dDtyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24odCxlKXtyZXR1cm4hZS5kaXImJmkudGVzdCh0KX0pfXZhciBuPXRoaXMuZmlsZXNbdGhpcy5yb290K3RdO3JldHVybiBuJiYhbi5kaXI/bjpudWxsfSxmb2xkZXI6ZnVuY3Rpb24ocil7aWYoIXIpcmV0dXJuIHRoaXM7aWYoaChyKSlyZXR1cm4gdGhpcy5maWx0ZXIoZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5kaXImJnIudGVzdCh0KX0pO3ZhciB0PXRoaXMucm9vdCtyLGU9Yi5jYWxsKHRoaXMsdCksaT10aGlzLmNsb25lKCk7cmV0dXJuIGkucm9vdD1lLm5hbWUsaX0scmVtb3ZlOmZ1bmN0aW9uKHIpe3I9dGhpcy5yb290K3I7dmFyIHQ9dGhpcy5maWxlc1tyXTtpZih0fHwoXCIvXCIhPT1yLnNsaWNlKC0xKSYmKHIrPVwiL1wiKSx0PXRoaXMuZmlsZXNbcl0pLHQmJiF0LmRpcilkZWxldGUgdGhpcy5maWxlc1tyXTtlbHNlIGZvcih2YXIgZT10aGlzLmZpbHRlcihmdW5jdGlvbih0LGUpe3JldHVybiBlLm5hbWUuc2xpY2UoMCxyLmxlbmd0aCk9PT1yfSksaT0wO2k8ZS5sZW5ndGg7aSsrKWRlbGV0ZSB0aGlzLmZpbGVzW2VbaV0ubmFtZV07cmV0dXJuIHRoaXN9LGdlbmVyYXRlOmZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIlRoaXMgbWV0aG9kIGhhcyBiZWVuIHJlbW92ZWQgaW4gSlNaaXAgMy4wLCBwbGVhc2UgY2hlY2sgdGhlIHVwZ3JhZGUgZ3VpZGUuXCIpfSxnZW5lcmF0ZUludGVybmFsU3RyZWFtOmZ1bmN0aW9uKHQpe3ZhciBlLHI9e307dHJ5e2lmKChyPXUuZXh0ZW5kKHR8fHt9LHtzdHJlYW1GaWxlczohMSxjb21wcmVzc2lvbjpcIlNUT1JFXCIsY29tcHJlc3Npb25PcHRpb25zOm51bGwsdHlwZTpcIlwiLHBsYXRmb3JtOlwiRE9TXCIsY29tbWVudDpudWxsLG1pbWVUeXBlOlwiYXBwbGljYXRpb24vemlwXCIsZW5jb2RlRmlsZU5hbWU6bi51dGY4ZW5jb2RlfSkpLnR5cGU9ci50eXBlLnRvTG93ZXJDYXNlKCksci5jb21wcmVzc2lvbj1yLmNvbXByZXNzaW9uLnRvVXBwZXJDYXNlKCksXCJiaW5hcnlzdHJpbmdcIj09PXIudHlwZSYmKHIudHlwZT1cInN0cmluZ1wiKSwhci50eXBlKXRocm93IG5ldyBFcnJvcihcIk5vIG91dHB1dCB0eXBlIHNwZWNpZmllZC5cIik7dS5jaGVja1N1cHBvcnQoci50eXBlKSxcImRhcndpblwiIT09ci5wbGF0Zm9ybSYmXCJmcmVlYnNkXCIhPT1yLnBsYXRmb3JtJiZcImxpbnV4XCIhPT1yLnBsYXRmb3JtJiZcInN1bm9zXCIhPT1yLnBsYXRmb3JtfHwoci5wbGF0Zm9ybT1cIlVOSVhcIiksXCJ3aW4zMlwiPT09ci5wbGF0Zm9ybSYmKHIucGxhdGZvcm09XCJET1NcIik7dmFyIGk9ci5jb21tZW50fHx0aGlzLmNvbW1lbnR8fFwiXCI7ZT1vLmdlbmVyYXRlV29ya2VyKHRoaXMscixpKX1jYXRjaCh0KXsoZT1uZXcgbChcImVycm9yXCIpKS5lcnJvcih0KX1yZXR1cm4gbmV3IGEoZSxyLnR5cGV8fFwic3RyaW5nXCIsci5taW1lVHlwZSl9LGdlbmVyYXRlQXN5bmM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5nZW5lcmF0ZUludGVybmFsU3RyZWFtKHQpLmFjY3VtdWxhdGUoZSl9LGdlbmVyYXRlTm9kZVN0cmVhbTpmdW5jdGlvbih0LGUpe3JldHVybih0PXR8fHt9KS50eXBlfHwodC50eXBlPVwibm9kZWJ1ZmZlclwiKSx0aGlzLmdlbmVyYXRlSW50ZXJuYWxTdHJlYW0odCkudG9Ob2RlanNTdHJlYW0oZSl9fTtlLmV4cG9ydHM9aX0se1wiLi9jb21wcmVzc2VkT2JqZWN0XCI6MixcIi4vZGVmYXVsdHNcIjo1LFwiLi9nZW5lcmF0ZVwiOjksXCIuL25vZGVqcy9Ob2RlanNTdHJlYW1JbnB1dEFkYXB0ZXJcIjoxMixcIi4vbm9kZWpzVXRpbHNcIjoxNCxcIi4vc3RyZWFtL0dlbmVyaWNXb3JrZXJcIjoyOCxcIi4vc3RyZWFtL1N0cmVhbUhlbHBlclwiOjI5LFwiLi91dGY4XCI6MzEsXCIuL3V0aWxzXCI6MzIsXCIuL3ppcE9iamVjdFwiOjM1fV0sMTY6W2Z1bmN0aW9uKHQsZSxyKXtlLmV4cG9ydHM9dChcInN0cmVhbVwiKX0se3N0cmVhbTp2b2lkIDB9XSwxNzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuL0RhdGFSZWFkZXJcIik7ZnVuY3Rpb24gbih0KXtpLmNhbGwodGhpcyx0KTtmb3IodmFyIGU9MDtlPHRoaXMuZGF0YS5sZW5ndGg7ZSsrKXRbZV09MjU1JnRbZV19dChcIi4uL3V0aWxzXCIpLmluaGVyaXRzKG4saSksbi5wcm90b3R5cGUuYnl0ZUF0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRhdGFbdGhpcy56ZXJvK3RdfSxuLnByb3RvdHlwZS5sYXN0SW5kZXhPZlNpZ25hdHVyZT1mdW5jdGlvbih0KXtmb3IodmFyIGU9dC5jaGFyQ29kZUF0KDApLHI9dC5jaGFyQ29kZUF0KDEpLGk9dC5jaGFyQ29kZUF0KDIpLG49dC5jaGFyQ29kZUF0KDMpLHM9dGhpcy5sZW5ndGgtNDswPD1zOy0tcylpZih0aGlzLmRhdGFbc109PT1lJiZ0aGlzLmRhdGFbcysxXT09PXImJnRoaXMuZGF0YVtzKzJdPT09aSYmdGhpcy5kYXRhW3MrM109PT1uKXJldHVybiBzLXRoaXMuemVybztyZXR1cm4tMX0sbi5wcm90b3R5cGUucmVhZEFuZENoZWNrU2lnbmF0dXJlPWZ1bmN0aW9uKHQpe3ZhciBlPXQuY2hhckNvZGVBdCgwKSxyPXQuY2hhckNvZGVBdCgxKSxpPXQuY2hhckNvZGVBdCgyKSxuPXQuY2hhckNvZGVBdCgzKSxzPXRoaXMucmVhZERhdGEoNCk7cmV0dXJuIGU9PT1zWzBdJiZyPT09c1sxXSYmaT09PXNbMl0mJm49PT1zWzNdfSxuLnByb3RvdHlwZS5yZWFkRGF0YT1mdW5jdGlvbih0KXtpZih0aGlzLmNoZWNrT2Zmc2V0KHQpLDA9PT10KXJldHVybltdO3ZhciBlPXRoaXMuZGF0YS5zbGljZSh0aGlzLnplcm8rdGhpcy5pbmRleCx0aGlzLnplcm8rdGhpcy5pbmRleCt0KTtyZXR1cm4gdGhpcy5pbmRleCs9dCxlfSxlLmV4cG9ydHM9bn0se1wiLi4vdXRpbHNcIjozMixcIi4vRGF0YVJlYWRlclwiOjE4fV0sMTg6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi4vdXRpbHNcIik7ZnVuY3Rpb24gbih0KXt0aGlzLmRhdGE9dCx0aGlzLmxlbmd0aD10Lmxlbmd0aCx0aGlzLmluZGV4PTAsdGhpcy56ZXJvPTB9bi5wcm90b3R5cGU9e2NoZWNrT2Zmc2V0OmZ1bmN0aW9uKHQpe3RoaXMuY2hlY2tJbmRleCh0aGlzLmluZGV4K3QpfSxjaGVja0luZGV4OmZ1bmN0aW9uKHQpe2lmKHRoaXMubGVuZ3RoPHRoaXMuemVybyt0fHx0PDApdGhyb3cgbmV3IEVycm9yKFwiRW5kIG9mIGRhdGEgcmVhY2hlZCAoZGF0YSBsZW5ndGggPSBcIit0aGlzLmxlbmd0aCtcIiwgYXNrZWQgaW5kZXggPSBcIit0K1wiKS4gQ29ycnVwdGVkIHppcCA/XCIpfSxzZXRJbmRleDpmdW5jdGlvbih0KXt0aGlzLmNoZWNrSW5kZXgodCksdGhpcy5pbmRleD10fSxza2lwOmZ1bmN0aW9uKHQpe3RoaXMuc2V0SW5kZXgodGhpcy5pbmRleCt0KX0sYnl0ZUF0OmZ1bmN0aW9uKHQpe30scmVhZEludDpmdW5jdGlvbih0KXt2YXIgZSxyPTA7Zm9yKHRoaXMuY2hlY2tPZmZzZXQodCksZT10aGlzLmluZGV4K3QtMTtlPj10aGlzLmluZGV4O2UtLSlyPShyPDw4KSt0aGlzLmJ5dGVBdChlKTtyZXR1cm4gdGhpcy5pbmRleCs9dCxyfSxyZWFkU3RyaW5nOmZ1bmN0aW9uKHQpe3JldHVybiBpLnRyYW5zZm9ybVRvKFwic3RyaW5nXCIsdGhpcy5yZWFkRGF0YSh0KSl9LHJlYWREYXRhOmZ1bmN0aW9uKHQpe30sbGFzdEluZGV4T2ZTaWduYXR1cmU6ZnVuY3Rpb24odCl7fSxyZWFkQW5kQ2hlY2tTaWduYXR1cmU6ZnVuY3Rpb24odCl7fSxyZWFkRGF0ZTpmdW5jdGlvbigpe3ZhciB0PXRoaXMucmVhZEludCg0KTtyZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoMTk4MCsodD4+MjUmMTI3KSwodD4+MjEmMTUpLTEsdD4+MTYmMzEsdD4+MTEmMzEsdD4+NSY2MywoMzEmdCk8PDEpKX19LGUuZXhwb3J0cz1ufSx7XCIuLi91dGlsc1wiOjMyfV0sMTk6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT10KFwiLi9VaW50OEFycmF5UmVhZGVyXCIpO2Z1bmN0aW9uIG4odCl7aS5jYWxsKHRoaXMsdCl9dChcIi4uL3V0aWxzXCIpLmluaGVyaXRzKG4saSksbi5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24odCl7dGhpcy5jaGVja09mZnNldCh0KTt2YXIgZT10aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrdCk7cmV0dXJuIHRoaXMuaW5kZXgrPXQsZX0sZS5leHBvcnRzPW59LHtcIi4uL3V0aWxzXCI6MzIsXCIuL1VpbnQ4QXJyYXlSZWFkZXJcIjoyMX1dLDIwOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vRGF0YVJlYWRlclwiKTtmdW5jdGlvbiBuKHQpe2kuY2FsbCh0aGlzLHQpfXQoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhuLGkpLG4ucHJvdG90eXBlLmJ5dGVBdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhLmNoYXJDb2RlQXQodGhpcy56ZXJvK3QpfSxuLnByb3RvdHlwZS5sYXN0SW5kZXhPZlNpZ25hdHVyZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhLmxhc3RJbmRleE9mKHQpLXRoaXMuemVyb30sbi5wcm90b3R5cGUucmVhZEFuZENoZWNrU2lnbmF0dXJlPWZ1bmN0aW9uKHQpe3JldHVybiB0PT09dGhpcy5yZWFkRGF0YSg0KX0sbi5wcm90b3R5cGUucmVhZERhdGE9ZnVuY3Rpb24odCl7dGhpcy5jaGVja09mZnNldCh0KTt2YXIgZT10aGlzLmRhdGEuc2xpY2UodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrdCk7cmV0dXJuIHRoaXMuaW5kZXgrPXQsZX0sZS5leHBvcnRzPW59LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0RhdGFSZWFkZXJcIjoxOH1dLDIxOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vQXJyYXlSZWFkZXJcIik7ZnVuY3Rpb24gbih0KXtpLmNhbGwodGhpcyx0KX10KFwiLi4vdXRpbHNcIikuaW5oZXJpdHMobixpKSxuLnByb3RvdHlwZS5yZWFkRGF0YT1mdW5jdGlvbih0KXtpZih0aGlzLmNoZWNrT2Zmc2V0KHQpLDA9PT10KXJldHVybiBuZXcgVWludDhBcnJheSgwKTt2YXIgZT10aGlzLmRhdGEuc3ViYXJyYXkodGhpcy56ZXJvK3RoaXMuaW5kZXgsdGhpcy56ZXJvK3RoaXMuaW5kZXgrdCk7cmV0dXJuIHRoaXMuaW5kZXgrPXQsZX0sZS5leHBvcnRzPW59LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0FycmF5UmVhZGVyXCI6MTd9XSwyMjpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuLi91dGlsc1wiKSxuPXQoXCIuLi9zdXBwb3J0XCIpLHM9dChcIi4vQXJyYXlSZWFkZXJcIiksYT10KFwiLi9TdHJpbmdSZWFkZXJcIiksbz10KFwiLi9Ob2RlQnVmZmVyUmVhZGVyXCIpLGg9dChcIi4vVWludDhBcnJheVJlYWRlclwiKTtlLmV4cG9ydHM9ZnVuY3Rpb24odCl7dmFyIGU9aS5nZXRUeXBlT2YodCk7cmV0dXJuIGkuY2hlY2tTdXBwb3J0KGUpLFwic3RyaW5nXCIhPT1lfHxuLnVpbnQ4YXJyYXk/XCJub2RlYnVmZmVyXCI9PT1lP25ldyBvKHQpOm4udWludDhhcnJheT9uZXcgaChpLnRyYW5zZm9ybVRvKFwidWludDhhcnJheVwiLHQpKTpuZXcgcyhpLnRyYW5zZm9ybVRvKFwiYXJyYXlcIix0KSk6bmV3IGEodCl9fSx7XCIuLi9zdXBwb3J0XCI6MzAsXCIuLi91dGlsc1wiOjMyLFwiLi9BcnJheVJlYWRlclwiOjE3LFwiLi9Ob2RlQnVmZmVyUmVhZGVyXCI6MTksXCIuL1N0cmluZ1JlYWRlclwiOjIwLFwiLi9VaW50OEFycmF5UmVhZGVyXCI6MjF9XSwyMzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3IuTE9DQUxfRklMRV9IRUFERVI9XCJQS1x1MDAwM1x1MDAwNFwiLHIuQ0VOVFJBTF9GSUxFX0hFQURFUj1cIlBLXHUwMDAxXHUwMDAyXCIsci5DRU5UUkFMX0RJUkVDVE9SWV9FTkQ9XCJQS1x1MDAwNVx1MDAwNlwiLHIuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUj1cIlBLXHUwMDA2XHUwMDA3XCIsci5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQ9XCJQS1x1MDAwNlx1MDAwNlwiLHIuREFUQV9ERVNDUklQVE9SPVwiUEtcdTAwMDdcXGJcIn0se31dLDI0OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vR2VuZXJpY1dvcmtlclwiKSxuPXQoXCIuLi91dGlsc1wiKTtmdW5jdGlvbiBzKHQpe2kuY2FsbCh0aGlzLFwiQ29udmVydFdvcmtlciB0byBcIit0KSx0aGlzLmRlc3RUeXBlPXR9bi5pbmhlcml0cyhzLGkpLHMucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbih0KXt0aGlzLnB1c2goe2RhdGE6bi50cmFuc2Zvcm1Ubyh0aGlzLmRlc3RUeXBlLHQuZGF0YSksbWV0YTp0Lm1ldGF9KX0sZS5leHBvcnRzPXN9LHtcIi4uL3V0aWxzXCI6MzIsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDI1OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vR2VuZXJpY1dvcmtlclwiKSxuPXQoXCIuLi9jcmMzMlwiKTtmdW5jdGlvbiBzKCl7aS5jYWxsKHRoaXMsXCJDcmMzMlByb2JlXCIpLHRoaXMud2l0aFN0cmVhbUluZm8oXCJjcmMzMlwiLDApfXQoXCIuLi91dGlsc1wiKS5pbmhlcml0cyhzLGkpLHMucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbih0KXt0aGlzLnN0cmVhbUluZm8uY3JjMzI9bih0LmRhdGEsdGhpcy5zdHJlYW1JbmZvLmNyYzMyfHwwKSx0aGlzLnB1c2godCl9LGUuZXhwb3J0cz1zfSx7XCIuLi9jcmMzMlwiOjQsXCIuLi91dGlsc1wiOjMyLFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwyNjpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuLi91dGlsc1wiKSxuPXQoXCIuL0dlbmVyaWNXb3JrZXJcIik7ZnVuY3Rpb24gcyh0KXtuLmNhbGwodGhpcyxcIkRhdGFMZW5ndGhQcm9iZSBmb3IgXCIrdCksdGhpcy5wcm9wTmFtZT10LHRoaXMud2l0aFN0cmVhbUluZm8odCwwKX1pLmluaGVyaXRzKHMsbikscy5wcm90b3R5cGUucHJvY2Vzc0NodW5rPWZ1bmN0aW9uKHQpe2lmKHQpe3ZhciBlPXRoaXMuc3RyZWFtSW5mb1t0aGlzLnByb3BOYW1lXXx8MDt0aGlzLnN0cmVhbUluZm9bdGhpcy5wcm9wTmFtZV09ZSt0LmRhdGEubGVuZ3RofW4ucHJvdG90eXBlLnByb2Nlc3NDaHVuay5jYWxsKHRoaXMsdCl9LGUuZXhwb3J0cz1zfSx7XCIuLi91dGlsc1wiOjMyLFwiLi9HZW5lcmljV29ya2VyXCI6Mjh9XSwyNzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPXQoXCIuLi91dGlsc1wiKSxuPXQoXCIuL0dlbmVyaWNXb3JrZXJcIik7ZnVuY3Rpb24gcyh0KXtuLmNhbGwodGhpcyxcIkRhdGFXb3JrZXJcIik7dmFyIGU9dGhpczt0aGlzLmRhdGFJc1JlYWR5PSExLHRoaXMuaW5kZXg9MCx0aGlzLm1heD0wLHRoaXMuZGF0YT1udWxsLHRoaXMudHlwZT1cIlwiLHRoaXMuX3RpY2tTY2hlZHVsZWQ9ITEsdC50aGVuKGZ1bmN0aW9uKHQpe2UuZGF0YUlzUmVhZHk9ITAsZS5kYXRhPXQsZS5tYXg9dCYmdC5sZW5ndGh8fDAsZS50eXBlPWkuZ2V0VHlwZU9mKHQpLGUuaXNQYXVzZWR8fGUuX3RpY2tBbmRSZXBlYXQoKX0sZnVuY3Rpb24odCl7ZS5lcnJvcih0KX0pfWkuaW5oZXJpdHMocyxuKSxzLnByb3RvdHlwZS5jbGVhblVwPWZ1bmN0aW9uKCl7bi5wcm90b3R5cGUuY2xlYW5VcC5jYWxsKHRoaXMpLHRoaXMuZGF0YT1udWxsfSxzLnByb3RvdHlwZS5yZXN1bWU9ZnVuY3Rpb24oKXtyZXR1cm4hIW4ucHJvdG90eXBlLnJlc3VtZS5jYWxsKHRoaXMpJiYoIXRoaXMuX3RpY2tTY2hlZHVsZWQmJnRoaXMuZGF0YUlzUmVhZHkmJih0aGlzLl90aWNrU2NoZWR1bGVkPSEwLGkuZGVsYXkodGhpcy5fdGlja0FuZFJlcGVhdCxbXSx0aGlzKSksITApfSxzLnByb3RvdHlwZS5fdGlja0FuZFJlcGVhdD1mdW5jdGlvbigpe3RoaXMuX3RpY2tTY2hlZHVsZWQ9ITEsdGhpcy5pc1BhdXNlZHx8dGhpcy5pc0ZpbmlzaGVkfHwodGhpcy5fdGljaygpLHRoaXMuaXNGaW5pc2hlZHx8KGkuZGVsYXkodGhpcy5fdGlja0FuZFJlcGVhdCxbXSx0aGlzKSx0aGlzLl90aWNrU2NoZWR1bGVkPSEwKSl9LHMucHJvdG90eXBlLl90aWNrPWZ1bmN0aW9uKCl7aWYodGhpcy5pc1BhdXNlZHx8dGhpcy5pc0ZpbmlzaGVkKXJldHVybiExO3ZhciB0PW51bGwsZT1NYXRoLm1pbih0aGlzLm1heCx0aGlzLmluZGV4KzE2Mzg0KTtpZih0aGlzLmluZGV4Pj10aGlzLm1heClyZXR1cm4gdGhpcy5lbmQoKTtzd2l0Y2godGhpcy50eXBlKXtjYXNlXCJzdHJpbmdcIjp0PXRoaXMuZGF0YS5zdWJzdHJpbmcodGhpcy5pbmRleCxlKTticmVhaztjYXNlXCJ1aW50OGFycmF5XCI6dD10aGlzLmRhdGEuc3ViYXJyYXkodGhpcy5pbmRleCxlKTticmVhaztjYXNlXCJhcnJheVwiOmNhc2VcIm5vZGVidWZmZXJcIjp0PXRoaXMuZGF0YS5zbGljZSh0aGlzLmluZGV4LGUpfXJldHVybiB0aGlzLmluZGV4PWUsdGhpcy5wdXNoKHtkYXRhOnQsbWV0YTp7cGVyY2VudDp0aGlzLm1heD90aGlzLmluZGV4L3RoaXMubWF4KjEwMDowfX0pfSxlLmV4cG9ydHM9c30se1wiLi4vdXRpbHNcIjozMixcIi4vR2VuZXJpY1dvcmtlclwiOjI4fV0sMjg6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQpe3RoaXMubmFtZT10fHxcImRlZmF1bHRcIix0aGlzLnN0cmVhbUluZm89e30sdGhpcy5nZW5lcmF0ZWRFcnJvcj1udWxsLHRoaXMuZXh0cmFTdHJlYW1JbmZvPXt9LHRoaXMuaXNQYXVzZWQ9ITAsdGhpcy5pc0ZpbmlzaGVkPSExLHRoaXMuaXNMb2NrZWQ9ITEsdGhpcy5fbGlzdGVuZXJzPXtkYXRhOltdLGVuZDpbXSxlcnJvcjpbXX0sdGhpcy5wcmV2aW91cz1udWxsfWkucHJvdG90eXBlPXtwdXNoOmZ1bmN0aW9uKHQpe3RoaXMuZW1pdChcImRhdGFcIix0KX0sZW5kOmZ1bmN0aW9uKCl7aWYodGhpcy5pc0ZpbmlzaGVkKXJldHVybiExO3RoaXMuZmx1c2goKTt0cnl7dGhpcy5lbWl0KFwiZW5kXCIpLHRoaXMuY2xlYW5VcCgpLHRoaXMuaXNGaW5pc2hlZD0hMH1jYXRjaCh0KXt0aGlzLmVtaXQoXCJlcnJvclwiLHQpfXJldHVybiEwfSxlcnJvcjpmdW5jdGlvbih0KXtyZXR1cm4hdGhpcy5pc0ZpbmlzaGVkJiYodGhpcy5pc1BhdXNlZD90aGlzLmdlbmVyYXRlZEVycm9yPXQ6KHRoaXMuaXNGaW5pc2hlZD0hMCx0aGlzLmVtaXQoXCJlcnJvclwiLHQpLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMuZXJyb3IodCksdGhpcy5jbGVhblVwKCkpLCEwKX0sb246ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5fbGlzdGVuZXJzW3RdLnB1c2goZSksdGhpc30sY2xlYW5VcDpmdW5jdGlvbigpe3RoaXMuc3RyZWFtSW5mbz10aGlzLmdlbmVyYXRlZEVycm9yPXRoaXMuZXh0cmFTdHJlYW1JbmZvPW51bGwsdGhpcy5fbGlzdGVuZXJzPVtdfSxlbWl0OmZ1bmN0aW9uKHQsZSl7aWYodGhpcy5fbGlzdGVuZXJzW3RdKWZvcih2YXIgcj0wO3I8dGhpcy5fbGlzdGVuZXJzW3RdLmxlbmd0aDtyKyspdGhpcy5fbGlzdGVuZXJzW3RdW3JdLmNhbGwodGhpcyxlKX0scGlwZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5yZWdpc3RlclByZXZpb3VzKHRoaXMpfSxyZWdpc3RlclByZXZpb3VzOmZ1bmN0aW9uKHQpe2lmKHRoaXMuaXNMb2NrZWQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0cmVhbSAnXCIrdGhpcytcIicgaGFzIGFscmVhZHkgYmVlbiB1c2VkLlwiKTt0aGlzLnN0cmVhbUluZm89dC5zdHJlYW1JbmZvLHRoaXMubWVyZ2VTdHJlYW1JbmZvKCksdGhpcy5wcmV2aW91cz10O3ZhciBlPXRoaXM7cmV0dXJuIHQub24oXCJkYXRhXCIsZnVuY3Rpb24odCl7ZS5wcm9jZXNzQ2h1bmsodCl9KSx0Lm9uKFwiZW5kXCIsZnVuY3Rpb24oKXtlLmVuZCgpfSksdC5vbihcImVycm9yXCIsZnVuY3Rpb24odCl7ZS5lcnJvcih0KX0pLHRoaXN9LHBhdXNlOmZ1bmN0aW9uKCl7cmV0dXJuIXRoaXMuaXNQYXVzZWQmJiF0aGlzLmlzRmluaXNoZWQmJih0aGlzLmlzUGF1c2VkPSEwLHRoaXMucHJldmlvdXMmJnRoaXMucHJldmlvdXMucGF1c2UoKSwhMCl9LHJlc3VtZTpmdW5jdGlvbigpe2lmKCF0aGlzLmlzUGF1c2VkfHx0aGlzLmlzRmluaXNoZWQpcmV0dXJuITE7dmFyIHQ9dGhpcy5pc1BhdXNlZD0hMTtyZXR1cm4gdGhpcy5nZW5lcmF0ZWRFcnJvciYmKHRoaXMuZXJyb3IodGhpcy5nZW5lcmF0ZWRFcnJvciksdD0hMCksdGhpcy5wcmV2aW91cyYmdGhpcy5wcmV2aW91cy5yZXN1bWUoKSwhdH0sZmx1c2g6ZnVuY3Rpb24oKXt9LHByb2Nlc3NDaHVuazpmdW5jdGlvbih0KXt0aGlzLnB1c2godCl9LHdpdGhTdHJlYW1JbmZvOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZXh0cmFTdHJlYW1JbmZvW3RdPWUsdGhpcy5tZXJnZVN0cmVhbUluZm8oKSx0aGlzfSxtZXJnZVN0cmVhbUluZm86ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy5leHRyYVN0cmVhbUluZm8pdGhpcy5leHRyYVN0cmVhbUluZm8uaGFzT3duUHJvcGVydHkodCkmJih0aGlzLnN0cmVhbUluZm9bdF09dGhpcy5leHRyYVN0cmVhbUluZm9bdF0pfSxsb2NrOmZ1bmN0aW9uKCl7aWYodGhpcy5pc0xvY2tlZCl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc3RyZWFtICdcIit0aGlzK1wiJyBoYXMgYWxyZWFkeSBiZWVuIHVzZWQuXCIpO3RoaXMuaXNMb2NrZWQ9ITAsdGhpcy5wcmV2aW91cyYmdGhpcy5wcmV2aW91cy5sb2NrKCl9LHRvU3RyaW5nOmZ1bmN0aW9uKCl7dmFyIHQ9XCJXb3JrZXIgXCIrdGhpcy5uYW1lO3JldHVybiB0aGlzLnByZXZpb3VzP3RoaXMucHJldmlvdXMrXCIgLT4gXCIrdDp0fX0sZS5leHBvcnRzPWl9LHt9XSwyOTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBoPXQoXCIuLi91dGlsc1wiKSxuPXQoXCIuL0NvbnZlcnRXb3JrZXJcIikscz10KFwiLi9HZW5lcmljV29ya2VyXCIpLHU9dChcIi4uL2Jhc2U2NFwiKSxpPXQoXCIuLi9zdXBwb3J0XCIpLGE9dChcIi4uL2V4dGVybmFsXCIpLG89bnVsbDtpZihpLm5vZGVzdHJlYW0pdHJ5e289dChcIi4uL25vZGVqcy9Ob2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyXCIpfWNhdGNoKHQpe31mdW5jdGlvbiBsKHQsbyl7cmV0dXJuIG5ldyBhLlByb21pc2UoZnVuY3Rpb24oZSxyKXt2YXIgaT1bXSxuPXQuX2ludGVybmFsVHlwZSxzPXQuX291dHB1dFR5cGUsYT10Ll9taW1lVHlwZTt0Lm9uKFwiZGF0YVwiLGZ1bmN0aW9uKHQsZSl7aS5wdXNoKHQpLG8mJm8oZSl9KS5vbihcImVycm9yXCIsZnVuY3Rpb24odCl7aT1bXSxyKHQpfSkub24oXCJlbmRcIixmdW5jdGlvbigpe3RyeXt2YXIgdD1mdW5jdGlvbih0LGUscil7c3dpdGNoKHQpe2Nhc2VcImJsb2JcIjpyZXR1cm4gaC5uZXdCbG9iKGgudHJhbnNmb3JtVG8oXCJhcnJheWJ1ZmZlclwiLGUpLHIpO2Nhc2VcImJhc2U2NFwiOnJldHVybiB1LmVuY29kZShlKTtkZWZhdWx0OnJldHVybiBoLnRyYW5zZm9ybVRvKHQsZSl9fShzLGZ1bmN0aW9uKHQsZSl7dmFyIHIsaT0wLG49bnVsbCxzPTA7Zm9yKHI9MDtyPGUubGVuZ3RoO3IrKylzKz1lW3JdLmxlbmd0aDtzd2l0Y2godCl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIGUuam9pbihcIlwiKTtjYXNlXCJhcnJheVwiOnJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLGUpO2Nhc2VcInVpbnQ4YXJyYXlcIjpmb3Iobj1uZXcgVWludDhBcnJheShzKSxyPTA7cjxlLmxlbmd0aDtyKyspbi5zZXQoZVtyXSxpKSxpKz1lW3JdLmxlbmd0aDtyZXR1cm4gbjtjYXNlXCJub2RlYnVmZmVyXCI6cmV0dXJuIEJ1ZmZlci5jb25jYXQoZSk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJjb25jYXQgOiB1bnN1cHBvcnRlZCB0eXBlICdcIit0K1wiJ1wiKX19KG4saSksYSk7ZSh0KX1jYXRjaCh0KXtyKHQpfWk9W119KS5yZXN1bWUoKX0pfWZ1bmN0aW9uIGYodCxlLHIpe3ZhciBpPWU7c3dpdGNoKGUpe2Nhc2VcImJsb2JcIjpjYXNlXCJhcnJheWJ1ZmZlclwiOmk9XCJ1aW50OGFycmF5XCI7YnJlYWs7Y2FzZVwiYmFzZTY0XCI6aT1cInN0cmluZ1wifXRyeXt0aGlzLl9pbnRlcm5hbFR5cGU9aSx0aGlzLl9vdXRwdXRUeXBlPWUsdGhpcy5fbWltZVR5cGU9cixoLmNoZWNrU3VwcG9ydChpKSx0aGlzLl93b3JrZXI9dC5waXBlKG5ldyBuKGkpKSx0LmxvY2soKX1jYXRjaCh0KXt0aGlzLl93b3JrZXI9bmV3IHMoXCJlcnJvclwiKSx0aGlzLl93b3JrZXIuZXJyb3IodCl9fWYucHJvdG90eXBlPXthY2N1bXVsYXRlOmZ1bmN0aW9uKHQpe3JldHVybiBsKHRoaXMsdCl9LG9uOmZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcztyZXR1cm5cImRhdGFcIj09PXQ/dGhpcy5fd29ya2VyLm9uKHQsZnVuY3Rpb24odCl7ZS5jYWxsKHIsdC5kYXRhLHQubWV0YSl9KTp0aGlzLl93b3JrZXIub24odCxmdW5jdGlvbigpe2guZGVsYXkoZSxhcmd1bWVudHMscil9KSx0aGlzfSxyZXN1bWU6ZnVuY3Rpb24oKXtyZXR1cm4gaC5kZWxheSh0aGlzLl93b3JrZXIucmVzdW1lLFtdLHRoaXMuX3dvcmtlciksdGhpc30scGF1c2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fd29ya2VyLnBhdXNlKCksdGhpc30sdG9Ob2RlanNTdHJlYW06ZnVuY3Rpb24odCl7aWYoaC5jaGVja1N1cHBvcnQoXCJub2Rlc3RyZWFtXCIpLFwibm9kZWJ1ZmZlclwiIT09dGhpcy5fb3V0cHV0VHlwZSl0aHJvdyBuZXcgRXJyb3IodGhpcy5fb3V0cHV0VHlwZStcIiBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoaXMgbWV0aG9kXCIpO3JldHVybiBuZXcgbyh0aGlzLHtvYmplY3RNb2RlOlwibm9kZWJ1ZmZlclwiIT09dGhpcy5fb3V0cHV0VHlwZX0sdCl9fSxlLmV4cG9ydHM9Zn0se1wiLi4vYmFzZTY0XCI6MSxcIi4uL2V4dGVybmFsXCI6NixcIi4uL25vZGVqcy9Ob2RlanNTdHJlYW1PdXRwdXRBZGFwdGVyXCI6MTMsXCIuLi9zdXBwb3J0XCI6MzAsXCIuLi91dGlsc1wiOjMyLFwiLi9Db252ZXJ0V29ya2VyXCI6MjQsXCIuL0dlbmVyaWNXb3JrZXJcIjoyOH1dLDMwOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7aWYoci5iYXNlNjQ9ITAsci5hcnJheT0hMCxyLnN0cmluZz0hMCxyLmFycmF5YnVmZmVyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBBcnJheUJ1ZmZlciYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIFVpbnQ4QXJyYXksci5ub2RlYnVmZmVyPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXIsci51aW50OGFycmF5PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5LFwidW5kZWZpbmVkXCI9PXR5cGVvZiBBcnJheUJ1ZmZlcilyLmJsb2I9ITE7ZWxzZXt2YXIgaT1uZXcgQXJyYXlCdWZmZXIoMCk7dHJ5e3IuYmxvYj0wPT09bmV3IEJsb2IoW2ldLHt0eXBlOlwiYXBwbGljYXRpb24vemlwXCJ9KS5zaXplfWNhdGNoKHQpe3RyeXt2YXIgbj1uZXcoc2VsZi5CbG9iQnVpbGRlcnx8c2VsZi5XZWJLaXRCbG9iQnVpbGRlcnx8c2VsZi5Nb3pCbG9iQnVpbGRlcnx8c2VsZi5NU0Jsb2JCdWlsZGVyKTtuLmFwcGVuZChpKSxyLmJsb2I9MD09PW4uZ2V0QmxvYihcImFwcGxpY2F0aW9uL3ppcFwiKS5zaXplfWNhdGNoKHQpe3IuYmxvYj0hMX19fXRyeXtyLm5vZGVzdHJlYW09ISF0KFwicmVhZGFibGUtc3RyZWFtXCIpLlJlYWRhYmxlfWNhdGNoKHQpe3Iubm9kZXN0cmVhbT0hMX19LHtcInJlYWRhYmxlLXN0cmVhbVwiOjE2fV0sMzE6W2Z1bmN0aW9uKHQsZSxzKXtcInVzZSBzdHJpY3RcIjtmb3IodmFyIG89dChcIi4vdXRpbHNcIiksaD10KFwiLi9zdXBwb3J0XCIpLHI9dChcIi4vbm9kZWpzVXRpbHNcIiksaT10KFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiKSx1PW5ldyBBcnJheSgyNTYpLG49MDtuPDI1NjtuKyspdVtuXT0yNTI8PW4/NjoyNDg8PW4/NToyNDA8PW4/NDoyMjQ8PW4/MzoxOTI8PW4/MjoxO3VbMjU0XT11WzI1NF09MTtmdW5jdGlvbiBhKCl7aS5jYWxsKHRoaXMsXCJ1dGYtOCBkZWNvZGVcIiksdGhpcy5sZWZ0T3Zlcj1udWxsfWZ1bmN0aW9uIGwoKXtpLmNhbGwodGhpcyxcInV0Zi04IGVuY29kZVwiKX1zLnV0ZjhlbmNvZGU9ZnVuY3Rpb24odCl7cmV0dXJuIGgubm9kZWJ1ZmZlcj9yLm5ld0J1ZmZlckZyb20odCxcInV0Zi04XCIpOmZ1bmN0aW9uKHQpe3ZhciBlLHIsaSxuLHMsYT10Lmxlbmd0aCxvPTA7Zm9yKG49MDtuPGE7bisrKTU1Mjk2PT0oNjQ1MTImKHI9dC5jaGFyQ29kZUF0KG4pKSkmJm4rMTxhJiY1NjMyMD09KDY0NTEyJihpPXQuY2hhckNvZGVBdChuKzEpKSkmJihyPTY1NTM2KyhyLTU1Mjk2PDwxMCkrKGktNTYzMjApLG4rKyksbys9cjwxMjg/MTpyPDIwNDg/MjpyPDY1NTM2PzM6NDtmb3IoZT1oLnVpbnQ4YXJyYXk/bmV3IFVpbnQ4QXJyYXkobyk6bmV3IEFycmF5KG8pLG49cz0wO3M8bztuKyspNTUyOTY9PSg2NDUxMiYocj10LmNoYXJDb2RlQXQobikpKSYmbisxPGEmJjU2MzIwPT0oNjQ1MTImKGk9dC5jaGFyQ29kZUF0KG4rMSkpKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsoaS01NjMyMCksbisrKSxyPDEyOD9lW3MrK109cjoocjwyMDQ4P2VbcysrXT0xOTJ8cj4+PjY6KHI8NjU1MzY/ZVtzKytdPTIyNHxyPj4+MTI6KGVbcysrXT0yNDB8cj4+PjE4LGVbcysrXT0xMjh8cj4+PjEyJjYzKSxlW3MrK109MTI4fHI+Pj42JjYzKSxlW3MrK109MTI4fDYzJnIpO3JldHVybiBlfSh0KX0scy51dGY4ZGVjb2RlPWZ1bmN0aW9uKHQpe3JldHVybiBoLm5vZGVidWZmZXI/by50cmFuc2Zvcm1UbyhcIm5vZGVidWZmZXJcIix0KS50b1N0cmluZyhcInV0Zi04XCIpOmZ1bmN0aW9uKHQpe3ZhciBlLHIsaSxuLHM9dC5sZW5ndGgsYT1uZXcgQXJyYXkoMipzKTtmb3IoZT1yPTA7ZTxzOylpZigoaT10W2UrK10pPDEyOClhW3IrK109aTtlbHNlIGlmKDQ8KG49dVtpXSkpYVtyKytdPTY1NTMzLGUrPW4tMTtlbHNle2ZvcihpJj0yPT09bj8zMTozPT09bj8xNTo3OzE8biYmZTxzOylpPWk8PDZ8NjMmdFtlKytdLG4tLTsxPG4/YVtyKytdPTY1NTMzOmk8NjU1MzY/YVtyKytdPWk6KGktPTY1NTM2LGFbcisrXT01NTI5NnxpPj4xMCYxMDIzLGFbcisrXT01NjMyMHwxMDIzJmkpfXJldHVybiBhLmxlbmd0aCE9PXImJihhLnN1YmFycmF5P2E9YS5zdWJhcnJheSgwLHIpOmEubGVuZ3RoPXIpLG8uYXBwbHlGcm9tQ2hhckNvZGUoYSl9KHQ9by50cmFuc2Zvcm1UbyhoLnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiLHQpKX0sby5pbmhlcml0cyhhLGkpLGEucHJvdG90eXBlLnByb2Nlc3NDaHVuaz1mdW5jdGlvbih0KXt2YXIgZT1vLnRyYW5zZm9ybVRvKGgudWludDhhcnJheT9cInVpbnQ4YXJyYXlcIjpcImFycmF5XCIsdC5kYXRhKTtpZih0aGlzLmxlZnRPdmVyJiZ0aGlzLmxlZnRPdmVyLmxlbmd0aCl7aWYoaC51aW50OGFycmF5KXt2YXIgcj1lOyhlPW5ldyBVaW50OEFycmF5KHIubGVuZ3RoK3RoaXMubGVmdE92ZXIubGVuZ3RoKSkuc2V0KHRoaXMubGVmdE92ZXIsMCksZS5zZXQocix0aGlzLmxlZnRPdmVyLmxlbmd0aCl9ZWxzZSBlPXRoaXMubGVmdE92ZXIuY29uY2F0KGUpO3RoaXMubGVmdE92ZXI9bnVsbH12YXIgaT1mdW5jdGlvbih0LGUpe3ZhciByO2ZvcigoZT1lfHx0Lmxlbmd0aCk+dC5sZW5ndGgmJihlPXQubGVuZ3RoKSxyPWUtMTswPD1yJiYxMjg9PSgxOTImdFtyXSk7KXItLTtyZXR1cm4gcjwwP2U6MD09PXI/ZTpyK3VbdFtyXV0+ZT9yOmV9KGUpLG49ZTtpIT09ZS5sZW5ndGgmJihoLnVpbnQ4YXJyYXk/KG49ZS5zdWJhcnJheSgwLGkpLHRoaXMubGVmdE92ZXI9ZS5zdWJhcnJheShpLGUubGVuZ3RoKSk6KG49ZS5zbGljZSgwLGkpLHRoaXMubGVmdE92ZXI9ZS5zbGljZShpLGUubGVuZ3RoKSkpLHRoaXMucHVzaCh7ZGF0YTpzLnV0ZjhkZWNvZGUobiksbWV0YTp0Lm1ldGF9KX0sYS5wcm90b3R5cGUuZmx1c2g9ZnVuY3Rpb24oKXt0aGlzLmxlZnRPdmVyJiZ0aGlzLmxlZnRPdmVyLmxlbmd0aCYmKHRoaXMucHVzaCh7ZGF0YTpzLnV0ZjhkZWNvZGUodGhpcy5sZWZ0T3ZlciksbWV0YTp7fX0pLHRoaXMubGVmdE92ZXI9bnVsbCl9LHMuVXRmOERlY29kZVdvcmtlcj1hLG8uaW5oZXJpdHMobCxpKSxsLnByb3RvdHlwZS5wcm9jZXNzQ2h1bms9ZnVuY3Rpb24odCl7dGhpcy5wdXNoKHtkYXRhOnMudXRmOGVuY29kZSh0LmRhdGEpLG1ldGE6dC5tZXRhfSl9LHMuVXRmOEVuY29kZVdvcmtlcj1sfSx7XCIuL25vZGVqc1V0aWxzXCI6MTQsXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCI6MjgsXCIuL3N1cHBvcnRcIjozMCxcIi4vdXRpbHNcIjozMn1dLDMyOltmdW5jdGlvbih0LGUsYSl7XCJ1c2Ugc3RyaWN0XCI7dmFyIG89dChcIi4vc3VwcG9ydFwiKSxoPXQoXCIuL2Jhc2U2NFwiKSxyPXQoXCIuL25vZGVqc1V0aWxzXCIpLGk9dChcInNldC1pbW1lZGlhdGUtc2hpbVwiKSx1PXQoXCIuL2V4dGVybmFsXCIpO2Z1bmN0aW9uIG4odCl7cmV0dXJuIHR9ZnVuY3Rpb24gbCh0LGUpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7KytyKWVbcl09MjU1JnQuY2hhckNvZGVBdChyKTtyZXR1cm4gZX1hLm5ld0Jsb2I9ZnVuY3Rpb24oZSxyKXthLmNoZWNrU3VwcG9ydChcImJsb2JcIik7dHJ5e3JldHVybiBuZXcgQmxvYihbZV0se3R5cGU6cn0pfWNhdGNoKHQpe3RyeXt2YXIgaT1uZXcoc2VsZi5CbG9iQnVpbGRlcnx8c2VsZi5XZWJLaXRCbG9iQnVpbGRlcnx8c2VsZi5Nb3pCbG9iQnVpbGRlcnx8c2VsZi5NU0Jsb2JCdWlsZGVyKTtyZXR1cm4gaS5hcHBlbmQoZSksaS5nZXRCbG9iKHIpfWNhdGNoKHQpe3Rocm93IG5ldyBFcnJvcihcIkJ1ZyA6IGNhbid0IGNvbnN0cnVjdCB0aGUgQmxvYi5cIil9fX07dmFyIHM9e3N0cmluZ2lmeUJ5Q2h1bms6ZnVuY3Rpb24odCxlLHIpe3ZhciBpPVtdLG49MCxzPXQubGVuZ3RoO2lmKHM8PXIpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCx0KTtmb3IoO248czspXCJhcnJheVwiPT09ZXx8XCJub2RlYnVmZmVyXCI9PT1lP2kucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsdC5zbGljZShuLE1hdGgubWluKG4rcixzKSkpKTppLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLHQuc3ViYXJyYXkobixNYXRoLm1pbihuK3IscykpKSksbis9cjtyZXR1cm4gaS5qb2luKFwiXCIpfSxzdHJpbmdpZnlCeUNoYXI6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVwiXCIscj0wO3I8dC5sZW5ndGg7cisrKWUrPVN0cmluZy5mcm9tQ2hhckNvZGUodFtyXSk7cmV0dXJuIGV9LGFwcGx5Q2FuQmVVc2VkOnt1aW50OGFycmF5OmZ1bmN0aW9uKCl7dHJ5e3JldHVybiBvLnVpbnQ4YXJyYXkmJjE9PT1TdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsbmV3IFVpbnQ4QXJyYXkoMSkpLmxlbmd0aH1jYXRjaCh0KXtyZXR1cm4hMX19KCksbm9kZWJ1ZmZlcjpmdW5jdGlvbigpe3RyeXtyZXR1cm4gby5ub2RlYnVmZmVyJiYxPT09U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLHIuYWxsb2NCdWZmZXIoMSkpLmxlbmd0aH1jYXRjaCh0KXtyZXR1cm4hMX19KCl9fTtmdW5jdGlvbiBmKHQpe3ZhciBlPTY1NTM2LHI9YS5nZXRUeXBlT2YodCksaT0hMDtpZihcInVpbnQ4YXJyYXlcIj09PXI/aT1zLmFwcGx5Q2FuQmVVc2VkLnVpbnQ4YXJyYXk6XCJub2RlYnVmZmVyXCI9PT1yJiYoaT1zLmFwcGx5Q2FuQmVVc2VkLm5vZGVidWZmZXIpLGkpZm9yKDsxPGU7KXRyeXtyZXR1cm4gcy5zdHJpbmdpZnlCeUNodW5rKHQscixlKX1jYXRjaCh0KXtlPU1hdGguZmxvb3IoZS8yKX1yZXR1cm4gcy5zdHJpbmdpZnlCeUNoYXIodCl9ZnVuY3Rpb24gZCh0LGUpe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKWVbcl09dFtyXTtyZXR1cm4gZX1hLmFwcGx5RnJvbUNoYXJDb2RlPWY7dmFyIGM9e307Yy5zdHJpbmc9e3N0cmluZzpuLGFycmF5OmZ1bmN0aW9uKHQpe3JldHVybiBsKHQsbmV3IEFycmF5KHQubGVuZ3RoKSl9LGFycmF5YnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiBjLnN0cmluZy51aW50OGFycmF5KHQpLmJ1ZmZlcn0sdWludDhhcnJheTpmdW5jdGlvbih0KXtyZXR1cm4gbCh0LG5ldyBVaW50OEFycmF5KHQubGVuZ3RoKSl9LG5vZGVidWZmZXI6ZnVuY3Rpb24odCl7cmV0dXJuIGwodCxyLmFsbG9jQnVmZmVyKHQubGVuZ3RoKSl9fSxjLmFycmF5PXtzdHJpbmc6ZixhcnJheTpuLGFycmF5YnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgVWludDhBcnJheSh0KS5idWZmZXJ9LHVpbnQ4YXJyYXk6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBVaW50OEFycmF5KHQpfSxub2RlYnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiByLm5ld0J1ZmZlckZyb20odCl9fSxjLmFycmF5YnVmZmVyPXtzdHJpbmc6ZnVuY3Rpb24odCl7cmV0dXJuIGYobmV3IFVpbnQ4QXJyYXkodCkpfSxhcnJheTpmdW5jdGlvbih0KXtyZXR1cm4gZChuZXcgVWludDhBcnJheSh0KSxuZXcgQXJyYXkodC5ieXRlTGVuZ3RoKSl9LGFycmF5YnVmZmVyOm4sdWludDhhcnJheTpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkodCl9LG5vZGVidWZmZXI6ZnVuY3Rpb24odCl7cmV0dXJuIHIubmV3QnVmZmVyRnJvbShuZXcgVWludDhBcnJheSh0KSl9fSxjLnVpbnQ4YXJyYXk9e3N0cmluZzpmLGFycmF5OmZ1bmN0aW9uKHQpe3JldHVybiBkKHQsbmV3IEFycmF5KHQubGVuZ3RoKSl9LGFycmF5YnVmZmVyOmZ1bmN0aW9uKHQpe3JldHVybiB0LmJ1ZmZlcn0sdWludDhhcnJheTpuLG5vZGVidWZmZXI6ZnVuY3Rpb24odCl7cmV0dXJuIHIubmV3QnVmZmVyRnJvbSh0KX19LGMubm9kZWJ1ZmZlcj17c3RyaW5nOmYsYXJyYXk6ZnVuY3Rpb24odCl7cmV0dXJuIGQodCxuZXcgQXJyYXkodC5sZW5ndGgpKX0sYXJyYXlidWZmZXI6ZnVuY3Rpb24odCl7cmV0dXJuIGMubm9kZWJ1ZmZlci51aW50OGFycmF5KHQpLmJ1ZmZlcn0sdWludDhhcnJheTpmdW5jdGlvbih0KXtyZXR1cm4gZCh0LG5ldyBVaW50OEFycmF5KHQubGVuZ3RoKSl9LG5vZGVidWZmZXI6bn0sYS50cmFuc2Zvcm1Ubz1mdW5jdGlvbih0LGUpe2lmKGU9ZXx8XCJcIiwhdClyZXR1cm4gZTthLmNoZWNrU3VwcG9ydCh0KTt2YXIgcj1hLmdldFR5cGVPZihlKTtyZXR1cm4gY1tyXVt0XShlKX0sYS5nZXRUeXBlT2Y9ZnVuY3Rpb24odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/XCJzdHJpbmdcIjpcIltvYmplY3QgQXJyYXldXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCk/XCJhcnJheVwiOm8ubm9kZWJ1ZmZlciYmci5pc0J1ZmZlcih0KT9cIm5vZGVidWZmZXJcIjpvLnVpbnQ4YXJyYXkmJnQgaW5zdGFuY2VvZiBVaW50OEFycmF5P1widWludDhhcnJheVwiOm8uYXJyYXlidWZmZXImJnQgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcj9cImFycmF5YnVmZmVyXCI6dm9pZCAwfSxhLmNoZWNrU3VwcG9ydD1mdW5jdGlvbih0KXtpZighb1t0LnRvTG93ZXJDYXNlKCldKXRocm93IG5ldyBFcnJvcih0K1wiIGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhpcyBwbGF0Zm9ybVwiKX0sYS5NQVhfVkFMVUVfMTZCSVRTPTY1NTM1LGEuTUFYX1ZBTFVFXzMyQklUUz0tMSxhLnByZXR0eT1mdW5jdGlvbih0KXt2YXIgZSxyLGk9XCJcIjtmb3Iocj0wO3I8KHR8fFwiXCIpLmxlbmd0aDtyKyspaSs9XCJcXFxceFwiKygoZT10LmNoYXJDb2RlQXQocikpPDE2P1wiMFwiOlwiXCIpK2UudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7cmV0dXJuIGl9LGEuZGVsYXk9ZnVuY3Rpb24odCxlLHIpe2koZnVuY3Rpb24oKXt0LmFwcGx5KHJ8fG51bGwsZXx8W10pfSl9LGEuaW5oZXJpdHM9ZnVuY3Rpb24odCxlKXtmdW5jdGlvbiByKCl7fXIucHJvdG90eXBlPWUucHJvdG90eXBlLHQucHJvdG90eXBlPW5ldyByfSxhLmV4dGVuZD1mdW5jdGlvbigpe3ZhciB0LGUscj17fTtmb3IodD0wO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZm9yKGUgaW4gYXJndW1lbnRzW3RdKWFyZ3VtZW50c1t0XS5oYXNPd25Qcm9wZXJ0eShlKSYmdm9pZCAwPT09cltlXSYmKHJbZV09YXJndW1lbnRzW3RdW2VdKTtyZXR1cm4gcn0sYS5wcmVwYXJlQ29udGVudD1mdW5jdGlvbihyLHQsaSxuLHMpe3JldHVybiB1LlByb21pc2UucmVzb2x2ZSh0KS50aGVuKGZ1bmN0aW9uKGkpe3JldHVybiBvLmJsb2ImJihpIGluc3RhbmNlb2YgQmxvYnx8LTEhPT1bXCJbb2JqZWN0IEZpbGVdXCIsXCJbb2JqZWN0IEJsb2JdXCJdLmluZGV4T2YoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGkpKSkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBGaWxlUmVhZGVyP25ldyB1LlByb21pc2UoZnVuY3Rpb24oZSxyKXt2YXIgdD1uZXcgRmlsZVJlYWRlcjt0Lm9ubG9hZD1mdW5jdGlvbih0KXtlKHQudGFyZ2V0LnJlc3VsdCl9LHQub25lcnJvcj1mdW5jdGlvbih0KXtyKHQudGFyZ2V0LmVycm9yKX0sdC5yZWFkQXNBcnJheUJ1ZmZlcihpKX0pOml9KS50aGVuKGZ1bmN0aW9uKHQpe3ZhciBlPWEuZ2V0VHlwZU9mKHQpO3JldHVybiBlPyhcImFycmF5YnVmZmVyXCI9PT1lP3Q9YS50cmFuc2Zvcm1UbyhcInVpbnQ4YXJyYXlcIix0KTpcInN0cmluZ1wiPT09ZSYmKHM/dD1oLmRlY29kZSh0KTppJiYhMCE9PW4mJih0PWZ1bmN0aW9uKHQpe3JldHVybiBsKHQsby51aW50OGFycmF5P25ldyBVaW50OEFycmF5KHQubGVuZ3RoKTpuZXcgQXJyYXkodC5sZW5ndGgpKX0odCkpKSx0KTp1LlByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkNhbid0IHJlYWQgdGhlIGRhdGEgb2YgJ1wiK3IrXCInLiBJcyBpdCBpbiBhIHN1cHBvcnRlZCBKYXZhU2NyaXB0IHR5cGUgKFN0cmluZywgQmxvYiwgQXJyYXlCdWZmZXIsIGV0YykgP1wiKSl9KX19LHtcIi4vYmFzZTY0XCI6MSxcIi4vZXh0ZXJuYWxcIjo2LFwiLi9ub2RlanNVdGlsc1wiOjE0LFwiLi9zdXBwb3J0XCI6MzAsXCJzZXQtaW1tZWRpYXRlLXNoaW1cIjo1NH1dLDMzOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vcmVhZGVyL3JlYWRlckZvclwiKSxuPXQoXCIuL3V0aWxzXCIpLHM9dChcIi4vc2lnbmF0dXJlXCIpLGE9dChcIi4vemlwRW50cnlcIiksbz0odChcIi4vdXRmOFwiKSx0KFwiLi9zdXBwb3J0XCIpKTtmdW5jdGlvbiBoKHQpe3RoaXMuZmlsZXM9W10sdGhpcy5sb2FkT3B0aW9ucz10fWgucHJvdG90eXBlPXtjaGVja1NpZ25hdHVyZTpmdW5jdGlvbih0KXtpZighdGhpcy5yZWFkZXIucmVhZEFuZENoZWNrU2lnbmF0dXJlKHQpKXt0aGlzLnJlYWRlci5pbmRleC09NDt2YXIgZT10aGlzLnJlYWRlci5yZWFkU3RyaW5nKDQpO3Rocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXAgb3IgYnVnOiB1bmV4cGVjdGVkIHNpZ25hdHVyZSAoXCIrbi5wcmV0dHkoZSkrXCIsIGV4cGVjdGVkIFwiK24ucHJldHR5KHQpK1wiKVwiKX19LGlzU2lnbmF0dXJlOmZ1bmN0aW9uKHQsZSl7dmFyIHI9dGhpcy5yZWFkZXIuaW5kZXg7dGhpcy5yZWFkZXIuc2V0SW5kZXgodCk7dmFyIGk9dGhpcy5yZWFkZXIucmVhZFN0cmluZyg0KT09PWU7cmV0dXJuIHRoaXMucmVhZGVyLnNldEluZGV4KHIpLGl9LHJlYWRCbG9ja0VuZE9mQ2VudHJhbDpmdW5jdGlvbigpe3RoaXMuZGlza051bWJlcj10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQ9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz10aGlzLnJlYWRlci5yZWFkSW50KDIpLHRoaXMuY2VudHJhbERpclJlY29yZHM9dGhpcy5yZWFkZXIucmVhZEludCgyKSx0aGlzLmNlbnRyYWxEaXJTaXplPXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy5jZW50cmFsRGlyT2Zmc2V0PXRoaXMucmVhZGVyLnJlYWRJbnQoNCksdGhpcy56aXBDb21tZW50TGVuZ3RoPXRoaXMucmVhZGVyLnJlYWRJbnQoMik7dmFyIHQ9dGhpcy5yZWFkZXIucmVhZERhdGEodGhpcy56aXBDb21tZW50TGVuZ3RoKSxlPW8udWludDhhcnJheT9cInVpbnQ4YXJyYXlcIjpcImFycmF5XCIscj1uLnRyYW5zZm9ybVRvKGUsdCk7dGhpcy56aXBDb21tZW50PXRoaXMubG9hZE9wdGlvbnMuZGVjb2RlRmlsZU5hbWUocil9LHJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsOmZ1bmN0aW9uKCl7dGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemU9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLnJlYWRlci5za2lwKDQpLHRoaXMuZGlza051bWJlcj10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMuZGlza1dpdGhDZW50cmFsRGlyU3RhcnQ9dGhpcy5yZWFkZXIucmVhZEludCg0KSx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuY2VudHJhbERpclJlY29yZHM9dGhpcy5yZWFkZXIucmVhZEludCg4KSx0aGlzLmNlbnRyYWxEaXJTaXplPXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy5jZW50cmFsRGlyT2Zmc2V0PXRoaXMucmVhZGVyLnJlYWRJbnQoOCksdGhpcy56aXA2NEV4dGVuc2libGVEYXRhPXt9O2Zvcih2YXIgdCxlLHIsaT10aGlzLnppcDY0RW5kT2ZDZW50cmFsU2l6ZS00NDswPGk7KXQ9dGhpcy5yZWFkZXIucmVhZEludCgyKSxlPXRoaXMucmVhZGVyLnJlYWRJbnQoNCkscj10aGlzLnJlYWRlci5yZWFkRGF0YShlKSx0aGlzLnppcDY0RXh0ZW5zaWJsZURhdGFbdF09e2lkOnQsbGVuZ3RoOmUsdmFsdWU6cn19LHJlYWRCbG9ja1ppcDY0RW5kT2ZDZW50cmFsTG9jYXRvcjpmdW5jdGlvbigpe2lmKHRoaXMuZGlza1dpdGhaaXA2NENlbnRyYWxEaXJTdGFydD10aGlzLnJlYWRlci5yZWFkSW50KDQpLHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcj10aGlzLnJlYWRlci5yZWFkSW50KDgpLHRoaXMuZGlza3NDb3VudD10aGlzLnJlYWRlci5yZWFkSW50KDQpLDE8dGhpcy5kaXNrc0NvdW50KXRocm93IG5ldyBFcnJvcihcIk11bHRpLXZvbHVtZXMgemlwIGFyZSBub3Qgc3VwcG9ydGVkXCIpfSxyZWFkTG9jYWxGaWxlczpmdW5jdGlvbigpe3ZhciB0LGU7Zm9yKHQ9MDt0PHRoaXMuZmlsZXMubGVuZ3RoO3QrKyllPXRoaXMuZmlsZXNbdF0sdGhpcy5yZWFkZXIuc2V0SW5kZXgoZS5sb2NhbEhlYWRlck9mZnNldCksdGhpcy5jaGVja1NpZ25hdHVyZShzLkxPQ0FMX0ZJTEVfSEVBREVSKSxlLnJlYWRMb2NhbFBhcnQodGhpcy5yZWFkZXIpLGUuaGFuZGxlVVRGOCgpLGUucHJvY2Vzc0F0dHJpYnV0ZXMoKX0scmVhZENlbnRyYWxEaXI6ZnVuY3Rpb24oKXt2YXIgdDtmb3IodGhpcy5yZWFkZXIuc2V0SW5kZXgodGhpcy5jZW50cmFsRGlyT2Zmc2V0KTt0aGlzLnJlYWRlci5yZWFkQW5kQ2hlY2tTaWduYXR1cmUocy5DRU5UUkFMX0ZJTEVfSEVBREVSKTspKHQ9bmV3IGEoe3ppcDY0OnRoaXMuemlwNjR9LHRoaXMubG9hZE9wdGlvbnMpKS5yZWFkQ2VudHJhbFBhcnQodGhpcy5yZWFkZXIpLHRoaXMuZmlsZXMucHVzaCh0KTtpZih0aGlzLmNlbnRyYWxEaXJSZWNvcmRzIT09dGhpcy5maWxlcy5sZW5ndGgmJjAhPT10aGlzLmNlbnRyYWxEaXJSZWNvcmRzJiYwPT09dGhpcy5maWxlcy5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcCBvciBidWc6IGV4cGVjdGVkIFwiK3RoaXMuY2VudHJhbERpclJlY29yZHMrXCIgcmVjb3JkcyBpbiBjZW50cmFsIGRpciwgZ290IFwiK3RoaXMuZmlsZXMubGVuZ3RoKX0scmVhZEVuZE9mQ2VudHJhbDpmdW5jdGlvbigpe3ZhciB0PXRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHMuQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKTtpZih0PDApdGhyb3chdGhpcy5pc1NpZ25hdHVyZSgwLHMuTE9DQUxfRklMRV9IRUFERVIpP25ldyBFcnJvcihcIkNhbid0IGZpbmQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IDogaXMgdGhpcyBhIHppcCBmaWxlID8gSWYgaXQgaXMsIHNlZSBodHRwczovL3N0dWsuZ2l0aHViLmlvL2pzemlwL2RvY3VtZW50YXRpb24vaG93dG8vcmVhZF96aXAuaHRtbFwiKTpuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwOiBjYW4ndCBmaW5kIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTt0aGlzLnJlYWRlci5zZXRJbmRleCh0KTt2YXIgZT10O2lmKHRoaXMuY2hlY2tTaWduYXR1cmUocy5DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLHRoaXMucmVhZEJsb2NrRW5kT2ZDZW50cmFsKCksdGhpcy5kaXNrTnVtYmVyPT09bi5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmRpc2tXaXRoQ2VudHJhbERpclN0YXJ0PT09bi5NQVhfVkFMVUVfMTZCSVRTfHx0aGlzLmNlbnRyYWxEaXJSZWNvcmRzT25UaGlzRGlzaz09PW4uTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5jZW50cmFsRGlyUmVjb3Jkcz09PW4uTUFYX1ZBTFVFXzE2QklUU3x8dGhpcy5jZW50cmFsRGlyU2l6ZT09PW4uTUFYX1ZBTFVFXzMyQklUU3x8dGhpcy5jZW50cmFsRGlyT2Zmc2V0PT09bi5NQVhfVkFMVUVfMzJCSVRTKXtpZih0aGlzLnppcDY0PSEwLCh0PXRoaXMucmVhZGVyLmxhc3RJbmRleE9mU2lnbmF0dXJlKHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfTE9DQVRPUikpPDApdGhyb3cgbmV3IEVycm9yKFwiQ29ycnVwdGVkIHppcDogY2FuJ3QgZmluZCB0aGUgWklQNjQgZW5kIG9mIGNlbnRyYWwgZGlyZWN0b3J5IGxvY2F0b3JcIik7aWYodGhpcy5yZWFkZXIuc2V0SW5kZXgodCksdGhpcy5jaGVja1NpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0xPQ0FUT1IpLHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWxMb2NhdG9yKCksIXRoaXMuaXNTaWduYXR1cmUodGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyLHMuWklQNjRfQ0VOVFJBTF9ESVJFQ1RPUllfRU5EKSYmKHRoaXMucmVsYXRpdmVPZmZzZXRFbmRPZlppcDY0Q2VudHJhbERpcj10aGlzLnJlYWRlci5sYXN0SW5kZXhPZlNpZ25hdHVyZShzLlpJUDY0X0NFTlRSQUxfRElSRUNUT1JZX0VORCksdGhpcy5yZWxhdGl2ZU9mZnNldEVuZE9mWmlwNjRDZW50cmFsRGlyPDApKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IGNhbid0IGZpbmQgdGhlIFpJUDY0IGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVwiKTt0aGlzLnJlYWRlci5zZXRJbmRleCh0aGlzLnJlbGF0aXZlT2Zmc2V0RW5kT2ZaaXA2NENlbnRyYWxEaXIpLHRoaXMuY2hlY2tTaWduYXR1cmUocy5aSVA2NF9DRU5UUkFMX0RJUkVDVE9SWV9FTkQpLHRoaXMucmVhZEJsb2NrWmlwNjRFbmRPZkNlbnRyYWwoKX12YXIgcj10aGlzLmNlbnRyYWxEaXJPZmZzZXQrdGhpcy5jZW50cmFsRGlyU2l6ZTt0aGlzLnppcDY0JiYocis9MjAscis9MTIrdGhpcy56aXA2NEVuZE9mQ2VudHJhbFNpemUpO3ZhciBpPWUtcjtpZigwPGkpdGhpcy5pc1NpZ25hdHVyZShlLHMuQ0VOVFJBTF9GSUxFX0hFQURFUil8fCh0aGlzLnJlYWRlci56ZXJvPWkpO2Vsc2UgaWYoaTwwKXRocm93IG5ldyBFcnJvcihcIkNvcnJ1cHRlZCB6aXA6IG1pc3NpbmcgXCIrTWF0aC5hYnMoaSkrXCIgYnl0ZXMuXCIpfSxwcmVwYXJlUmVhZGVyOmZ1bmN0aW9uKHQpe3RoaXMucmVhZGVyPWkodCl9LGxvYWQ6ZnVuY3Rpb24odCl7dGhpcy5wcmVwYXJlUmVhZGVyKHQpLHRoaXMucmVhZEVuZE9mQ2VudHJhbCgpLHRoaXMucmVhZENlbnRyYWxEaXIoKSx0aGlzLnJlYWRMb2NhbEZpbGVzKCl9fSxlLmV4cG9ydHM9aH0se1wiLi9yZWFkZXIvcmVhZGVyRm9yXCI6MjIsXCIuL3NpZ25hdHVyZVwiOjIzLFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0ZjhcIjozMSxcIi4vdXRpbHNcIjozMixcIi4vemlwRW50cnlcIjozNH1dLDM0OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGk9dChcIi4vcmVhZGVyL3JlYWRlckZvclwiKSxzPXQoXCIuL3V0aWxzXCIpLG49dChcIi4vY29tcHJlc3NlZE9iamVjdFwiKSxhPXQoXCIuL2NyYzMyXCIpLG89dChcIi4vdXRmOFwiKSxoPXQoXCIuL2NvbXByZXNzaW9uc1wiKSx1PXQoXCIuL3N1cHBvcnRcIik7ZnVuY3Rpb24gbCh0LGUpe3RoaXMub3B0aW9ucz10LHRoaXMubG9hZE9wdGlvbnM9ZX1sLnByb3RvdHlwZT17aXNFbmNyeXB0ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gMT09KDEmdGhpcy5iaXRGbGFnKX0sdXNlVVRGODpmdW5jdGlvbigpe3JldHVybiAyMDQ4PT0oMjA0OCZ0aGlzLmJpdEZsYWcpfSxyZWFkTG9jYWxQYXJ0OmZ1bmN0aW9uKHQpe3ZhciBlLHI7aWYodC5za2lwKDIyKSx0aGlzLmZpbGVOYW1lTGVuZ3RoPXQucmVhZEludCgyKSxyPXQucmVhZEludCgyKSx0aGlzLmZpbGVOYW1lPXQucmVhZERhdGEodGhpcy5maWxlTmFtZUxlbmd0aCksdC5za2lwKHIpLC0xPT09dGhpcy5jb21wcmVzc2VkU2l6ZXx8LTE9PT10aGlzLnVuY29tcHJlc3NlZFNpemUpdGhyb3cgbmV3IEVycm9yKFwiQnVnIG9yIGNvcnJ1cHRlZCB6aXAgOiBkaWRuJ3QgZ2V0IGVub3VnaCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBjZW50cmFsIGRpcmVjdG9yeSAoY29tcHJlc3NlZFNpemUgPT09IC0xIHx8IHVuY29tcHJlc3NlZFNpemUgPT09IC0xKVwiKTtpZihudWxsPT09KGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShlKSYmaFtlXS5tYWdpYz09PXQpcmV0dXJuIGhbZV07cmV0dXJuIG51bGx9KHRoaXMuY29tcHJlc3Npb25NZXRob2QpKSl0aHJvdyBuZXcgRXJyb3IoXCJDb3JydXB0ZWQgemlwIDogY29tcHJlc3Npb24gXCIrcy5wcmV0dHkodGhpcy5jb21wcmVzc2lvbk1ldGhvZCkrXCIgdW5rbm93biAoaW5uZXIgZmlsZSA6IFwiK3MudHJhbnNmb3JtVG8oXCJzdHJpbmdcIix0aGlzLmZpbGVOYW1lKStcIilcIik7dGhpcy5kZWNvbXByZXNzZWQ9bmV3IG4odGhpcy5jb21wcmVzc2VkU2l6ZSx0aGlzLnVuY29tcHJlc3NlZFNpemUsdGhpcy5jcmMzMixlLHQucmVhZERhdGEodGhpcy5jb21wcmVzc2VkU2l6ZSkpfSxyZWFkQ2VudHJhbFBhcnQ6ZnVuY3Rpb24odCl7dGhpcy52ZXJzaW9uTWFkZUJ5PXQucmVhZEludCgyKSx0LnNraXAoMiksdGhpcy5iaXRGbGFnPXQucmVhZEludCgyKSx0aGlzLmNvbXByZXNzaW9uTWV0aG9kPXQucmVhZFN0cmluZygyKSx0aGlzLmRhdGU9dC5yZWFkRGF0ZSgpLHRoaXMuY3JjMzI9dC5yZWFkSW50KDQpLHRoaXMuY29tcHJlc3NlZFNpemU9dC5yZWFkSW50KDQpLHRoaXMudW5jb21wcmVzc2VkU2l6ZT10LnJlYWRJbnQoNCk7dmFyIGU9dC5yZWFkSW50KDIpO2lmKHRoaXMuZXh0cmFGaWVsZHNMZW5ndGg9dC5yZWFkSW50KDIpLHRoaXMuZmlsZUNvbW1lbnRMZW5ndGg9dC5yZWFkSW50KDIpLHRoaXMuZGlza051bWJlclN0YXJ0PXQucmVhZEludCgyKSx0aGlzLmludGVybmFsRmlsZUF0dHJpYnV0ZXM9dC5yZWFkSW50KDIpLHRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcz10LnJlYWRJbnQoNCksdGhpcy5sb2NhbEhlYWRlck9mZnNldD10LnJlYWRJbnQoNCksdGhpcy5pc0VuY3J5cHRlZCgpKXRocm93IG5ldyBFcnJvcihcIkVuY3J5cHRlZCB6aXAgYXJlIG5vdCBzdXBwb3J0ZWRcIik7dC5za2lwKGUpLHRoaXMucmVhZEV4dHJhRmllbGRzKHQpLHRoaXMucGFyc2VaSVA2NEV4dHJhRmllbGQodCksdGhpcy5maWxlQ29tbWVudD10LnJlYWREYXRhKHRoaXMuZmlsZUNvbW1lbnRMZW5ndGgpfSxwcm9jZXNzQXR0cmlidXRlczpmdW5jdGlvbigpe3RoaXMudW5peFBlcm1pc3Npb25zPW51bGwsdGhpcy5kb3NQZXJtaXNzaW9ucz1udWxsO3ZhciB0PXRoaXMudmVyc2lvbk1hZGVCeT4+ODt0aGlzLmRpcj0hISgxNiZ0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMpLDA9PXQmJih0aGlzLmRvc1Blcm1pc3Npb25zPTYzJnRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyksMz09dCYmKHRoaXMudW5peFBlcm1pc3Npb25zPXRoaXMuZXh0ZXJuYWxGaWxlQXR0cmlidXRlcz4+MTYmNjU1MzUpLHRoaXMuZGlyfHxcIi9cIiE9PXRoaXMuZmlsZU5hbWVTdHIuc2xpY2UoLTEpfHwodGhpcy5kaXI9ITApfSxwYXJzZVpJUDY0RXh0cmFGaWVsZDpmdW5jdGlvbih0KXtpZih0aGlzLmV4dHJhRmllbGRzWzFdKXt2YXIgZT1pKHRoaXMuZXh0cmFGaWVsZHNbMV0udmFsdWUpO3RoaXMudW5jb21wcmVzc2VkU2l6ZT09PXMuTUFYX1ZBTFVFXzMyQklUUyYmKHRoaXMudW5jb21wcmVzc2VkU2l6ZT1lLnJlYWRJbnQoOCkpLHRoaXMuY29tcHJlc3NlZFNpemU9PT1zLk1BWF9WQUxVRV8zMkJJVFMmJih0aGlzLmNvbXByZXNzZWRTaXplPWUucmVhZEludCg4KSksdGhpcy5sb2NhbEhlYWRlck9mZnNldD09PXMuTUFYX1ZBTFVFXzMyQklUUyYmKHRoaXMubG9jYWxIZWFkZXJPZmZzZXQ9ZS5yZWFkSW50KDgpKSx0aGlzLmRpc2tOdW1iZXJTdGFydD09PXMuTUFYX1ZBTFVFXzMyQklUUyYmKHRoaXMuZGlza051bWJlclN0YXJ0PWUucmVhZEludCg0KSl9fSxyZWFkRXh0cmFGaWVsZHM6ZnVuY3Rpb24odCl7dmFyIGUscixpLG49dC5pbmRleCt0aGlzLmV4dHJhRmllbGRzTGVuZ3RoO2Zvcih0aGlzLmV4dHJhRmllbGRzfHwodGhpcy5leHRyYUZpZWxkcz17fSk7dC5pbmRleCs0PG47KWU9dC5yZWFkSW50KDIpLHI9dC5yZWFkSW50KDIpLGk9dC5yZWFkRGF0YShyKSx0aGlzLmV4dHJhRmllbGRzW2VdPXtpZDplLGxlbmd0aDpyLHZhbHVlOml9O3Quc2V0SW5kZXgobil9LGhhbmRsZVVURjg6ZnVuY3Rpb24oKXt2YXIgdD11LnVpbnQ4YXJyYXk/XCJ1aW50OGFycmF5XCI6XCJhcnJheVwiO2lmKHRoaXMudXNlVVRGOCgpKXRoaXMuZmlsZU5hbWVTdHI9by51dGY4ZGVjb2RlKHRoaXMuZmlsZU5hbWUpLHRoaXMuZmlsZUNvbW1lbnRTdHI9by51dGY4ZGVjb2RlKHRoaXMuZmlsZUNvbW1lbnQpO2Vsc2V7dmFyIGU9dGhpcy5maW5kRXh0cmFGaWVsZFVuaWNvZGVQYXRoKCk7aWYobnVsbCE9PWUpdGhpcy5maWxlTmFtZVN0cj1lO2Vsc2V7dmFyIHI9cy50cmFuc2Zvcm1Ubyh0LHRoaXMuZmlsZU5hbWUpO3RoaXMuZmlsZU5hbWVTdHI9dGhpcy5sb2FkT3B0aW9ucy5kZWNvZGVGaWxlTmFtZShyKX12YXIgaT10aGlzLmZpbmRFeHRyYUZpZWxkVW5pY29kZUNvbW1lbnQoKTtpZihudWxsIT09aSl0aGlzLmZpbGVDb21tZW50U3RyPWk7ZWxzZXt2YXIgbj1zLnRyYW5zZm9ybVRvKHQsdGhpcy5maWxlQ29tbWVudCk7dGhpcy5maWxlQ29tbWVudFN0cj10aGlzLmxvYWRPcHRpb25zLmRlY29kZUZpbGVOYW1lKG4pfX19LGZpbmRFeHRyYUZpZWxkVW5pY29kZVBhdGg6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmV4dHJhRmllbGRzWzI4Nzg5XTtpZih0KXt2YXIgZT1pKHQudmFsdWUpO3JldHVybiAxIT09ZS5yZWFkSW50KDEpP251bGw6YSh0aGlzLmZpbGVOYW1lKSE9PWUucmVhZEludCg0KT9udWxsOm8udXRmOGRlY29kZShlLnJlYWREYXRhKHQubGVuZ3RoLTUpKX1yZXR1cm4gbnVsbH0sZmluZEV4dHJhRmllbGRVbmljb2RlQ29tbWVudDpmdW5jdGlvbigpe3ZhciB0PXRoaXMuZXh0cmFGaWVsZHNbMjU0NjFdO2lmKHQpe3ZhciBlPWkodC52YWx1ZSk7cmV0dXJuIDEhPT1lLnJlYWRJbnQoMSk/bnVsbDphKHRoaXMuZmlsZUNvbW1lbnQpIT09ZS5yZWFkSW50KDQpP251bGw6by51dGY4ZGVjb2RlKGUucmVhZERhdGEodC5sZW5ndGgtNSkpfXJldHVybiBudWxsfX0sZS5leHBvcnRzPWx9LHtcIi4vY29tcHJlc3NlZE9iamVjdFwiOjIsXCIuL2NvbXByZXNzaW9uc1wiOjMsXCIuL2NyYzMyXCI6NCxcIi4vcmVhZGVyL3JlYWRlckZvclwiOjIyLFwiLi9zdXBwb3J0XCI6MzAsXCIuL3V0ZjhcIjozMSxcIi4vdXRpbHNcIjozMn1dLDM1OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gaSh0LGUscil7dGhpcy5uYW1lPXQsdGhpcy5kaXI9ci5kaXIsdGhpcy5kYXRlPXIuZGF0ZSx0aGlzLmNvbW1lbnQ9ci5jb21tZW50LHRoaXMudW5peFBlcm1pc3Npb25zPXIudW5peFBlcm1pc3Npb25zLHRoaXMuZG9zUGVybWlzc2lvbnM9ci5kb3NQZXJtaXNzaW9ucyx0aGlzLl9kYXRhPWUsdGhpcy5fZGF0YUJpbmFyeT1yLmJpbmFyeSx0aGlzLm9wdGlvbnM9e2NvbXByZXNzaW9uOnIuY29tcHJlc3Npb24sY29tcHJlc3Npb25PcHRpb25zOnIuY29tcHJlc3Npb25PcHRpb25zfX12YXIgcz10KFwiLi9zdHJlYW0vU3RyZWFtSGVscGVyXCIpLG49dChcIi4vc3RyZWFtL0RhdGFXb3JrZXJcIiksYT10KFwiLi91dGY4XCIpLG89dChcIi4vY29tcHJlc3NlZE9iamVjdFwiKSxoPXQoXCIuL3N0cmVhbS9HZW5lcmljV29ya2VyXCIpO2kucHJvdG90eXBlPXtpbnRlcm5hbFN0cmVhbTpmdW5jdGlvbih0KXt2YXIgZT1udWxsLHI9XCJzdHJpbmdcIjt0cnl7aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwiTm8gb3V0cHV0IHR5cGUgc3BlY2lmaWVkLlwiKTt2YXIgaT1cInN0cmluZ1wiPT09KHI9dC50b0xvd2VyQ2FzZSgpKXx8XCJ0ZXh0XCI9PT1yO1wiYmluYXJ5c3RyaW5nXCIhPT1yJiZcInRleHRcIiE9PXJ8fChyPVwic3RyaW5nXCIpLGU9dGhpcy5fZGVjb21wcmVzc1dvcmtlcigpO3ZhciBuPSF0aGlzLl9kYXRhQmluYXJ5O24mJiFpJiYoZT1lLnBpcGUobmV3IGEuVXRmOEVuY29kZVdvcmtlcikpLCFuJiZpJiYoZT1lLnBpcGUobmV3IGEuVXRmOERlY29kZVdvcmtlcikpfWNhdGNoKHQpeyhlPW5ldyBoKFwiZXJyb3JcIikpLmVycm9yKHQpfXJldHVybiBuZXcgcyhlLHIsXCJcIil9LGFzeW5jOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuaW50ZXJuYWxTdHJlYW0odCkuYWNjdW11bGF0ZShlKX0sbm9kZVN0cmVhbTpmdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmludGVybmFsU3RyZWFtKHR8fFwibm9kZWJ1ZmZlclwiKS50b05vZGVqc1N0cmVhbShlKX0sX2NvbXByZXNzV29ya2VyOmZ1bmN0aW9uKHQsZSl7aWYodGhpcy5fZGF0YSBpbnN0YW5jZW9mIG8mJnRoaXMuX2RhdGEuY29tcHJlc3Npb24ubWFnaWM9PT10Lm1hZ2ljKXJldHVybiB0aGlzLl9kYXRhLmdldENvbXByZXNzZWRXb3JrZXIoKTt2YXIgcj10aGlzLl9kZWNvbXByZXNzV29ya2VyKCk7cmV0dXJuIHRoaXMuX2RhdGFCaW5hcnl8fChyPXIucGlwZShuZXcgYS5VdGY4RW5jb2RlV29ya2VyKSksby5jcmVhdGVXb3JrZXJGcm9tKHIsdCxlKX0sX2RlY29tcHJlc3NXb3JrZXI6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YSBpbnN0YW5jZW9mIG8/dGhpcy5fZGF0YS5nZXRDb250ZW50V29ya2VyKCk6dGhpcy5fZGF0YSBpbnN0YW5jZW9mIGg/dGhpcy5fZGF0YTpuZXcgbih0aGlzLl9kYXRhKX19O2Zvcih2YXIgdT1bXCJhc1RleHRcIixcImFzQmluYXJ5XCIsXCJhc05vZGVCdWZmZXJcIixcImFzVWludDhBcnJheVwiLFwiYXNBcnJheUJ1ZmZlclwiXSxsPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiVGhpcyBtZXRob2QgaGFzIGJlZW4gcmVtb3ZlZCBpbiBKU1ppcCAzLjAsIHBsZWFzZSBjaGVjayB0aGUgdXBncmFkZSBndWlkZS5cIil9LGY9MDtmPHUubGVuZ3RoO2YrKylpLnByb3RvdHlwZVt1W2ZdXT1sO2UuZXhwb3J0cz1pfSx7XCIuL2NvbXByZXNzZWRPYmplY3RcIjoyLFwiLi9zdHJlYW0vRGF0YVdvcmtlclwiOjI3LFwiLi9zdHJlYW0vR2VuZXJpY1dvcmtlclwiOjI4LFwiLi9zdHJlYW0vU3RyZWFtSGVscGVyXCI6MjksXCIuL3V0ZjhcIjozMX1dLDM2OltmdW5jdGlvbih0LGwsZSl7KGZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO3ZhciByLGksdD1lLk11dGF0aW9uT2JzZXJ2ZXJ8fGUuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtpZih0KXt2YXIgbj0wLHM9bmV3IHQodSksYT1lLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO3Mub2JzZXJ2ZShhLHtjaGFyYWN0ZXJEYXRhOiEwfSkscj1mdW5jdGlvbigpe2EuZGF0YT1uPSsrbiUyfX1lbHNlIGlmKGUuc2V0SW1tZWRpYXRlfHx2b2lkIDA9PT1lLk1lc3NhZ2VDaGFubmVsKXI9XCJkb2N1bWVudFwiaW4gZSYmXCJvbnJlYWR5c3RhdGVjaGFuZ2VcImluIGUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKT9mdW5jdGlvbigpe3ZhciB0PWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTt0Lm9ucmVhZHlzdGF0ZWNoYW5nZT1mdW5jdGlvbigpe3UoKSx0Lm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0KSx0PW51bGx9LGUuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKHQpfTpmdW5jdGlvbigpe3NldFRpbWVvdXQodSwwKX07ZWxzZXt2YXIgbz1uZXcgZS5NZXNzYWdlQ2hhbm5lbDtvLnBvcnQxLm9ubWVzc2FnZT11LHI9ZnVuY3Rpb24oKXtvLnBvcnQyLnBvc3RNZXNzYWdlKDApfX12YXIgaD1bXTtmdW5jdGlvbiB1KCl7dmFyIHQsZTtpPSEwO2Zvcih2YXIgcj1oLmxlbmd0aDtyOyl7Zm9yKGU9aCxoPVtdLHQ9LTE7Kyt0PHI7KWVbdF0oKTtyPWgubGVuZ3RofWk9ITF9bC5leHBvcnRzPWZ1bmN0aW9uKHQpezEhPT1oLnB1c2godCl8fGl8fHIoKX19KS5jYWxsKHRoaXMsXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGY/c2VsZjpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp7fSl9LHt9XSwzNzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXQoXCJpbW1lZGlhdGVcIik7ZnVuY3Rpb24gdSgpe312YXIgbD17fSxzPVtcIlJFSkVDVEVEXCJdLGE9W1wiRlVMRklMTEVEXCJdLGk9W1wiUEVORElOR1wiXTtmdW5jdGlvbiBvKHQpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IFR5cGVFcnJvcihcInJlc29sdmVyIG11c3QgYmUgYSBmdW5jdGlvblwiKTt0aGlzLnN0YXRlPWksdGhpcy5xdWV1ZT1bXSx0aGlzLm91dGNvbWU9dm9pZCAwLHQhPT11JiZjKHRoaXMsdCl9ZnVuY3Rpb24gaCh0LGUscil7dGhpcy5wcm9taXNlPXQsXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKHRoaXMub25GdWxmaWxsZWQ9ZSx0aGlzLmNhbGxGdWxmaWxsZWQ9dGhpcy5vdGhlckNhbGxGdWxmaWxsZWQpLFwiZnVuY3Rpb25cIj09dHlwZW9mIHImJih0aGlzLm9uUmVqZWN0ZWQ9cix0aGlzLmNhbGxSZWplY3RlZD10aGlzLm90aGVyQ2FsbFJlamVjdGVkKX1mdW5jdGlvbiBmKGUscixpKXtuKGZ1bmN0aW9uKCl7dmFyIHQ7dHJ5e3Q9cihpKX1jYXRjaCh0KXtyZXR1cm4gbC5yZWplY3QoZSx0KX10PT09ZT9sLnJlamVjdChlLG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVzb2x2ZSBwcm9taXNlIHdpdGggaXRzZWxmXCIpKTpsLnJlc29sdmUoZSx0KX0pfWZ1bmN0aW9uIGQodCl7dmFyIGU9dCYmdC50aGVuO2lmKHQmJihcIm9iamVjdFwiPT10eXBlb2YgdHx8XCJmdW5jdGlvblwiPT10eXBlb2YgdCkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGUpcmV0dXJuIGZ1bmN0aW9uKCl7ZS5hcHBseSh0LGFyZ3VtZW50cyl9fWZ1bmN0aW9uIGMoZSx0KXt2YXIgcj0hMTtmdW5jdGlvbiBpKHQpe3J8fChyPSEwLGwucmVqZWN0KGUsdCkpfWZ1bmN0aW9uIG4odCl7cnx8KHI9ITAsbC5yZXNvbHZlKGUsdCkpfXZhciBzPXAoZnVuY3Rpb24oKXt0KG4saSl9KTtcImVycm9yXCI9PT1zLnN0YXR1cyYmaShzLnZhbHVlKX1mdW5jdGlvbiBwKHQsZSl7dmFyIHI9e307dHJ5e3IudmFsdWU9dChlKSxyLnN0YXR1cz1cInN1Y2Nlc3NcIn1jYXRjaCh0KXtyLnN0YXR1cz1cImVycm9yXCIsci52YWx1ZT10fXJldHVybiByfShlLmV4cG9ydHM9bykucHJvdG90eXBlLmZpbmFsbHk9ZnVuY3Rpb24oZSl7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgZSlyZXR1cm4gdGhpczt2YXIgcj10aGlzLmNvbnN0cnVjdG9yO3JldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24odCl7cmV0dXJuIHIucmVzb2x2ZShlKCkpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gdH0pfSxmdW5jdGlvbih0KXtyZXR1cm4gci5yZXNvbHZlKGUoKSkudGhlbihmdW5jdGlvbigpe3Rocm93IHR9KX0pfSxvLnByb3RvdHlwZS5jYXRjaD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aGVuKG51bGwsdCl9LG8ucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24odCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0JiZ0aGlzLnN0YXRlPT09YXx8XCJmdW5jdGlvblwiIT10eXBlb2YgZSYmdGhpcy5zdGF0ZT09PXMpcmV0dXJuIHRoaXM7dmFyIHI9bmV3IHRoaXMuY29uc3RydWN0b3IodSk7dGhpcy5zdGF0ZSE9PWk/ZihyLHRoaXMuc3RhdGU9PT1hP3Q6ZSx0aGlzLm91dGNvbWUpOnRoaXMucXVldWUucHVzaChuZXcgaChyLHQsZSkpO3JldHVybiByfSxoLnByb3RvdHlwZS5jYWxsRnVsZmlsbGVkPWZ1bmN0aW9uKHQpe2wucmVzb2x2ZSh0aGlzLnByb21pc2UsdCl9LGgucHJvdG90eXBlLm90aGVyQ2FsbEZ1bGZpbGxlZD1mdW5jdGlvbih0KXtmKHRoaXMucHJvbWlzZSx0aGlzLm9uRnVsZmlsbGVkLHQpfSxoLnByb3RvdHlwZS5jYWxsUmVqZWN0ZWQ9ZnVuY3Rpb24odCl7bC5yZWplY3QodGhpcy5wcm9taXNlLHQpfSxoLnByb3RvdHlwZS5vdGhlckNhbGxSZWplY3RlZD1mdW5jdGlvbih0KXtmKHRoaXMucHJvbWlzZSx0aGlzLm9uUmVqZWN0ZWQsdCl9LGwucmVzb2x2ZT1mdW5jdGlvbih0LGUpe3ZhciByPXAoZCxlKTtpZihcImVycm9yXCI9PT1yLnN0YXR1cylyZXR1cm4gbC5yZWplY3QodCxyLnZhbHVlKTt2YXIgaT1yLnZhbHVlO2lmKGkpYyh0LGkpO2Vsc2V7dC5zdGF0ZT1hLHQub3V0Y29tZT1lO2Zvcih2YXIgbj0tMSxzPXQucXVldWUubGVuZ3RoOysrbjxzOyl0LnF1ZXVlW25dLmNhbGxGdWxmaWxsZWQoZSl9cmV0dXJuIHR9LGwucmVqZWN0PWZ1bmN0aW9uKHQsZSl7dC5zdGF0ZT1zLHQub3V0Y29tZT1lO2Zvcih2YXIgcj0tMSxpPXQucXVldWUubGVuZ3RoOysrcjxpOyl0LnF1ZXVlW3JdLmNhbGxSZWplY3RlZChlKTtyZXR1cm4gdH0sby5yZXNvbHZlPWZ1bmN0aW9uKHQpe2lmKHQgaW5zdGFuY2VvZiB0aGlzKXJldHVybiB0O3JldHVybiBsLnJlc29sdmUobmV3IHRoaXModSksdCl9LG8ucmVqZWN0PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyB0aGlzKHUpO3JldHVybiBsLnJlamVjdChlLHQpfSxvLmFsbD1mdW5jdGlvbih0KXt2YXIgcj10aGlzO2lmKFwiW29iamVjdCBBcnJheV1cIiE9PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSlyZXR1cm4gdGhpcy5yZWplY3QobmV3IFR5cGVFcnJvcihcIm11c3QgYmUgYW4gYXJyYXlcIikpO3ZhciBpPXQubGVuZ3RoLG49ITE7aWYoIWkpcmV0dXJuIHRoaXMucmVzb2x2ZShbXSk7dmFyIHM9bmV3IEFycmF5KGkpLGE9MCxlPS0xLG89bmV3IHRoaXModSk7Zm9yKDsrK2U8aTspaCh0W2VdLGUpO3JldHVybiBvO2Z1bmN0aW9uIGgodCxlKXtyLnJlc29sdmUodCkudGhlbihmdW5jdGlvbih0KXtzW2VdPXQsKythIT09aXx8bnx8KG49ITAsbC5yZXNvbHZlKG8scykpfSxmdW5jdGlvbih0KXtufHwobj0hMCxsLnJlamVjdChvLHQpKX0pfX0sby5yYWNlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYoXCJbb2JqZWN0IEFycmF5XVwiIT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHQpKXJldHVybiB0aGlzLnJlamVjdChuZXcgVHlwZUVycm9yKFwibXVzdCBiZSBhbiBhcnJheVwiKSk7dmFyIHI9dC5sZW5ndGgsaT0hMTtpZighcilyZXR1cm4gdGhpcy5yZXNvbHZlKFtdKTt2YXIgbj0tMSxzPW5ldyB0aGlzKHUpO2Zvcig7KytuPHI7KWE9dFtuXSxlLnJlc29sdmUoYSkudGhlbihmdW5jdGlvbih0KXtpfHwoaT0hMCxsLnJlc29sdmUocyx0KSl9LGZ1bmN0aW9uKHQpe2l8fChpPSEwLGwucmVqZWN0KHMsdCkpfSk7dmFyIGE7cmV0dXJuIHN9fSx7aW1tZWRpYXRlOjM2fV0sMzg6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgaT17fTsoMCx0KFwiLi9saWIvdXRpbHMvY29tbW9uXCIpLmFzc2lnbikoaSx0KFwiLi9saWIvZGVmbGF0ZVwiKSx0KFwiLi9saWIvaW5mbGF0ZVwiKSx0KFwiLi9saWIvemxpYi9jb25zdGFudHNcIikpLGUuZXhwb3J0cz1pfSx7XCIuL2xpYi9kZWZsYXRlXCI6MzksXCIuL2xpYi9pbmZsYXRlXCI6NDAsXCIuL2xpYi91dGlscy9jb21tb25cIjo0MSxcIi4vbGliL3psaWIvY29uc3RhbnRzXCI6NDR9XSwzOTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBhPXQoXCIuL3psaWIvZGVmbGF0ZVwiKSxvPXQoXCIuL3V0aWxzL2NvbW1vblwiKSxoPXQoXCIuL3V0aWxzL3N0cmluZ3NcIiksbj10KFwiLi96bGliL21lc3NhZ2VzXCIpLHM9dChcIi4vemxpYi96c3RyZWFtXCIpLHU9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxsPTAsZj0tMSxkPTAsYz04O2Z1bmN0aW9uIHAodCl7aWYoISh0aGlzIGluc3RhbmNlb2YgcCkpcmV0dXJuIG5ldyBwKHQpO3RoaXMub3B0aW9ucz1vLmFzc2lnbih7bGV2ZWw6ZixtZXRob2Q6YyxjaHVua1NpemU6MTYzODQsd2luZG93Qml0czoxNSxtZW1MZXZlbDo4LHN0cmF0ZWd5OmQsdG86XCJcIn0sdHx8e30pO3ZhciBlPXRoaXMub3B0aW9ucztlLnJhdyYmMDxlLndpbmRvd0JpdHM/ZS53aW5kb3dCaXRzPS1lLndpbmRvd0JpdHM6ZS5nemlwJiYwPGUud2luZG93Qml0cyYmZS53aW5kb3dCaXRzPDE2JiYoZS53aW5kb3dCaXRzKz0xNiksdGhpcy5lcnI9MCx0aGlzLm1zZz1cIlwiLHRoaXMuZW5kZWQ9ITEsdGhpcy5jaHVua3M9W10sdGhpcy5zdHJtPW5ldyBzLHRoaXMuc3RybS5hdmFpbF9vdXQ9MDt2YXIgcj1hLmRlZmxhdGVJbml0Mih0aGlzLnN0cm0sZS5sZXZlbCxlLm1ldGhvZCxlLndpbmRvd0JpdHMsZS5tZW1MZXZlbCxlLnN0cmF0ZWd5KTtpZihyIT09bCl0aHJvdyBuZXcgRXJyb3IobltyXSk7aWYoZS5oZWFkZXImJmEuZGVmbGF0ZVNldEhlYWRlcih0aGlzLnN0cm0sZS5oZWFkZXIpLGUuZGljdGlvbmFyeSl7dmFyIGk7aWYoaT1cInN0cmluZ1wiPT10eXBlb2YgZS5kaWN0aW9uYXJ5P2guc3RyaW5nMmJ1ZihlLmRpY3Rpb25hcnkpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PXUuY2FsbChlLmRpY3Rpb25hcnkpP25ldyBVaW50OEFycmF5KGUuZGljdGlvbmFyeSk6ZS5kaWN0aW9uYXJ5LChyPWEuZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLGkpKSE9PWwpdGhyb3cgbmV3IEVycm9yKG5bcl0pO3RoaXMuX2RpY3Rfc2V0PSEwfX1mdW5jdGlvbiBpKHQsZSl7dmFyIHI9bmV3IHAoZSk7aWYoci5wdXNoKHQsITApLHIuZXJyKXRocm93IHIubXNnfHxuW3IuZXJyXTtyZXR1cm4gci5yZXN1bHR9cC5wcm90b3R5cGUucHVzaD1mdW5jdGlvbih0LGUpe3ZhciByLGksbj10aGlzLnN0cm0scz10aGlzLm9wdGlvbnMuY2h1bmtTaXplO2lmKHRoaXMuZW5kZWQpcmV0dXJuITE7aT1lPT09fn5lP2U6ITA9PT1lPzQ6MCxcInN0cmluZ1wiPT10eXBlb2YgdD9uLmlucHV0PWguc3RyaW5nMmJ1Zih0KTpcIltvYmplY3QgQXJyYXlCdWZmZXJdXCI9PT11LmNhbGwodCk/bi5pbnB1dD1uZXcgVWludDhBcnJheSh0KTpuLmlucHV0PXQsbi5uZXh0X2luPTAsbi5hdmFpbF9pbj1uLmlucHV0Lmxlbmd0aDtkb3tpZigwPT09bi5hdmFpbF9vdXQmJihuLm91dHB1dD1uZXcgby5CdWY4KHMpLG4ubmV4dF9vdXQ9MCxuLmF2YWlsX291dD1zKSwxIT09KHI9YS5kZWZsYXRlKG4saSkpJiZyIT09bClyZXR1cm4gdGhpcy5vbkVuZChyKSwhKHRoaXMuZW5kZWQ9ITApOzAhPT1uLmF2YWlsX291dCYmKDAhPT1uLmF2YWlsX2lufHw0IT09aSYmMiE9PWkpfHwoXCJzdHJpbmdcIj09PXRoaXMub3B0aW9ucy50bz90aGlzLm9uRGF0YShoLmJ1ZjJiaW5zdHJpbmcoby5zaHJpbmtCdWYobi5vdXRwdXQsbi5uZXh0X291dCkpKTp0aGlzLm9uRGF0YShvLnNocmlua0J1ZihuLm91dHB1dCxuLm5leHRfb3V0KSkpfXdoaWxlKCgwPG4uYXZhaWxfaW58fDA9PT1uLmF2YWlsX291dCkmJjEhPT1yKTtyZXR1cm4gND09PWk/KHI9YS5kZWZsYXRlRW5kKHRoaXMuc3RybSksdGhpcy5vbkVuZChyKSx0aGlzLmVuZGVkPSEwLHI9PT1sKToyIT09aXx8KHRoaXMub25FbmQobCksIShuLmF2YWlsX291dD0wKSl9LHAucHJvdG90eXBlLm9uRGF0YT1mdW5jdGlvbih0KXt0aGlzLmNodW5rcy5wdXNoKHQpfSxwLnByb3RvdHlwZS5vbkVuZD1mdW5jdGlvbih0KXt0PT09bCYmKFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5yZXN1bHQ9dGhpcy5jaHVua3Muam9pbihcIlwiKTp0aGlzLnJlc3VsdD1vLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpKSx0aGlzLmNodW5rcz1bXSx0aGlzLmVycj10LHRoaXMubXNnPXRoaXMuc3RybS5tc2d9LHIuRGVmbGF0ZT1wLHIuZGVmbGF0ZT1pLHIuZGVmbGF0ZVJhdz1mdW5jdGlvbih0LGUpe3JldHVybihlPWV8fHt9KS5yYXc9ITAsaSh0LGUpfSxyLmd6aXA9ZnVuY3Rpb24odCxlKXtyZXR1cm4oZT1lfHx7fSkuZ3ppcD0hMCxpKHQsZSl9fSx7XCIuL3V0aWxzL2NvbW1vblwiOjQxLFwiLi91dGlscy9zdHJpbmdzXCI6NDIsXCIuL3psaWIvZGVmbGF0ZVwiOjQ2LFwiLi96bGliL21lc3NhZ2VzXCI6NTEsXCIuL3psaWIvenN0cmVhbVwiOjUzfV0sNDA6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgZD10KFwiLi96bGliL2luZmxhdGVcIiksYz10KFwiLi91dGlscy9jb21tb25cIikscD10KFwiLi91dGlscy9zdHJpbmdzXCIpLG09dChcIi4vemxpYi9jb25zdGFudHNcIiksaT10KFwiLi96bGliL21lc3NhZ2VzXCIpLG49dChcIi4vemxpYi96c3RyZWFtXCIpLHM9dChcIi4vemxpYi9nemhlYWRlclwiKSxfPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7ZnVuY3Rpb24gYSh0KXtpZighKHRoaXMgaW5zdGFuY2VvZiBhKSlyZXR1cm4gbmV3IGEodCk7dGhpcy5vcHRpb25zPWMuYXNzaWduKHtjaHVua1NpemU6MTYzODQsd2luZG93Qml0czowLHRvOlwiXCJ9LHR8fHt9KTt2YXIgZT10aGlzLm9wdGlvbnM7ZS5yYXcmJjA8PWUud2luZG93Qml0cyYmZS53aW5kb3dCaXRzPDE2JiYoZS53aW5kb3dCaXRzPS1lLndpbmRvd0JpdHMsMD09PWUud2luZG93Qml0cyYmKGUud2luZG93Qml0cz0tMTUpKSwhKDA8PWUud2luZG93Qml0cyYmZS53aW5kb3dCaXRzPDE2KXx8dCYmdC53aW5kb3dCaXRzfHwoZS53aW5kb3dCaXRzKz0zMiksMTU8ZS53aW5kb3dCaXRzJiZlLndpbmRvd0JpdHM8NDgmJjA9PSgxNSZlLndpbmRvd0JpdHMpJiYoZS53aW5kb3dCaXRzfD0xNSksdGhpcy5lcnI9MCx0aGlzLm1zZz1cIlwiLHRoaXMuZW5kZWQ9ITEsdGhpcy5jaHVua3M9W10sdGhpcy5zdHJtPW5ldyBuLHRoaXMuc3RybS5hdmFpbF9vdXQ9MDt2YXIgcj1kLmluZmxhdGVJbml0Mih0aGlzLnN0cm0sZS53aW5kb3dCaXRzKTtpZihyIT09bS5aX09LKXRocm93IG5ldyBFcnJvcihpW3JdKTt0aGlzLmhlYWRlcj1uZXcgcyxkLmluZmxhdGVHZXRIZWFkZXIodGhpcy5zdHJtLHRoaXMuaGVhZGVyKX1mdW5jdGlvbiBvKHQsZSl7dmFyIHI9bmV3IGEoZSk7aWYoci5wdXNoKHQsITApLHIuZXJyKXRocm93IHIubXNnfHxpW3IuZXJyXTtyZXR1cm4gci5yZXN1bHR9YS5wcm90b3R5cGUucHVzaD1mdW5jdGlvbih0LGUpe3ZhciByLGksbixzLGEsbyxoPXRoaXMuc3RybSx1PXRoaXMub3B0aW9ucy5jaHVua1NpemUsbD10aGlzLm9wdGlvbnMuZGljdGlvbmFyeSxmPSExO2lmKHRoaXMuZW5kZWQpcmV0dXJuITE7aT1lPT09fn5lP2U6ITA9PT1lP20uWl9GSU5JU0g6bS5aX05PX0ZMVVNILFwic3RyaW5nXCI9PXR5cGVvZiB0P2guaW5wdXQ9cC5iaW5zdHJpbmcyYnVmKHQpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PV8uY2FsbCh0KT9oLmlucHV0PW5ldyBVaW50OEFycmF5KHQpOmguaW5wdXQ9dCxoLm5leHRfaW49MCxoLmF2YWlsX2luPWguaW5wdXQubGVuZ3RoO2Rve2lmKDA9PT1oLmF2YWlsX291dCYmKGgub3V0cHV0PW5ldyBjLkJ1ZjgodSksaC5uZXh0X291dD0wLGguYXZhaWxfb3V0PXUpLChyPWQuaW5mbGF0ZShoLG0uWl9OT19GTFVTSCkpPT09bS5aX05FRURfRElDVCYmbCYmKG89XCJzdHJpbmdcIj09dHlwZW9mIGw/cC5zdHJpbmcyYnVmKGwpOlwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIj09PV8uY2FsbChsKT9uZXcgVWludDhBcnJheShsKTpsLHI9ZC5pbmZsYXRlU2V0RGljdGlvbmFyeSh0aGlzLnN0cm0sbykpLHI9PT1tLlpfQlVGX0VSUk9SJiYhMD09PWYmJihyPW0uWl9PSyxmPSExKSxyIT09bS5aX1NUUkVBTV9FTkQmJnIhPT1tLlpfT0spcmV0dXJuIHRoaXMub25FbmQociksISh0aGlzLmVuZGVkPSEwKTtoLm5leHRfb3V0JiYoMCE9PWguYXZhaWxfb3V0JiZyIT09bS5aX1NUUkVBTV9FTkQmJigwIT09aC5hdmFpbF9pbnx8aSE9PW0uWl9GSU5JU0gmJmkhPT1tLlpfU1lOQ19GTFVTSCl8fChcInN0cmluZ1wiPT09dGhpcy5vcHRpb25zLnRvPyhuPXAudXRmOGJvcmRlcihoLm91dHB1dCxoLm5leHRfb3V0KSxzPWgubmV4dF9vdXQtbixhPXAuYnVmMnN0cmluZyhoLm91dHB1dCxuKSxoLm5leHRfb3V0PXMsaC5hdmFpbF9vdXQ9dS1zLHMmJmMuYXJyYXlTZXQoaC5vdXRwdXQsaC5vdXRwdXQsbixzLDApLHRoaXMub25EYXRhKGEpKTp0aGlzLm9uRGF0YShjLnNocmlua0J1ZihoLm91dHB1dCxoLm5leHRfb3V0KSkpKSwwPT09aC5hdmFpbF9pbiYmMD09PWguYXZhaWxfb3V0JiYoZj0hMCl9d2hpbGUoKDA8aC5hdmFpbF9pbnx8MD09PWguYXZhaWxfb3V0KSYmciE9PW0uWl9TVFJFQU1fRU5EKTtyZXR1cm4gcj09PW0uWl9TVFJFQU1fRU5EJiYoaT1tLlpfRklOSVNIKSxpPT09bS5aX0ZJTklTSD8ocj1kLmluZmxhdGVFbmQodGhpcy5zdHJtKSx0aGlzLm9uRW5kKHIpLHRoaXMuZW5kZWQ9ITAscj09PW0uWl9PSyk6aSE9PW0uWl9TWU5DX0ZMVVNIfHwodGhpcy5vbkVuZChtLlpfT0spLCEoaC5hdmFpbF9vdXQ9MCkpfSxhLnByb3RvdHlwZS5vbkRhdGE9ZnVuY3Rpb24odCl7dGhpcy5jaHVua3MucHVzaCh0KX0sYS5wcm90b3R5cGUub25FbmQ9ZnVuY3Rpb24odCl7dD09PW0uWl9PSyYmKFwic3RyaW5nXCI9PT10aGlzLm9wdGlvbnMudG8/dGhpcy5yZXN1bHQ9dGhpcy5jaHVua3Muam9pbihcIlwiKTp0aGlzLnJlc3VsdD1jLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpKSx0aGlzLmNodW5rcz1bXSx0aGlzLmVycj10LHRoaXMubXNnPXRoaXMuc3RybS5tc2d9LHIuSW5mbGF0ZT1hLHIuaW5mbGF0ZT1vLHIuaW5mbGF0ZVJhdz1mdW5jdGlvbih0LGUpe3JldHVybihlPWV8fHt9KS5yYXc9ITAsbyh0LGUpfSxyLnVuZ3ppcD1vfSx7XCIuL3V0aWxzL2NvbW1vblwiOjQxLFwiLi91dGlscy9zdHJpbmdzXCI6NDIsXCIuL3psaWIvY29uc3RhbnRzXCI6NDQsXCIuL3psaWIvZ3poZWFkZXJcIjo0NyxcIi4vemxpYi9pbmZsYXRlXCI6NDksXCIuL3psaWIvbWVzc2FnZXNcIjo1MSxcIi4vemxpYi96c3RyZWFtXCI6NTN9XSw0MTpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBpPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBVaW50OEFycmF5JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgVWludDE2QXJyYXkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBJbnQzMkFycmF5O3IuYXNzaWduPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7ZS5sZW5ndGg7KXt2YXIgcj1lLnNoaWZ0KCk7aWYocil7aWYoXCJvYmplY3RcIiE9dHlwZW9mIHIpdGhyb3cgbmV3IFR5cGVFcnJvcihyK1wibXVzdCBiZSBub24tb2JqZWN0XCIpO2Zvcih2YXIgaSBpbiByKXIuaGFzT3duUHJvcGVydHkoaSkmJih0W2ldPXJbaV0pfX1yZXR1cm4gdH0sci5zaHJpbmtCdWY9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5sZW5ndGg9PT1lP3Q6dC5zdWJhcnJheT90LnN1YmFycmF5KDAsZSk6KHQubGVuZ3RoPWUsdCl9O3ZhciBuPXthcnJheVNldDpmdW5jdGlvbih0LGUscixpLG4pe2lmKGUuc3ViYXJyYXkmJnQuc3ViYXJyYXkpdC5zZXQoZS5zdWJhcnJheShyLHIraSksbik7ZWxzZSBmb3IodmFyIHM9MDtzPGk7cysrKXRbbitzXT1lW3Irc119LGZsYXR0ZW5DaHVua3M6ZnVuY3Rpb24odCl7dmFyIGUscixpLG4scyxhO2ZvcihlPWk9MCxyPXQubGVuZ3RoO2U8cjtlKyspaSs9dFtlXS5sZW5ndGg7Zm9yKGE9bmV3IFVpbnQ4QXJyYXkoaSksZT1uPTAscj10Lmxlbmd0aDtlPHI7ZSsrKXM9dFtlXSxhLnNldChzLG4pLG4rPXMubGVuZ3RoO3JldHVybiBhfX0scz17YXJyYXlTZXQ6ZnVuY3Rpb24odCxlLHIsaSxuKXtmb3IodmFyIHM9MDtzPGk7cysrKXRbbitzXT1lW3Irc119LGZsYXR0ZW5DaHVua3M6ZnVuY3Rpb24odCl7cmV0dXJuW10uY29uY2F0LmFwcGx5KFtdLHQpfX07ci5zZXRUeXBlZD1mdW5jdGlvbih0KXt0PyhyLkJ1Zjg9VWludDhBcnJheSxyLkJ1ZjE2PVVpbnQxNkFycmF5LHIuQnVmMzI9SW50MzJBcnJheSxyLmFzc2lnbihyLG4pKTooci5CdWY4PUFycmF5LHIuQnVmMTY9QXJyYXksci5CdWYzMj1BcnJheSxyLmFzc2lnbihyLHMpKX0sci5zZXRUeXBlZChpKX0se31dLDQyOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIGg9dChcIi4vY29tbW9uXCIpLG49ITAscz0hMDt0cnl7U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLFswXSl9Y2F0Y2godCl7bj0hMX10cnl7U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLG5ldyBVaW50OEFycmF5KDEpKX1jYXRjaCh0KXtzPSExfWZvcih2YXIgdT1uZXcgaC5CdWY4KDI1NiksaT0wO2k8MjU2O2krKyl1W2ldPTI1Mjw9aT82OjI0ODw9aT81OjI0MDw9aT80OjIyNDw9aT8zOjE5Mjw9aT8yOjE7ZnVuY3Rpb24gbCh0LGUpe2lmKGU8NjU1MzcmJih0LnN1YmFycmF5JiZzfHwhdC5zdWJhcnJheSYmbikpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxoLnNocmlua0J1Zih0LGUpKTtmb3IodmFyIHI9XCJcIixpPTA7aTxlO2krKylyKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHRbaV0pO3JldHVybiByfXVbMjU0XT11WzI1NF09MSxyLnN0cmluZzJidWY9ZnVuY3Rpb24odCl7dmFyIGUscixpLG4scyxhPXQubGVuZ3RoLG89MDtmb3Iobj0wO248YTtuKyspNTUyOTY9PSg2NDUxMiYocj10LmNoYXJDb2RlQXQobikpKSYmbisxPGEmJjU2MzIwPT0oNjQ1MTImKGk9dC5jaGFyQ29kZUF0KG4rMSkpKSYmKHI9NjU1MzYrKHItNTUyOTY8PDEwKSsoaS01NjMyMCksbisrKSxvKz1yPDEyOD8xOnI8MjA0OD8yOnI8NjU1MzY/Mzo0O2ZvcihlPW5ldyBoLkJ1Zjgobyksbj1zPTA7czxvO24rKyk1NTI5Nj09KDY0NTEyJihyPXQuY2hhckNvZGVBdChuKSkpJiZuKzE8YSYmNTYzMjA9PSg2NDUxMiYoaT10LmNoYXJDb2RlQXQobisxKSkpJiYocj02NTUzNisoci01NTI5Njw8MTApKyhpLTU2MzIwKSxuKyspLHI8MTI4P2VbcysrXT1yOihyPDIwNDg/ZVtzKytdPTE5MnxyPj4+Njoocjw2NTUzNj9lW3MrK109MjI0fHI+Pj4xMjooZVtzKytdPTI0MHxyPj4+MTgsZVtzKytdPTEyOHxyPj4+MTImNjMpLGVbcysrXT0xMjh8cj4+PjYmNjMpLGVbcysrXT0xMjh8NjMmcik7cmV0dXJuIGV9LHIuYnVmMmJpbnN0cmluZz1mdW5jdGlvbih0KXtyZXR1cm4gbCh0LHQubGVuZ3RoKX0sci5iaW5zdHJpbmcyYnVmPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgaC5CdWY4KHQubGVuZ3RoKSxyPTAsaT1lLmxlbmd0aDtyPGk7cisrKWVbcl09dC5jaGFyQ29kZUF0KHIpO3JldHVybiBlfSxyLmJ1ZjJzdHJpbmc9ZnVuY3Rpb24odCxlKXt2YXIgcixpLG4scyxhPWV8fHQubGVuZ3RoLG89bmV3IEFycmF5KDIqYSk7Zm9yKHI9aT0wO3I8YTspaWYoKG49dFtyKytdKTwxMjgpb1tpKytdPW47ZWxzZSBpZig0PChzPXVbbl0pKW9baSsrXT02NTUzMyxyKz1zLTE7ZWxzZXtmb3IobiY9Mj09PXM/MzE6Mz09PXM/MTU6NzsxPHMmJnI8YTspbj1uPDw2fDYzJnRbcisrXSxzLS07MTxzP29baSsrXT02NTUzMzpuPDY1NTM2P29baSsrXT1uOihuLT02NTUzNixvW2krK109NTUyOTZ8bj4+MTAmMTAyMyxvW2krK109NTYzMjB8MTAyMyZuKX1yZXR1cm4gbChvLGkpfSxyLnV0Zjhib3JkZXI9ZnVuY3Rpb24odCxlKXt2YXIgcjtmb3IoKGU9ZXx8dC5sZW5ndGgpPnQubGVuZ3RoJiYoZT10Lmxlbmd0aCkscj1lLTE7MDw9ciYmMTI4PT0oMTkyJnRbcl0pOylyLS07cmV0dXJuIHI8MD9lOjA9PT1yP2U6cit1W3Rbcl1dPmU/cjplfX0se1wiLi9jb21tb25cIjo0MX1dLDQzOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPWZ1bmN0aW9uKHQsZSxyLGkpe2Zvcih2YXIgbj02NTUzNSZ0fDAscz10Pj4+MTYmNjU1MzV8MCxhPTA7MCE9PXI7KXtmb3Ioci09YT0yZTM8cj8yZTM6cjtzPXMrKG49bitlW2krK118MCl8MCwtLWE7KTtuJT02NTUyMSxzJT02NTUyMX1yZXR1cm4gbnxzPDwxNnwwfX0se31dLDQ0OltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXtaX05PX0ZMVVNIOjAsWl9QQVJUSUFMX0ZMVVNIOjEsWl9TWU5DX0ZMVVNIOjIsWl9GVUxMX0ZMVVNIOjMsWl9GSU5JU0g6NCxaX0JMT0NLOjUsWl9UUkVFUzo2LFpfT0s6MCxaX1NUUkVBTV9FTkQ6MSxaX05FRURfRElDVDoyLFpfRVJSTk86LTEsWl9TVFJFQU1fRVJST1I6LTIsWl9EQVRBX0VSUk9SOi0zLFpfQlVGX0VSUk9SOi01LFpfTk9fQ09NUFJFU1NJT046MCxaX0JFU1RfU1BFRUQ6MSxaX0JFU1RfQ09NUFJFU1NJT046OSxaX0RFRkFVTFRfQ09NUFJFU1NJT046LTEsWl9GSUxURVJFRDoxLFpfSFVGRk1BTl9PTkxZOjIsWl9STEU6MyxaX0ZJWEVEOjQsWl9ERUZBVUxUX1NUUkFURUdZOjAsWl9CSU5BUlk6MCxaX1RFWFQ6MSxaX1VOS05PV046MixaX0RFRkxBVEVEOjh9fSx7fV0sNDU6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgbz1mdW5jdGlvbigpe2Zvcih2YXIgdCxlPVtdLHI9MDtyPDI1NjtyKyspe3Q9cjtmb3IodmFyIGk9MDtpPDg7aSsrKXQ9MSZ0PzM5ODgyOTIzODRedD4+PjE6dD4+PjE7ZVtyXT10fXJldHVybiBlfSgpO2UuZXhwb3J0cz1mdW5jdGlvbih0LGUscixpKXt2YXIgbj1vLHM9aStyO3RePS0xO2Zvcih2YXIgYT1pO2E8czthKyspdD10Pj4+OF5uWzI1NSYodF5lW2FdKV07cmV0dXJuLTFedH19LHt9XSw0NjpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBoLGQ9dChcIi4uL3V0aWxzL2NvbW1vblwiKSx1PXQoXCIuL3RyZWVzXCIpLGM9dChcIi4vYWRsZXIzMlwiKSxwPXQoXCIuL2NyYzMyXCIpLGk9dChcIi4vbWVzc2FnZXNcIiksbD0wLGY9NCxtPTAsXz0tMixnPS0xLGI9NCxuPTIsdj04LHk9OSxzPTI4NixhPTMwLG89MTksdz0yKnMrMSxrPTE1LHg9MyxTPTI1OCx6PVMreCsxLEM9NDIsRT0xMTMsQT0xLEk9MixPPTMsQj00O2Z1bmN0aW9uIFIodCxlKXtyZXR1cm4gdC5tc2c9aVtlXSxlfWZ1bmN0aW9uIFQodCl7cmV0dXJuKHQ8PDEpLSg0PHQ/OTowKX1mdW5jdGlvbiBEKHQpe2Zvcih2YXIgZT10Lmxlbmd0aDswPD0tLWU7KXRbZV09MH1mdW5jdGlvbiBGKHQpe3ZhciBlPXQuc3RhdGUscj1lLnBlbmRpbmc7cj50LmF2YWlsX291dCYmKHI9dC5hdmFpbF9vdXQpLDAhPT1yJiYoZC5hcnJheVNldCh0Lm91dHB1dCxlLnBlbmRpbmdfYnVmLGUucGVuZGluZ19vdXQscix0Lm5leHRfb3V0KSx0Lm5leHRfb3V0Kz1yLGUucGVuZGluZ19vdXQrPXIsdC50b3RhbF9vdXQrPXIsdC5hdmFpbF9vdXQtPXIsZS5wZW5kaW5nLT1yLDA9PT1lLnBlbmRpbmcmJihlLnBlbmRpbmdfb3V0PTApKX1mdW5jdGlvbiBOKHQsZSl7dS5fdHJfZmx1c2hfYmxvY2sodCwwPD10LmJsb2NrX3N0YXJ0P3QuYmxvY2tfc3RhcnQ6LTEsdC5zdHJzdGFydC10LmJsb2NrX3N0YXJ0LGUpLHQuYmxvY2tfc3RhcnQ9dC5zdHJzdGFydCxGKHQuc3RybSl9ZnVuY3Rpb24gVSh0LGUpe3QucGVuZGluZ19idWZbdC5wZW5kaW5nKytdPWV9ZnVuY3Rpb24gUCh0LGUpe3QucGVuZGluZ19idWZbdC5wZW5kaW5nKytdPWU+Pj44JjI1NSx0LnBlbmRpbmdfYnVmW3QucGVuZGluZysrXT0yNTUmZX1mdW5jdGlvbiBMKHQsZSl7dmFyIHIsaSxuPXQubWF4X2NoYWluX2xlbmd0aCxzPXQuc3Ryc3RhcnQsYT10LnByZXZfbGVuZ3RoLG89dC5uaWNlX21hdGNoLGg9dC5zdHJzdGFydD50Lndfc2l6ZS16P3Quc3Ryc3RhcnQtKHQud19zaXplLXopOjAsdT10LndpbmRvdyxsPXQud19tYXNrLGY9dC5wcmV2LGQ9dC5zdHJzdGFydCtTLGM9dVtzK2EtMV0scD11W3MrYV07dC5wcmV2X2xlbmd0aD49dC5nb29kX21hdGNoJiYobj4+PTIpLG8+dC5sb29rYWhlYWQmJihvPXQubG9va2FoZWFkKTtkb3tpZih1WyhyPWUpK2FdPT09cCYmdVtyK2EtMV09PT1jJiZ1W3JdPT09dVtzXSYmdVsrK3JdPT09dVtzKzFdKXtzKz0yLHIrKztkb3t9d2hpbGUodVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnVbKytzXT09PXVbKytyXSYmdVsrK3NdPT09dVsrK3JdJiZ1Wysrc109PT11Wysrcl0mJnM8ZCk7aWYoaT1TLShkLXMpLHM9ZC1TLGE8aSl7aWYodC5tYXRjaF9zdGFydD1lLG88PShhPWkpKWJyZWFrO2M9dVtzK2EtMV0scD11W3MrYV19fX13aGlsZSgoZT1mW2UmbF0pPmgmJjAhPS0tbik7cmV0dXJuIGE8PXQubG9va2FoZWFkP2E6dC5sb29rYWhlYWR9ZnVuY3Rpb24gaih0KXt2YXIgZSxyLGksbixzLGEsbyxoLHUsbCxmPXQud19zaXplO2Rve2lmKG49dC53aW5kb3dfc2l6ZS10Lmxvb2thaGVhZC10LnN0cnN0YXJ0LHQuc3Ryc3RhcnQ+PWYrKGYteikpe2ZvcihkLmFycmF5U2V0KHQud2luZG93LHQud2luZG93LGYsZiwwKSx0Lm1hdGNoX3N0YXJ0LT1mLHQuc3Ryc3RhcnQtPWYsdC5ibG9ja19zdGFydC09ZixlPXI9dC5oYXNoX3NpemU7aT10LmhlYWRbLS1lXSx0LmhlYWRbZV09Zjw9aT9pLWY6MCwtLXI7KTtmb3IoZT1yPWY7aT10LnByZXZbLS1lXSx0LnByZXZbZV09Zjw9aT9pLWY6MCwtLXI7KTtuKz1mfWlmKDA9PT10LnN0cm0uYXZhaWxfaW4pYnJlYWs7aWYoYT10LnN0cm0sbz10LndpbmRvdyxoPXQuc3Ryc3RhcnQrdC5sb29rYWhlYWQsdT1uLGw9dm9pZCAwLGw9YS5hdmFpbF9pbix1PGwmJihsPXUpLHI9MD09PWw/MDooYS5hdmFpbF9pbi09bCxkLmFycmF5U2V0KG8sYS5pbnB1dCxhLm5leHRfaW4sbCxoKSwxPT09YS5zdGF0ZS53cmFwP2EuYWRsZXI9YyhhLmFkbGVyLG8sbCxoKToyPT09YS5zdGF0ZS53cmFwJiYoYS5hZGxlcj1wKGEuYWRsZXIsbyxsLGgpKSxhLm5leHRfaW4rPWwsYS50b3RhbF9pbis9bCxsKSx0Lmxvb2thaGVhZCs9cix0Lmxvb2thaGVhZCt0Lmluc2VydD49eClmb3Iocz10LnN0cnN0YXJ0LXQuaW5zZXJ0LHQuaW5zX2g9dC53aW5kb3dbc10sdC5pbnNfaD0odC5pbnNfaDw8dC5oYXNoX3NoaWZ0XnQud2luZG93W3MrMV0pJnQuaGFzaF9tYXNrO3QuaW5zZXJ0JiYodC5pbnNfaD0odC5pbnNfaDw8dC5oYXNoX3NoaWZ0XnQud2luZG93W3MreC0xXSkmdC5oYXNoX21hc2ssdC5wcmV2W3MmdC53X21hc2tdPXQuaGVhZFt0Lmluc19oXSx0LmhlYWRbdC5pbnNfaF09cyxzKyssdC5pbnNlcnQtLSwhKHQubG9va2FoZWFkK3QuaW5zZXJ0PHgpKTspO313aGlsZSh0Lmxvb2thaGVhZDx6JiYwIT09dC5zdHJtLmF2YWlsX2luKX1mdW5jdGlvbiBaKHQsZSl7Zm9yKHZhciByLGk7Oyl7aWYodC5sb29rYWhlYWQ8eil7aWYoaih0KSx0Lmxvb2thaGVhZDx6JiZlPT09bClyZXR1cm4gQTtpZigwPT09dC5sb29rYWhlYWQpYnJlYWt9aWYocj0wLHQubG9va2FoZWFkPj14JiYodC5pbnNfaD0odC5pbnNfaDw8dC5oYXNoX3NoaWZ0XnQud2luZG93W3Quc3Ryc3RhcnQreC0xXSkmdC5oYXNoX21hc2sscj10LnByZXZbdC5zdHJzdGFydCZ0LndfbWFza109dC5oZWFkW3QuaW5zX2hdLHQuaGVhZFt0Lmluc19oXT10LnN0cnN0YXJ0KSwwIT09ciYmdC5zdHJzdGFydC1yPD10Lndfc2l6ZS16JiYodC5tYXRjaF9sZW5ndGg9TCh0LHIpKSx0Lm1hdGNoX2xlbmd0aD49eClpZihpPXUuX3RyX3RhbGx5KHQsdC5zdHJzdGFydC10Lm1hdGNoX3N0YXJ0LHQubWF0Y2hfbGVuZ3RoLXgpLHQubG9va2FoZWFkLT10Lm1hdGNoX2xlbmd0aCx0Lm1hdGNoX2xlbmd0aDw9dC5tYXhfbGF6eV9tYXRjaCYmdC5sb29rYWhlYWQ+PXgpe2Zvcih0Lm1hdGNoX2xlbmd0aC0tO3Quc3Ryc3RhcnQrKyx0Lmluc19oPSh0Lmluc19oPDx0Lmhhc2hfc2hpZnRedC53aW5kb3dbdC5zdHJzdGFydCt4LTFdKSZ0Lmhhc2hfbWFzayxyPXQucHJldlt0LnN0cnN0YXJ0JnQud19tYXNrXT10LmhlYWRbdC5pbnNfaF0sdC5oZWFkW3QuaW5zX2hdPXQuc3Ryc3RhcnQsMCE9LS10Lm1hdGNoX2xlbmd0aDspO3Quc3Ryc3RhcnQrK31lbHNlIHQuc3Ryc3RhcnQrPXQubWF0Y2hfbGVuZ3RoLHQubWF0Y2hfbGVuZ3RoPTAsdC5pbnNfaD10LndpbmRvd1t0LnN0cnN0YXJ0XSx0Lmluc19oPSh0Lmluc19oPDx0Lmhhc2hfc2hpZnRedC53aW5kb3dbdC5zdHJzdGFydCsxXSkmdC5oYXNoX21hc2s7ZWxzZSBpPXUuX3RyX3RhbGx5KHQsMCx0LndpbmRvd1t0LnN0cnN0YXJ0XSksdC5sb29rYWhlYWQtLSx0LnN0cnN0YXJ0Kys7aWYoaSYmKE4odCwhMSksMD09PXQuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBfXJldHVybiB0Lmluc2VydD10LnN0cnN0YXJ0PHgtMT90LnN0cnN0YXJ0OngtMSxlPT09Zj8oTih0LCEwKSwwPT09dC5zdHJtLmF2YWlsX291dD9POkIpOnQubGFzdF9saXQmJihOKHQsITEpLDA9PT10LnN0cm0uYXZhaWxfb3V0KT9BOkl9ZnVuY3Rpb24gVyh0LGUpe2Zvcih2YXIgcixpLG47Oyl7aWYodC5sb29rYWhlYWQ8eil7aWYoaih0KSx0Lmxvb2thaGVhZDx6JiZlPT09bClyZXR1cm4gQTtpZigwPT09dC5sb29rYWhlYWQpYnJlYWt9aWYocj0wLHQubG9va2FoZWFkPj14JiYodC5pbnNfaD0odC5pbnNfaDw8dC5oYXNoX3NoaWZ0XnQud2luZG93W3Quc3Ryc3RhcnQreC0xXSkmdC5oYXNoX21hc2sscj10LnByZXZbdC5zdHJzdGFydCZ0LndfbWFza109dC5oZWFkW3QuaW5zX2hdLHQuaGVhZFt0Lmluc19oXT10LnN0cnN0YXJ0KSx0LnByZXZfbGVuZ3RoPXQubWF0Y2hfbGVuZ3RoLHQucHJldl9tYXRjaD10Lm1hdGNoX3N0YXJ0LHQubWF0Y2hfbGVuZ3RoPXgtMSwwIT09ciYmdC5wcmV2X2xlbmd0aDx0Lm1heF9sYXp5X21hdGNoJiZ0LnN0cnN0YXJ0LXI8PXQud19zaXplLXomJih0Lm1hdGNoX2xlbmd0aD1MKHQsciksdC5tYXRjaF9sZW5ndGg8PTUmJigxPT09dC5zdHJhdGVneXx8dC5tYXRjaF9sZW5ndGg9PT14JiY0MDk2PHQuc3Ryc3RhcnQtdC5tYXRjaF9zdGFydCkmJih0Lm1hdGNoX2xlbmd0aD14LTEpKSx0LnByZXZfbGVuZ3RoPj14JiZ0Lm1hdGNoX2xlbmd0aDw9dC5wcmV2X2xlbmd0aCl7Zm9yKG49dC5zdHJzdGFydCt0Lmxvb2thaGVhZC14LGk9dS5fdHJfdGFsbHkodCx0LnN0cnN0YXJ0LTEtdC5wcmV2X21hdGNoLHQucHJldl9sZW5ndGgteCksdC5sb29rYWhlYWQtPXQucHJldl9sZW5ndGgtMSx0LnByZXZfbGVuZ3RoLT0yOysrdC5zdHJzdGFydDw9biYmKHQuaW5zX2g9KHQuaW5zX2g8PHQuaGFzaF9zaGlmdF50LndpbmRvd1t0LnN0cnN0YXJ0K3gtMV0pJnQuaGFzaF9tYXNrLHI9dC5wcmV2W3Quc3Ryc3RhcnQmdC53X21hc2tdPXQuaGVhZFt0Lmluc19oXSx0LmhlYWRbdC5pbnNfaF09dC5zdHJzdGFydCksMCE9LS10LnByZXZfbGVuZ3RoOyk7aWYodC5tYXRjaF9hdmFpbGFibGU9MCx0Lm1hdGNoX2xlbmd0aD14LTEsdC5zdHJzdGFydCsrLGkmJihOKHQsITEpLDA9PT10LnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1lbHNlIGlmKHQubWF0Y2hfYXZhaWxhYmxlKXtpZigoaT11Ll90cl90YWxseSh0LDAsdC53aW5kb3dbdC5zdHJzdGFydC0xXSkpJiZOKHQsITEpLHQuc3Ryc3RhcnQrKyx0Lmxvb2thaGVhZC0tLDA9PT10LnN0cm0uYXZhaWxfb3V0KXJldHVybiBBfWVsc2UgdC5tYXRjaF9hdmFpbGFibGU9MSx0LnN0cnN0YXJ0KyssdC5sb29rYWhlYWQtLX1yZXR1cm4gdC5tYXRjaF9hdmFpbGFibGUmJihpPXUuX3RyX3RhbGx5KHQsMCx0LndpbmRvd1t0LnN0cnN0YXJ0LTFdKSx0Lm1hdGNoX2F2YWlsYWJsZT0wKSx0Lmluc2VydD10LnN0cnN0YXJ0PHgtMT90LnN0cnN0YXJ0OngtMSxlPT09Zj8oTih0LCEwKSwwPT09dC5zdHJtLmF2YWlsX291dD9POkIpOnQubGFzdF9saXQmJihOKHQsITEpLDA9PT10LnN0cm0uYXZhaWxfb3V0KT9BOkl9ZnVuY3Rpb24gTSh0LGUscixpLG4pe3RoaXMuZ29vZF9sZW5ndGg9dCx0aGlzLm1heF9sYXp5PWUsdGhpcy5uaWNlX2xlbmd0aD1yLHRoaXMubWF4X2NoYWluPWksdGhpcy5mdW5jPW59ZnVuY3Rpb24gSCgpe3RoaXMuc3RybT1udWxsLHRoaXMuc3RhdHVzPTAsdGhpcy5wZW5kaW5nX2J1Zj1udWxsLHRoaXMucGVuZGluZ19idWZfc2l6ZT0wLHRoaXMucGVuZGluZ19vdXQ9MCx0aGlzLnBlbmRpbmc9MCx0aGlzLndyYXA9MCx0aGlzLmd6aGVhZD1udWxsLHRoaXMuZ3ppbmRleD0wLHRoaXMubWV0aG9kPXYsdGhpcy5sYXN0X2ZsdXNoPS0xLHRoaXMud19zaXplPTAsdGhpcy53X2JpdHM9MCx0aGlzLndfbWFzaz0wLHRoaXMud2luZG93PW51bGwsdGhpcy53aW5kb3dfc2l6ZT0wLHRoaXMucHJldj1udWxsLHRoaXMuaGVhZD1udWxsLHRoaXMuaW5zX2g9MCx0aGlzLmhhc2hfc2l6ZT0wLHRoaXMuaGFzaF9iaXRzPTAsdGhpcy5oYXNoX21hc2s9MCx0aGlzLmhhc2hfc2hpZnQ9MCx0aGlzLmJsb2NrX3N0YXJ0PTAsdGhpcy5tYXRjaF9sZW5ndGg9MCx0aGlzLnByZXZfbWF0Y2g9MCx0aGlzLm1hdGNoX2F2YWlsYWJsZT0wLHRoaXMuc3Ryc3RhcnQ9MCx0aGlzLm1hdGNoX3N0YXJ0PTAsdGhpcy5sb29rYWhlYWQ9MCx0aGlzLnByZXZfbGVuZ3RoPTAsdGhpcy5tYXhfY2hhaW5fbGVuZ3RoPTAsdGhpcy5tYXhfbGF6eV9tYXRjaD0wLHRoaXMubGV2ZWw9MCx0aGlzLnN0cmF0ZWd5PTAsdGhpcy5nb29kX21hdGNoPTAsdGhpcy5uaWNlX21hdGNoPTAsdGhpcy5keW5fbHRyZWU9bmV3IGQuQnVmMTYoMip3KSx0aGlzLmR5bl9kdHJlZT1uZXcgZC5CdWYxNigyKigyKmErMSkpLHRoaXMuYmxfdHJlZT1uZXcgZC5CdWYxNigyKigyKm8rMSkpLEQodGhpcy5keW5fbHRyZWUpLEQodGhpcy5keW5fZHRyZWUpLEQodGhpcy5ibF90cmVlKSx0aGlzLmxfZGVzYz1udWxsLHRoaXMuZF9kZXNjPW51bGwsdGhpcy5ibF9kZXNjPW51bGwsdGhpcy5ibF9jb3VudD1uZXcgZC5CdWYxNihrKzEpLHRoaXMuaGVhcD1uZXcgZC5CdWYxNigyKnMrMSksRCh0aGlzLmhlYXApLHRoaXMuaGVhcF9sZW49MCx0aGlzLmhlYXBfbWF4PTAsdGhpcy5kZXB0aD1uZXcgZC5CdWYxNigyKnMrMSksRCh0aGlzLmRlcHRoKSx0aGlzLmxfYnVmPTAsdGhpcy5saXRfYnVmc2l6ZT0wLHRoaXMubGFzdF9saXQ9MCx0aGlzLmRfYnVmPTAsdGhpcy5vcHRfbGVuPTAsdGhpcy5zdGF0aWNfbGVuPTAsdGhpcy5tYXRjaGVzPTAsdGhpcy5pbnNlcnQ9MCx0aGlzLmJpX2J1Zj0wLHRoaXMuYmlfdmFsaWQ9MH1mdW5jdGlvbiBHKHQpe3ZhciBlO3JldHVybiB0JiZ0LnN0YXRlPyh0LnRvdGFsX2luPXQudG90YWxfb3V0PTAsdC5kYXRhX3R5cGU9biwoZT10LnN0YXRlKS5wZW5kaW5nPTAsZS5wZW5kaW5nX291dD0wLGUud3JhcDwwJiYoZS53cmFwPS1lLndyYXApLGUuc3RhdHVzPWUud3JhcD9DOkUsdC5hZGxlcj0yPT09ZS53cmFwPzA6MSxlLmxhc3RfZmx1c2g9bCx1Ll90cl9pbml0KGUpLG0pOlIodCxfKX1mdW5jdGlvbiBLKHQpe3ZhciBlPUcodCk7cmV0dXJuIGU9PT1tJiZmdW5jdGlvbih0KXt0LndpbmRvd19zaXplPTIqdC53X3NpemUsRCh0LmhlYWQpLHQubWF4X2xhenlfbWF0Y2g9aFt0LmxldmVsXS5tYXhfbGF6eSx0Lmdvb2RfbWF0Y2g9aFt0LmxldmVsXS5nb29kX2xlbmd0aCx0Lm5pY2VfbWF0Y2g9aFt0LmxldmVsXS5uaWNlX2xlbmd0aCx0Lm1heF9jaGFpbl9sZW5ndGg9aFt0LmxldmVsXS5tYXhfY2hhaW4sdC5zdHJzdGFydD0wLHQuYmxvY2tfc3RhcnQ9MCx0Lmxvb2thaGVhZD0wLHQuaW5zZXJ0PTAsdC5tYXRjaF9sZW5ndGg9dC5wcmV2X2xlbmd0aD14LTEsdC5tYXRjaF9hdmFpbGFibGU9MCx0Lmluc19oPTB9KHQuc3RhdGUpLGV9ZnVuY3Rpb24gWSh0LGUscixpLG4scyl7aWYoIXQpcmV0dXJuIF87dmFyIGE9MTtpZihlPT09ZyYmKGU9NiksaTwwPyhhPTAsaT0taSk6MTU8aSYmKGE9MixpLT0xNiksbjwxfHx5PG58fHIhPT12fHxpPDh8fDE1PGl8fGU8MHx8OTxlfHxzPDB8fGI8cylyZXR1cm4gUih0LF8pOzg9PT1pJiYoaT05KTt2YXIgbz1uZXcgSDtyZXR1cm4odC5zdGF0ZT1vKS5zdHJtPXQsby53cmFwPWEsby5nemhlYWQ9bnVsbCxvLndfYml0cz1pLG8ud19zaXplPTE8PG8ud19iaXRzLG8ud19tYXNrPW8ud19zaXplLTEsby5oYXNoX2JpdHM9bis3LG8uaGFzaF9zaXplPTE8PG8uaGFzaF9iaXRzLG8uaGFzaF9tYXNrPW8uaGFzaF9zaXplLTEsby5oYXNoX3NoaWZ0PX5+KChvLmhhc2hfYml0cyt4LTEpL3gpLG8ud2luZG93PW5ldyBkLkJ1ZjgoMipvLndfc2l6ZSksby5oZWFkPW5ldyBkLkJ1ZjE2KG8uaGFzaF9zaXplKSxvLnByZXY9bmV3IGQuQnVmMTYoby53X3NpemUpLG8ubGl0X2J1ZnNpemU9MTw8bis2LG8ucGVuZGluZ19idWZfc2l6ZT00Km8ubGl0X2J1ZnNpemUsby5wZW5kaW5nX2J1Zj1uZXcgZC5CdWY4KG8ucGVuZGluZ19idWZfc2l6ZSksby5kX2J1Zj0xKm8ubGl0X2J1ZnNpemUsby5sX2J1Zj0zKm8ubGl0X2J1ZnNpemUsby5sZXZlbD1lLG8uc3RyYXRlZ3k9cyxvLm1ldGhvZD1yLEsodCl9aD1bbmV3IE0oMCwwLDAsMCxmdW5jdGlvbih0LGUpe3ZhciByPTY1NTM1O2ZvcihyPnQucGVuZGluZ19idWZfc2l6ZS01JiYocj10LnBlbmRpbmdfYnVmX3NpemUtNSk7Oyl7aWYodC5sb29rYWhlYWQ8PTEpe2lmKGoodCksMD09PXQubG9va2FoZWFkJiZlPT09bClyZXR1cm4gQTtpZigwPT09dC5sb29rYWhlYWQpYnJlYWt9dC5zdHJzdGFydCs9dC5sb29rYWhlYWQsdC5sb29rYWhlYWQ9MDt2YXIgaT10LmJsb2NrX3N0YXJ0K3I7aWYoKDA9PT10LnN0cnN0YXJ0fHx0LnN0cnN0YXJ0Pj1pKSYmKHQubG9va2FoZWFkPXQuc3Ryc3RhcnQtaSx0LnN0cnN0YXJ0PWksTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEE7aWYodC5zdHJzdGFydC10LmJsb2NrX3N0YXJ0Pj10Lndfc2l6ZS16JiYoTih0LCExKSwwPT09dC5zdHJtLmF2YWlsX291dCkpcmV0dXJuIEF9cmV0dXJuIHQuaW5zZXJ0PTAsZT09PWY/KE4odCwhMCksMD09PXQuc3RybS5hdmFpbF9vdXQ/TzpCKToodC5zdHJzdGFydD50LmJsb2NrX3N0YXJ0JiYoTih0LCExKSx0LnN0cm0uYXZhaWxfb3V0KSxBKX0pLG5ldyBNKDQsNCw4LDQsWiksbmV3IE0oNCw1LDE2LDgsWiksbmV3IE0oNCw2LDMyLDMyLFopLG5ldyBNKDQsNCwxNiwxNixXKSxuZXcgTSg4LDE2LDMyLDMyLFcpLG5ldyBNKDgsMTYsMTI4LDEyOCxXKSxuZXcgTSg4LDMyLDEyOCwyNTYsVyksbmV3IE0oMzIsMTI4LDI1OCwxMDI0LFcpLG5ldyBNKDMyLDI1OCwyNTgsNDA5NixXKV0sci5kZWZsYXRlSW5pdD1mdW5jdGlvbih0LGUpe3JldHVybiBZKHQsZSx2LDE1LDgsMCl9LHIuZGVmbGF0ZUluaXQyPVksci5kZWZsYXRlUmVzZXQ9SyxyLmRlZmxhdGVSZXNldEtlZXA9RyxyLmRlZmxhdGVTZXRIZWFkZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdCYmdC5zdGF0ZT8yIT09dC5zdGF0ZS53cmFwP186KHQuc3RhdGUuZ3poZWFkPWUsbSk6X30sci5kZWZsYXRlPWZ1bmN0aW9uKHQsZSl7dmFyIHIsaSxuLHM7aWYoIXR8fCF0LnN0YXRlfHw1PGV8fGU8MClyZXR1cm4gdD9SKHQsXyk6XztpZihpPXQuc3RhdGUsIXQub3V0cHV0fHwhdC5pbnB1dCYmMCE9PXQuYXZhaWxfaW58fDY2Nj09PWkuc3RhdHVzJiZlIT09ZilyZXR1cm4gUih0LDA9PT10LmF2YWlsX291dD8tNTpfKTtpZihpLnN0cm09dCxyPWkubGFzdF9mbHVzaCxpLmxhc3RfZmx1c2g9ZSxpLnN0YXR1cz09PUMpaWYoMj09PWkud3JhcCl0LmFkbGVyPTAsVShpLDMxKSxVKGksMTM5KSxVKGksOCksaS5nemhlYWQ/KFUoaSwoaS5nemhlYWQudGV4dD8xOjApKyhpLmd6aGVhZC5oY3JjPzI6MCkrKGkuZ3poZWFkLmV4dHJhPzQ6MCkrKGkuZ3poZWFkLm5hbWU/ODowKSsoaS5nemhlYWQuY29tbWVudD8xNjowKSksVShpLDI1NSZpLmd6aGVhZC50aW1lKSxVKGksaS5nemhlYWQudGltZT4+OCYyNTUpLFUoaSxpLmd6aGVhZC50aW1lPj4xNiYyNTUpLFUoaSxpLmd6aGVhZC50aW1lPj4yNCYyNTUpLFUoaSw5PT09aS5sZXZlbD8yOjI8PWkuc3RyYXRlZ3l8fGkubGV2ZWw8Mj80OjApLFUoaSwyNTUmaS5nemhlYWQub3MpLGkuZ3poZWFkLmV4dHJhJiZpLmd6aGVhZC5leHRyYS5sZW5ndGgmJihVKGksMjU1JmkuZ3poZWFkLmV4dHJhLmxlbmd0aCksVShpLGkuZ3poZWFkLmV4dHJhLmxlbmd0aD4+OCYyNTUpKSxpLmd6aGVhZC5oY3JjJiYodC5hZGxlcj1wKHQuYWRsZXIsaS5wZW5kaW5nX2J1ZixpLnBlbmRpbmcsMCkpLGkuZ3ppbmRleD0wLGkuc3RhdHVzPTY5KTooVShpLDApLFUoaSwwKSxVKGksMCksVShpLDApLFUoaSwwKSxVKGksOT09PWkubGV2ZWw/MjoyPD1pLnN0cmF0ZWd5fHxpLmxldmVsPDI/NDowKSxVKGksMyksaS5zdGF0dXM9RSk7ZWxzZXt2YXIgYT12KyhpLndfYml0cy04PDw0KTw8ODthfD0oMjw9aS5zdHJhdGVneXx8aS5sZXZlbDwyPzA6aS5sZXZlbDw2PzE6Nj09PWkubGV2ZWw/MjozKTw8NiwwIT09aS5zdHJzdGFydCYmKGF8PTMyKSxhKz0zMS1hJTMxLGkuc3RhdHVzPUUsUChpLGEpLDAhPT1pLnN0cnN0YXJ0JiYoUChpLHQuYWRsZXI+Pj4xNiksUChpLDY1NTM1JnQuYWRsZXIpKSx0LmFkbGVyPTF9aWYoNjk9PT1pLnN0YXR1cylpZihpLmd6aGVhZC5leHRyYSl7Zm9yKG49aS5wZW5kaW5nO2kuZ3ppbmRleDwoNjU1MzUmaS5nemhlYWQuZXh0cmEubGVuZ3RoKSYmKGkucGVuZGluZyE9PWkucGVuZGluZ19idWZfc2l6ZXx8KGkuZ3poZWFkLmhjcmMmJmkucGVuZGluZz5uJiYodC5hZGxlcj1wKHQuYWRsZXIsaS5wZW5kaW5nX2J1ZixpLnBlbmRpbmctbixuKSksRih0KSxuPWkucGVuZGluZyxpLnBlbmRpbmchPT1pLnBlbmRpbmdfYnVmX3NpemUpKTspVShpLDI1NSZpLmd6aGVhZC5leHRyYVtpLmd6aW5kZXhdKSxpLmd6aW5kZXgrKztpLmd6aGVhZC5oY3JjJiZpLnBlbmRpbmc+biYmKHQuYWRsZXI9cCh0LmFkbGVyLGkucGVuZGluZ19idWYsaS5wZW5kaW5nLW4sbikpLGkuZ3ppbmRleD09PWkuZ3poZWFkLmV4dHJhLmxlbmd0aCYmKGkuZ3ppbmRleD0wLGkuc3RhdHVzPTczKX1lbHNlIGkuc3RhdHVzPTczO2lmKDczPT09aS5zdGF0dXMpaWYoaS5nemhlYWQubmFtZSl7bj1pLnBlbmRpbmc7ZG97aWYoaS5wZW5kaW5nPT09aS5wZW5kaW5nX2J1Zl9zaXplJiYoaS5nemhlYWQuaGNyYyYmaS5wZW5kaW5nPm4mJih0LmFkbGVyPXAodC5hZGxlcixpLnBlbmRpbmdfYnVmLGkucGVuZGluZy1uLG4pKSxGKHQpLG49aS5wZW5kaW5nLGkucGVuZGluZz09PWkucGVuZGluZ19idWZfc2l6ZSkpe3M9MTticmVha31zPWkuZ3ppbmRleDxpLmd6aGVhZC5uYW1lLmxlbmd0aD8yNTUmaS5nemhlYWQubmFtZS5jaGFyQ29kZUF0KGkuZ3ppbmRleCsrKTowLFUoaSxzKX13aGlsZSgwIT09cyk7aS5nemhlYWQuaGNyYyYmaS5wZW5kaW5nPm4mJih0LmFkbGVyPXAodC5hZGxlcixpLnBlbmRpbmdfYnVmLGkucGVuZGluZy1uLG4pKSwwPT09cyYmKGkuZ3ppbmRleD0wLGkuc3RhdHVzPTkxKX1lbHNlIGkuc3RhdHVzPTkxO2lmKDkxPT09aS5zdGF0dXMpaWYoaS5nemhlYWQuY29tbWVudCl7bj1pLnBlbmRpbmc7ZG97aWYoaS5wZW5kaW5nPT09aS5wZW5kaW5nX2J1Zl9zaXplJiYoaS5nemhlYWQuaGNyYyYmaS5wZW5kaW5nPm4mJih0LmFkbGVyPXAodC5hZGxlcixpLnBlbmRpbmdfYnVmLGkucGVuZGluZy1uLG4pKSxGKHQpLG49aS5wZW5kaW5nLGkucGVuZGluZz09PWkucGVuZGluZ19idWZfc2l6ZSkpe3M9MTticmVha31zPWkuZ3ppbmRleDxpLmd6aGVhZC5jb21tZW50Lmxlbmd0aD8yNTUmaS5nemhlYWQuY29tbWVudC5jaGFyQ29kZUF0KGkuZ3ppbmRleCsrKTowLFUoaSxzKX13aGlsZSgwIT09cyk7aS5nemhlYWQuaGNyYyYmaS5wZW5kaW5nPm4mJih0LmFkbGVyPXAodC5hZGxlcixpLnBlbmRpbmdfYnVmLGkucGVuZGluZy1uLG4pKSwwPT09cyYmKGkuc3RhdHVzPTEwMyl9ZWxzZSBpLnN0YXR1cz0xMDM7aWYoMTAzPT09aS5zdGF0dXMmJihpLmd6aGVhZC5oY3JjPyhpLnBlbmRpbmcrMj5pLnBlbmRpbmdfYnVmX3NpemUmJkYodCksaS5wZW5kaW5nKzI8PWkucGVuZGluZ19idWZfc2l6ZSYmKFUoaSwyNTUmdC5hZGxlciksVShpLHQuYWRsZXI+PjgmMjU1KSx0LmFkbGVyPTAsaS5zdGF0dXM9RSkpOmkuc3RhdHVzPUUpLDAhPT1pLnBlbmRpbmcpe2lmKEYodCksMD09PXQuYXZhaWxfb3V0KXJldHVybiBpLmxhc3RfZmx1c2g9LTEsbX1lbHNlIGlmKDA9PT10LmF2YWlsX2luJiZUKGUpPD1UKHIpJiZlIT09ZilyZXR1cm4gUih0LC01KTtpZig2NjY9PT1pLnN0YXR1cyYmMCE9PXQuYXZhaWxfaW4pcmV0dXJuIFIodCwtNSk7aWYoMCE9PXQuYXZhaWxfaW58fDAhPT1pLmxvb2thaGVhZHx8ZSE9PWwmJjY2NiE9PWkuc3RhdHVzKXt2YXIgbz0yPT09aS5zdHJhdGVneT9mdW5jdGlvbih0LGUpe2Zvcih2YXIgcjs7KXtpZigwPT09dC5sb29rYWhlYWQmJihqKHQpLDA9PT10Lmxvb2thaGVhZCkpe2lmKGU9PT1sKXJldHVybiBBO2JyZWFrfWlmKHQubWF0Y2hfbGVuZ3RoPTAscj11Ll90cl90YWxseSh0LDAsdC53aW5kb3dbdC5zdHJzdGFydF0pLHQubG9va2FoZWFkLS0sdC5zdHJzdGFydCsrLHImJihOKHQsITEpLDA9PT10LnN0cm0uYXZhaWxfb3V0KSlyZXR1cm4gQX1yZXR1cm4gdC5pbnNlcnQ9MCxlPT09Zj8oTih0LCEwKSwwPT09dC5zdHJtLmF2YWlsX291dD9POkIpOnQubGFzdF9saXQmJihOKHQsITEpLDA9PT10LnN0cm0uYXZhaWxfb3V0KT9BOkl9KGksZSk6Mz09PWkuc3RyYXRlZ3k/ZnVuY3Rpb24odCxlKXtmb3IodmFyIHIsaSxuLHMsYT10LndpbmRvdzs7KXtpZih0Lmxvb2thaGVhZDw9Uyl7aWYoaih0KSx0Lmxvb2thaGVhZDw9UyYmZT09PWwpcmV0dXJuIEE7aWYoMD09PXQubG9va2FoZWFkKWJyZWFrfWlmKHQubWF0Y2hfbGVuZ3RoPTAsdC5sb29rYWhlYWQ+PXgmJjA8dC5zdHJzdGFydCYmKGk9YVtuPXQuc3Ryc3RhcnQtMV0pPT09YVsrK25dJiZpPT09YVsrK25dJiZpPT09YVsrK25dKXtzPXQuc3Ryc3RhcnQrUztkb3t9d2hpbGUoaT09PWFbKytuXSYmaT09PWFbKytuXSYmaT09PWFbKytuXSYmaT09PWFbKytuXSYmaT09PWFbKytuXSYmaT09PWFbKytuXSYmaT09PWFbKytuXSYmaT09PWFbKytuXSYmbjxzKTt0Lm1hdGNoX2xlbmd0aD1TLShzLW4pLHQubWF0Y2hfbGVuZ3RoPnQubG9va2FoZWFkJiYodC5tYXRjaF9sZW5ndGg9dC5sb29rYWhlYWQpfWlmKHQubWF0Y2hfbGVuZ3RoPj14PyhyPXUuX3RyX3RhbGx5KHQsMSx0Lm1hdGNoX2xlbmd0aC14KSx0Lmxvb2thaGVhZC09dC5tYXRjaF9sZW5ndGgsdC5zdHJzdGFydCs9dC5tYXRjaF9sZW5ndGgsdC5tYXRjaF9sZW5ndGg9MCk6KHI9dS5fdHJfdGFsbHkodCwwLHQud2luZG93W3Quc3Ryc3RhcnRdKSx0Lmxvb2thaGVhZC0tLHQuc3Ryc3RhcnQrKyksciYmKE4odCwhMSksMD09PXQuc3RybS5hdmFpbF9vdXQpKXJldHVybiBBfXJldHVybiB0Lmluc2VydD0wLGU9PT1mPyhOKHQsITApLDA9PT10LnN0cm0uYXZhaWxfb3V0P086Qik6dC5sYXN0X2xpdCYmKE4odCwhMSksMD09PXQuc3RybS5hdmFpbF9vdXQpP0E6SX0oaSxlKTpoW2kubGV2ZWxdLmZ1bmMoaSxlKTtpZihvIT09TyYmbyE9PUJ8fChpLnN0YXR1cz02NjYpLG89PT1BfHxvPT09TylyZXR1cm4gMD09PXQuYXZhaWxfb3V0JiYoaS5sYXN0X2ZsdXNoPS0xKSxtO2lmKG89PT1JJiYoMT09PWU/dS5fdHJfYWxpZ24oaSk6NSE9PWUmJih1Ll90cl9zdG9yZWRfYmxvY2soaSwwLDAsITEpLDM9PT1lJiYoRChpLmhlYWQpLDA9PT1pLmxvb2thaGVhZCYmKGkuc3Ryc3RhcnQ9MCxpLmJsb2NrX3N0YXJ0PTAsaS5pbnNlcnQ9MCkpKSxGKHQpLDA9PT10LmF2YWlsX291dCkpcmV0dXJuIGkubGFzdF9mbHVzaD0tMSxtfXJldHVybiBlIT09Zj9tOmkud3JhcDw9MD8xOigyPT09aS53cmFwPyhVKGksMjU1JnQuYWRsZXIpLFUoaSx0LmFkbGVyPj44JjI1NSksVShpLHQuYWRsZXI+PjE2JjI1NSksVShpLHQuYWRsZXI+PjI0JjI1NSksVShpLDI1NSZ0LnRvdGFsX2luKSxVKGksdC50b3RhbF9pbj4+OCYyNTUpLFUoaSx0LnRvdGFsX2luPj4xNiYyNTUpLFUoaSx0LnRvdGFsX2luPj4yNCYyNTUpKTooUChpLHQuYWRsZXI+Pj4xNiksUChpLDY1NTM1JnQuYWRsZXIpKSxGKHQpLDA8aS53cmFwJiYoaS53cmFwPS1pLndyYXApLDAhPT1pLnBlbmRpbmc/bToxKX0sci5kZWZsYXRlRW5kPWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiB0JiZ0LnN0YXRlPyhlPXQuc3RhdGUuc3RhdHVzKSE9PUMmJjY5IT09ZSYmNzMhPT1lJiY5MSE9PWUmJjEwMyE9PWUmJmUhPT1FJiY2NjYhPT1lP1IodCxfKToodC5zdGF0ZT1udWxsLGU9PT1FP1IodCwtMyk6bSk6X30sci5kZWZsYXRlU2V0RGljdGlvbmFyeT1mdW5jdGlvbih0LGUpe3ZhciByLGksbixzLGEsbyxoLHUsbD1lLmxlbmd0aDtpZighdHx8IXQuc3RhdGUpcmV0dXJuIF87aWYoMj09PShzPShyPXQuc3RhdGUpLndyYXApfHwxPT09cyYmci5zdGF0dXMhPT1DfHxyLmxvb2thaGVhZClyZXR1cm4gXztmb3IoMT09PXMmJih0LmFkbGVyPWModC5hZGxlcixlLGwsMCkpLHIud3JhcD0wLGw+PXIud19zaXplJiYoMD09PXMmJihEKHIuaGVhZCksci5zdHJzdGFydD0wLHIuYmxvY2tfc3RhcnQ9MCxyLmluc2VydD0wKSx1PW5ldyBkLkJ1Zjgoci53X3NpemUpLGQuYXJyYXlTZXQodSxlLGwtci53X3NpemUsci53X3NpemUsMCksZT11LGw9ci53X3NpemUpLGE9dC5hdmFpbF9pbixvPXQubmV4dF9pbixoPXQuaW5wdXQsdC5hdmFpbF9pbj1sLHQubmV4dF9pbj0wLHQuaW5wdXQ9ZSxqKHIpO3IubG9va2FoZWFkPj14Oyl7Zm9yKGk9ci5zdHJzdGFydCxuPXIubG9va2FoZWFkLSh4LTEpO3IuaW5zX2g9KHIuaW5zX2g8PHIuaGFzaF9zaGlmdF5yLndpbmRvd1tpK3gtMV0pJnIuaGFzaF9tYXNrLHIucHJldltpJnIud19tYXNrXT1yLmhlYWRbci5pbnNfaF0sci5oZWFkW3IuaW5zX2hdPWksaSsrLC0tbjspO3Iuc3Ryc3RhcnQ9aSxyLmxvb2thaGVhZD14LTEsaihyKX1yZXR1cm4gci5zdHJzdGFydCs9ci5sb29rYWhlYWQsci5ibG9ja19zdGFydD1yLnN0cnN0YXJ0LHIuaW5zZXJ0PXIubG9va2FoZWFkLHIubG9va2FoZWFkPTAsci5tYXRjaF9sZW5ndGg9ci5wcmV2X2xlbmd0aD14LTEsci5tYXRjaF9hdmFpbGFibGU9MCx0Lm5leHRfaW49byx0LmlucHV0PWgsdC5hdmFpbF9pbj1hLHIud3JhcD1zLG19LHIuZGVmbGF0ZUluZm89XCJwYWtvIGRlZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpXCJ9LHtcIi4uL3V0aWxzL2NvbW1vblwiOjQxLFwiLi9hZGxlcjMyXCI6NDMsXCIuL2NyYzMyXCI6NDUsXCIuL21lc3NhZ2VzXCI6NTEsXCIuL3RyZWVzXCI6NTJ9XSw0NzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbigpe3RoaXMudGV4dD0wLHRoaXMudGltZT0wLHRoaXMueGZsYWdzPTAsdGhpcy5vcz0wLHRoaXMuZXh0cmE9bnVsbCx0aGlzLmV4dHJhX2xlbj0wLHRoaXMubmFtZT1cIlwiLHRoaXMuY29tbWVudD1cIlwiLHRoaXMuaGNyYz0wLHRoaXMuZG9uZT0hMX19LHt9XSw0ODpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3ZhciByLGksbixzLGEsbyxoLHUsbCxmLGQsYyxwLG0sXyxnLGIsdix5LHcsayx4LFMseixDO3I9dC5zdGF0ZSxpPXQubmV4dF9pbix6PXQuaW5wdXQsbj1pKyh0LmF2YWlsX2luLTUpLHM9dC5uZXh0X291dCxDPXQub3V0cHV0LGE9cy0oZS10LmF2YWlsX291dCksbz1zKyh0LmF2YWlsX291dC0yNTcpLGg9ci5kbWF4LHU9ci53c2l6ZSxsPXIud2hhdmUsZj1yLnduZXh0LGQ9ci53aW5kb3csYz1yLmhvbGQscD1yLmJpdHMsbT1yLmxlbmNvZGUsXz1yLmRpc3Rjb2RlLGc9KDE8PHIubGVuYml0cyktMSxiPSgxPDxyLmRpc3RiaXRzKS0xO3Q6ZG97cDwxNSYmKGMrPXpbaSsrXTw8cCxwKz04LGMrPXpbaSsrXTw8cCxwKz04KSx2PW1bYyZnXTtlOmZvcig7Oyl7aWYoYz4+Pj15PXY+Pj4yNCxwLT15LDA9PT0oeT12Pj4+MTYmMjU1KSlDW3MrK109NjU1MzUmdjtlbHNle2lmKCEoMTYmeSkpe2lmKDA9PSg2NCZ5KSl7dj1tWyg2NTUzNSZ2KSsoYyYoMTw8eSktMSldO2NvbnRpbnVlIGV9aWYoMzImeSl7ci5tb2RlPTEyO2JyZWFrIHR9dC5tc2c9XCJpbnZhbGlkIGxpdGVyYWwvbGVuZ3RoIGNvZGVcIixyLm1vZGU9MzA7YnJlYWsgdH13PTY1NTM1JnYsKHkmPTE1KSYmKHA8eSYmKGMrPXpbaSsrXTw8cCxwKz04KSx3Kz1jJigxPDx5KS0xLGM+Pj49eSxwLT15KSxwPDE1JiYoYys9eltpKytdPDxwLHArPTgsYys9eltpKytdPDxwLHArPTgpLHY9X1tjJmJdO3I6Zm9yKDs7KXtpZihjPj4+PXk9dj4+PjI0LHAtPXksISgxNiYoeT12Pj4+MTYmMjU1KSkpe2lmKDA9PSg2NCZ5KSl7dj1fWyg2NTUzNSZ2KSsoYyYoMTw8eSktMSldO2NvbnRpbnVlIHJ9dC5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIGNvZGVcIixyLm1vZGU9MzA7YnJlYWsgdH1pZihrPTY1NTM1JnYscDwoeSY9MTUpJiYoYys9eltpKytdPDxwLChwKz04KTx5JiYoYys9eltpKytdPDxwLHArPTgpKSxoPChrKz1jJigxPDx5KS0xKSl7dC5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLHIubW9kZT0zMDticmVhayB0fWlmKGM+Pj49eSxwLT15LCh5PXMtYSk8ayl7aWYobDwoeT1rLXkpJiZyLnNhbmUpe3QubXNnPVwiaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2tcIixyLm1vZGU9MzA7YnJlYWsgdH1pZihTPWQsKHg9MCk9PT1mKXtpZih4Kz11LXkseTx3KXtmb3Iody09eTtDW3MrK109ZFt4KytdLC0teTspO3g9cy1rLFM9Q319ZWxzZSBpZihmPHkpe2lmKHgrPXUrZi15LCh5LT1mKTx3KXtmb3Iody09eTtDW3MrK109ZFt4KytdLC0teTspO2lmKHg9MCxmPHcpe2Zvcih3LT15PWY7Q1tzKytdPWRbeCsrXSwtLXk7KTt4PXMtayxTPUN9fX1lbHNlIGlmKHgrPWYteSx5PHcpe2Zvcih3LT15O0NbcysrXT1kW3grK10sLS15Oyk7eD1zLWssUz1DfWZvcig7Mjx3OylDW3MrK109U1t4KytdLENbcysrXT1TW3grK10sQ1tzKytdPVNbeCsrXSx3LT0zO3cmJihDW3MrK109U1t4KytdLDE8dyYmKENbcysrXT1TW3grK10pKX1lbHNle2Zvcih4PXMtaztDW3MrK109Q1t4KytdLENbcysrXT1DW3grK10sQ1tzKytdPUNbeCsrXSwyPCh3LT0zKTspO3cmJihDW3MrK109Q1t4KytdLDE8dyYmKENbcysrXT1DW3grK10pKX1icmVha319YnJlYWt9fXdoaWxlKGk8biYmczxvKTtpLT13PXA+PjMsYyY9KDE8PChwLT13PDwzKSktMSx0Lm5leHRfaW49aSx0Lm5leHRfb3V0PXMsdC5hdmFpbF9pbj1pPG4/bi1pKzU6NS0oaS1uKSx0LmF2YWlsX291dD1zPG8/by1zKzI1NzoyNTctKHMtbyksci5ob2xkPWMsci5iaXRzPXB9fSx7fV0sNDk6W2Z1bmN0aW9uKHQsZSxyKXtcInVzZSBzdHJpY3RcIjt2YXIgST10KFwiLi4vdXRpbHMvY29tbW9uXCIpLE89dChcIi4vYWRsZXIzMlwiKSxCPXQoXCIuL2NyYzMyXCIpLFI9dChcIi4vaW5mZmFzdFwiKSxUPXQoXCIuL2luZnRyZWVzXCIpLEQ9MSxGPTIsTj0wLFU9LTIsUD0xLGk9ODUyLG49NTkyO2Z1bmN0aW9uIEwodCl7cmV0dXJuKHQ+Pj4yNCYyNTUpKyh0Pj4+OCY2NTI4MCkrKCg2NTI4MCZ0KTw8OCkrKCgyNTUmdCk8PDI0KX1mdW5jdGlvbiBzKCl7dGhpcy5tb2RlPTAsdGhpcy5sYXN0PSExLHRoaXMud3JhcD0wLHRoaXMuaGF2ZWRpY3Q9ITEsdGhpcy5mbGFncz0wLHRoaXMuZG1heD0wLHRoaXMuY2hlY2s9MCx0aGlzLnRvdGFsPTAsdGhpcy5oZWFkPW51bGwsdGhpcy53Yml0cz0wLHRoaXMud3NpemU9MCx0aGlzLndoYXZlPTAsdGhpcy53bmV4dD0wLHRoaXMud2luZG93PW51bGwsdGhpcy5ob2xkPTAsdGhpcy5iaXRzPTAsdGhpcy5sZW5ndGg9MCx0aGlzLm9mZnNldD0wLHRoaXMuZXh0cmE9MCx0aGlzLmxlbmNvZGU9bnVsbCx0aGlzLmRpc3Rjb2RlPW51bGwsdGhpcy5sZW5iaXRzPTAsdGhpcy5kaXN0Yml0cz0wLHRoaXMubmNvZGU9MCx0aGlzLm5sZW49MCx0aGlzLm5kaXN0PTAsdGhpcy5oYXZlPTAsdGhpcy5uZXh0PW51bGwsdGhpcy5sZW5zPW5ldyBJLkJ1ZjE2KDMyMCksdGhpcy53b3JrPW5ldyBJLkJ1ZjE2KDI4OCksdGhpcy5sZW5keW49bnVsbCx0aGlzLmRpc3RkeW49bnVsbCx0aGlzLnNhbmU9MCx0aGlzLmJhY2s9MCx0aGlzLndhcz0wfWZ1bmN0aW9uIGEodCl7dmFyIGU7cmV0dXJuIHQmJnQuc3RhdGU/KGU9dC5zdGF0ZSx0LnRvdGFsX2luPXQudG90YWxfb3V0PWUudG90YWw9MCx0Lm1zZz1cIlwiLGUud3JhcCYmKHQuYWRsZXI9MSZlLndyYXApLGUubW9kZT1QLGUubGFzdD0wLGUuaGF2ZWRpY3Q9MCxlLmRtYXg9MzI3NjgsZS5oZWFkPW51bGwsZS5ob2xkPTAsZS5iaXRzPTAsZS5sZW5jb2RlPWUubGVuZHluPW5ldyBJLkJ1ZjMyKGkpLGUuZGlzdGNvZGU9ZS5kaXN0ZHluPW5ldyBJLkJ1ZjMyKG4pLGUuc2FuZT0xLGUuYmFjaz0tMSxOKTpVfWZ1bmN0aW9uIG8odCl7dmFyIGU7cmV0dXJuIHQmJnQuc3RhdGU/KChlPXQuc3RhdGUpLndzaXplPTAsZS53aGF2ZT0wLGUud25leHQ9MCxhKHQpKTpVfWZ1bmN0aW9uIGgodCxlKXt2YXIgcixpO3JldHVybiB0JiZ0LnN0YXRlPyhpPXQuc3RhdGUsZTwwPyhyPTAsZT0tZSk6KHI9MSsoZT4+NCksZTw0OCYmKGUmPTE1KSksZSYmKGU8OHx8MTU8ZSk/VToobnVsbCE9PWkud2luZG93JiZpLndiaXRzIT09ZSYmKGkud2luZG93PW51bGwpLGkud3JhcD1yLGkud2JpdHM9ZSxvKHQpKSk6VX1mdW5jdGlvbiB1KHQsZSl7dmFyIHIsaTtyZXR1cm4gdD8oaT1uZXcgcywodC5zdGF0ZT1pKS53aW5kb3c9bnVsbCwocj1oKHQsZSkpIT09TiYmKHQuc3RhdGU9bnVsbCkscik6VX12YXIgbCxmLGQ9ITA7ZnVuY3Rpb24gaih0KXtpZihkKXt2YXIgZTtmb3IobD1uZXcgSS5CdWYzMig1MTIpLGY9bmV3IEkuQnVmMzIoMzIpLGU9MDtlPDE0NDspdC5sZW5zW2UrK109ODtmb3IoO2U8MjU2Oyl0LmxlbnNbZSsrXT05O2Zvcig7ZTwyODA7KXQubGVuc1tlKytdPTc7Zm9yKDtlPDI4ODspdC5sZW5zW2UrK109ODtmb3IoVChELHQubGVucywwLDI4OCxsLDAsdC53b3JrLHtiaXRzOjl9KSxlPTA7ZTwzMjspdC5sZW5zW2UrK109NTtUKEYsdC5sZW5zLDAsMzIsZiwwLHQud29yayx7Yml0czo1fSksZD0hMX10LmxlbmNvZGU9bCx0LmxlbmJpdHM9OSx0LmRpc3Rjb2RlPWYsdC5kaXN0Yml0cz01fWZ1bmN0aW9uIFoodCxlLHIsaSl7dmFyIG4scz10LnN0YXRlO3JldHVybiBudWxsPT09cy53aW5kb3cmJihzLndzaXplPTE8PHMud2JpdHMscy53bmV4dD0wLHMud2hhdmU9MCxzLndpbmRvdz1uZXcgSS5CdWY4KHMud3NpemUpKSxpPj1zLndzaXplPyhJLmFycmF5U2V0KHMud2luZG93LGUsci1zLndzaXplLHMud3NpemUsMCkscy53bmV4dD0wLHMud2hhdmU9cy53c2l6ZSk6KGk8KG49cy53c2l6ZS1zLnduZXh0KSYmKG49aSksSS5hcnJheVNldChzLndpbmRvdyxlLHItaSxuLHMud25leHQpLChpLT1uKT8oSS5hcnJheVNldChzLndpbmRvdyxlLHItaSxpLDApLHMud25leHQ9aSxzLndoYXZlPXMud3NpemUpOihzLnduZXh0Kz1uLHMud25leHQ9PT1zLndzaXplJiYocy53bmV4dD0wKSxzLndoYXZlPHMud3NpemUmJihzLndoYXZlKz1uKSkpLDB9ci5pbmZsYXRlUmVzZXQ9byxyLmluZmxhdGVSZXNldDI9aCxyLmluZmxhdGVSZXNldEtlZXA9YSxyLmluZmxhdGVJbml0PWZ1bmN0aW9uKHQpe3JldHVybiB1KHQsMTUpfSxyLmluZmxhdGVJbml0Mj11LHIuaW5mbGF0ZT1mdW5jdGlvbih0LGUpe3ZhciByLGksbixzLGEsbyxoLHUsbCxmLGQsYyxwLG0sXyxnLGIsdix5LHcsayx4LFMseixDPTAsRT1uZXcgSS5CdWY4KDQpLEE9WzE2LDE3LDE4LDAsOCw3LDksNiwxMCw1LDExLDQsMTIsMywxMywyLDE0LDEsMTVdO2lmKCF0fHwhdC5zdGF0ZXx8IXQub3V0cHV0fHwhdC5pbnB1dCYmMCE9PXQuYXZhaWxfaW4pcmV0dXJuIFU7MTI9PT0ocj10LnN0YXRlKS5tb2RlJiYoci5tb2RlPTEzKSxhPXQubmV4dF9vdXQsbj10Lm91dHB1dCxoPXQuYXZhaWxfb3V0LHM9dC5uZXh0X2luLGk9dC5pbnB1dCxvPXQuYXZhaWxfaW4sdT1yLmhvbGQsbD1yLmJpdHMsZj1vLGQ9aCx4PU47dDpmb3IoOzspc3dpdGNoKHIubW9kZSl7Y2FzZSBQOmlmKDA9PT1yLndyYXApe3IubW9kZT0xMzticmVha31mb3IoO2w8MTY7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1pZigyJnIud3JhcCYmMzU2MTU9PT11KXtFW3IuY2hlY2s9MF09MjU1JnUsRVsxXT11Pj4+OCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSwyLDApLGw9dT0wLHIubW9kZT0yO2JyZWFrfWlmKHIuZmxhZ3M9MCxyLmhlYWQmJihyLmhlYWQuZG9uZT0hMSksISgxJnIud3JhcCl8fCgoKDI1NSZ1KTw8OCkrKHU+PjgpKSUzMSl7dC5tc2c9XCJpbmNvcnJlY3QgaGVhZGVyIGNoZWNrXCIsci5tb2RlPTMwO2JyZWFrfWlmKDghPSgxNSZ1KSl7dC5tc2c9XCJ1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZFwiLHIubW9kZT0zMDticmVha31pZihsLT00LGs9OCsoMTUmKHU+Pj49NCkpLDA9PT1yLndiaXRzKXIud2JpdHM9aztlbHNlIGlmKGs+ci53Yml0cyl7dC5tc2c9XCJpbnZhbGlkIHdpbmRvdyBzaXplXCIsci5tb2RlPTMwO2JyZWFrfXIuZG1heD0xPDxrLHQuYWRsZXI9ci5jaGVjaz0xLHIubW9kZT01MTImdT8xMDoxMixsPXU9MDticmVhaztjYXNlIDI6Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYoci5mbGFncz11LDghPSgyNTUmci5mbGFncykpe3QubXNnPVwidW5rbm93biBjb21wcmVzc2lvbiBtZXRob2RcIixyLm1vZGU9MzA7YnJlYWt9aWYoNTczNDQmci5mbGFncyl7dC5tc2c9XCJ1bmtub3duIGhlYWRlciBmbGFncyBzZXRcIixyLm1vZGU9MzA7YnJlYWt9ci5oZWFkJiYoci5oZWFkLnRleHQ9dT4+OCYxKSw1MTImci5mbGFncyYmKEVbMF09MjU1JnUsRVsxXT11Pj4+OCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSwyLDApKSxsPXU9MCxyLm1vZGU9MztjYXNlIDM6Zm9yKDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9ci5oZWFkJiYoci5oZWFkLnRpbWU9dSksNTEyJnIuZmxhZ3MmJihFWzBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LEVbMl09dT4+PjE2JjI1NSxFWzNdPXU+Pj4yNCYyNTUsci5jaGVjaz1CKHIuY2hlY2ssRSw0LDApKSxsPXU9MCxyLm1vZGU9NDtjYXNlIDQ6Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9ci5oZWFkJiYoci5oZWFkLnhmbGFncz0yNTUmdSxyLmhlYWQub3M9dT4+OCksNTEyJnIuZmxhZ3MmJihFWzBdPTI1NSZ1LEVbMV09dT4+PjgmMjU1LHIuY2hlY2s9QihyLmNoZWNrLEUsMiwwKSksbD11PTAsci5tb2RlPTU7Y2FzZSA1OmlmKDEwMjQmci5mbGFncyl7Zm9yKDtsPDE2Oyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9ci5sZW5ndGg9dSxyLmhlYWQmJihyLmhlYWQuZXh0cmFfbGVuPXUpLDUxMiZyLmZsYWdzJiYoRVswXT0yNTUmdSxFWzFdPXU+Pj44JjI1NSxyLmNoZWNrPUIoci5jaGVjayxFLDIsMCkpLGw9dT0wfWVsc2Ugci5oZWFkJiYoci5oZWFkLmV4dHJhPW51bGwpO3IubW9kZT02O2Nhc2UgNjppZigxMDI0JnIuZmxhZ3MmJihvPChjPXIubGVuZ3RoKSYmKGM9byksYyYmKHIuaGVhZCYmKGs9ci5oZWFkLmV4dHJhX2xlbi1yLmxlbmd0aCxyLmhlYWQuZXh0cmF8fChyLmhlYWQuZXh0cmE9bmV3IEFycmF5KHIuaGVhZC5leHRyYV9sZW4pKSxJLmFycmF5U2V0KHIuaGVhZC5leHRyYSxpLHMsYyxrKSksNTEyJnIuZmxhZ3MmJihyLmNoZWNrPUIoci5jaGVjayxpLGMscykpLG8tPWMscys9YyxyLmxlbmd0aC09Yyksci5sZW5ndGgpKWJyZWFrIHQ7ci5sZW5ndGg9MCxyLm1vZGU9NztjYXNlIDc6aWYoMjA0OCZyLmZsYWdzKXtpZigwPT09bylicmVhayB0O2ZvcihjPTA7az1pW3MrYysrXSxyLmhlYWQmJmsmJnIubGVuZ3RoPDY1NTM2JiYoci5oZWFkLm5hbWUrPVN0cmluZy5mcm9tQ2hhckNvZGUoaykpLGsmJmM8bzspO2lmKDUxMiZyLmZsYWdzJiYoci5jaGVjaz1CKHIuY2hlY2ssaSxjLHMpKSxvLT1jLHMrPWMsaylicmVhayB0fWVsc2Ugci5oZWFkJiYoci5oZWFkLm5hbWU9bnVsbCk7ci5sZW5ndGg9MCxyLm1vZGU9ODtjYXNlIDg6aWYoNDA5NiZyLmZsYWdzKXtpZigwPT09bylicmVhayB0O2ZvcihjPTA7az1pW3MrYysrXSxyLmhlYWQmJmsmJnIubGVuZ3RoPDY1NTM2JiYoci5oZWFkLmNvbW1lbnQrPVN0cmluZy5mcm9tQ2hhckNvZGUoaykpLGsmJmM8bzspO2lmKDUxMiZyLmZsYWdzJiYoci5jaGVjaz1CKHIuY2hlY2ssaSxjLHMpKSxvLT1jLHMrPWMsaylicmVhayB0fWVsc2Ugci5oZWFkJiYoci5oZWFkLmNvbW1lbnQ9bnVsbCk7ci5tb2RlPTk7Y2FzZSA5OmlmKDUxMiZyLmZsYWdzKXtmb3IoO2w8MTY7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1pZih1IT09KDY1NTM1JnIuY2hlY2spKXt0Lm1zZz1cImhlYWRlciBjcmMgbWlzbWF0Y2hcIixyLm1vZGU9MzA7YnJlYWt9bD11PTB9ci5oZWFkJiYoci5oZWFkLmhjcmM9ci5mbGFncz4+OSYxLHIuaGVhZC5kb25lPSEwKSx0LmFkbGVyPXIuY2hlY2s9MCxyLm1vZGU9MTI7YnJlYWs7Y2FzZSAxMDpmb3IoO2w8MzI7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH10LmFkbGVyPXIuY2hlY2s9TCh1KSxsPXU9MCxyLm1vZGU9MTE7Y2FzZSAxMTppZigwPT09ci5oYXZlZGljdClyZXR1cm4gdC5uZXh0X291dD1hLHQuYXZhaWxfb3V0PWgsdC5uZXh0X2luPXMsdC5hdmFpbF9pbj1vLHIuaG9sZD11LHIuYml0cz1sLDI7dC5hZGxlcj1yLmNoZWNrPTEsci5tb2RlPTEyO2Nhc2UgMTI6aWYoNT09PWV8fDY9PT1lKWJyZWFrIHQ7Y2FzZSAxMzppZihyLmxhc3Qpe3U+Pj49NyZsLGwtPTcmbCxyLm1vZGU9Mjc7YnJlYWt9Zm9yKDtsPDM7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1zd2l0Y2goci5sYXN0PTEmdSxsLT0xLDMmKHU+Pj49MSkpe2Nhc2UgMDpyLm1vZGU9MTQ7YnJlYWs7Y2FzZSAxOmlmKGoociksci5tb2RlPTIwLDYhPT1lKWJyZWFrO3U+Pj49MixsLT0yO2JyZWFrIHQ7Y2FzZSAyOnIubW9kZT0xNzticmVhaztjYXNlIDM6dC5tc2c9XCJpbnZhbGlkIGJsb2NrIHR5cGVcIixyLm1vZGU9MzB9dT4+Pj0yLGwtPTI7YnJlYWs7Y2FzZSAxNDpmb3IodT4+Pj03JmwsbC09NyZsO2w8MzI7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1pZigoNjU1MzUmdSkhPSh1Pj4+MTZeNjU1MzUpKXt0Lm1zZz1cImludmFsaWQgc3RvcmVkIGJsb2NrIGxlbmd0aHNcIixyLm1vZGU9MzA7YnJlYWt9aWYoci5sZW5ndGg9NjU1MzUmdSxsPXU9MCxyLm1vZGU9MTUsNj09PWUpYnJlYWsgdDtjYXNlIDE1OnIubW9kZT0xNjtjYXNlIDE2OmlmKGM9ci5sZW5ndGgpe2lmKG88YyYmKGM9byksaDxjJiYoYz1oKSwwPT09YylicmVhayB0O0kuYXJyYXlTZXQobixpLHMsYyxhKSxvLT1jLHMrPWMsaC09YyxhKz1jLHIubGVuZ3RoLT1jO2JyZWFrfXIubW9kZT0xMjticmVhaztjYXNlIDE3OmZvcig7bDwxNDspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fWlmKHIubmxlbj0yNTcrKDMxJnUpLHU+Pj49NSxsLT01LHIubmRpc3Q9MSsoMzEmdSksdT4+Pj01LGwtPTUsci5uY29kZT00KygxNSZ1KSx1Pj4+PTQsbC09NCwyODY8ci5ubGVufHwzMDxyLm5kaXN0KXt0Lm1zZz1cInRvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzXCIsci5tb2RlPTMwO2JyZWFrfXIuaGF2ZT0wLHIubW9kZT0xODtjYXNlIDE4OmZvcig7ci5oYXZlPHIubmNvZGU7KXtmb3IoO2w8Mzspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fXIubGVuc1tBW3IuaGF2ZSsrXV09NyZ1LHU+Pj49MyxsLT0zfWZvcig7ci5oYXZlPDE5OylyLmxlbnNbQVtyLmhhdmUrK11dPTA7aWYoci5sZW5jb2RlPXIubGVuZHluLHIubGVuYml0cz03LFM9e2JpdHM6ci5sZW5iaXRzfSx4PVQoMCxyLmxlbnMsMCwxOSxyLmxlbmNvZGUsMCxyLndvcmssUyksci5sZW5iaXRzPVMuYml0cyx4KXt0Lm1zZz1cImludmFsaWQgY29kZSBsZW5ndGhzIHNldFwiLHIubW9kZT0zMDticmVha31yLmhhdmU9MCxyLm1vZGU9MTk7Y2FzZSAxOTpmb3IoO3IuaGF2ZTxyLm5sZW4rci5uZGlzdDspe2Zvcig7Zz0oQz1yLmxlbmNvZGVbdSYoMTw8ci5sZW5iaXRzKS0xXSk+Pj4xNiYyNTUsYj02NTUzNSZDLCEoKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1pZihiPDE2KXU+Pj49XyxsLT1fLHIubGVuc1tyLmhhdmUrK109YjtlbHNle2lmKDE2PT09Yil7Zm9yKHo9XysyO2w8ejspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fWlmKHU+Pj49XyxsLT1fLDA9PT1yLmhhdmUpe3QubXNnPVwiaW52YWxpZCBiaXQgbGVuZ3RoIHJlcGVhdFwiLHIubW9kZT0zMDticmVha31rPXIubGVuc1tyLmhhdmUtMV0sYz0zKygzJnUpLHU+Pj49MixsLT0yfWVsc2UgaWYoMTc9PT1iKXtmb3Ioej1fKzM7bDx6Oyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9bC09XyxrPTAsYz0zKyg3Jih1Pj4+PV8pKSx1Pj4+PTMsbC09M31lbHNle2Zvcih6PV8rNztsPHo7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1sLT1fLGs9MCxjPTExKygxMjcmKHU+Pj49XykpLHU+Pj49NyxsLT03fWlmKHIuaGF2ZStjPnIubmxlbityLm5kaXN0KXt0Lm1zZz1cImludmFsaWQgYml0IGxlbmd0aCByZXBlYXRcIixyLm1vZGU9MzA7YnJlYWt9Zm9yKDtjLS07KXIubGVuc1tyLmhhdmUrK109a319aWYoMzA9PT1yLm1vZGUpYnJlYWs7aWYoMD09PXIubGVuc1syNTZdKXt0Lm1zZz1cImludmFsaWQgY29kZSAtLSBtaXNzaW5nIGVuZC1vZi1ibG9ja1wiLHIubW9kZT0zMDticmVha31pZihyLmxlbmJpdHM9OSxTPXtiaXRzOnIubGVuYml0c30seD1UKEQsci5sZW5zLDAsci5ubGVuLHIubGVuY29kZSwwLHIud29yayxTKSxyLmxlbmJpdHM9Uy5iaXRzLHgpe3QubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aHMgc2V0XCIsci5tb2RlPTMwO2JyZWFrfWlmKHIuZGlzdGJpdHM9NixyLmRpc3Rjb2RlPXIuZGlzdGR5bixTPXtiaXRzOnIuZGlzdGJpdHN9LHg9VChGLHIubGVucyxyLm5sZW4sci5uZGlzdCxyLmRpc3Rjb2RlLDAsci53b3JrLFMpLHIuZGlzdGJpdHM9Uy5iaXRzLHgpe3QubXNnPVwiaW52YWxpZCBkaXN0YW5jZXMgc2V0XCIsci5tb2RlPTMwO2JyZWFrfWlmKHIubW9kZT0yMCw2PT09ZSlicmVhayB0O2Nhc2UgMjA6ci5tb2RlPTIxO2Nhc2UgMjE6aWYoNjw9byYmMjU4PD1oKXt0Lm5leHRfb3V0PWEsdC5hdmFpbF9vdXQ9aCx0Lm5leHRfaW49cyx0LmF2YWlsX2luPW8sci5ob2xkPXUsci5iaXRzPWwsUih0LGQpLGE9dC5uZXh0X291dCxuPXQub3V0cHV0LGg9dC5hdmFpbF9vdXQscz10Lm5leHRfaW4saT10LmlucHV0LG89dC5hdmFpbF9pbix1PXIuaG9sZCxsPXIuYml0cywxMj09PXIubW9kZSYmKHIuYmFjaz0tMSk7YnJlYWt9Zm9yKHIuYmFjaz0wO2c9KEM9ci5sZW5jb2RlW3UmKDE8PHIubGVuYml0cyktMV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKChfPUM+Pj4yNCk8PWwpOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYoZyYmMD09KDI0MCZnKSl7Zm9yKHY9Xyx5PWcsdz1iO2c9KEM9ci5sZW5jb2RlW3crKCh1JigxPDx2K3kpLTEpPj52KV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKHYrKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH11Pj4+PXYsbC09dixyLmJhY2srPXZ9aWYodT4+Pj1fLGwtPV8sci5iYWNrKz1fLHIubGVuZ3RoPWIsMD09PWcpe3IubW9kZT0yNjticmVha31pZigzMiZnKXtyLmJhY2s9LTEsci5tb2RlPTEyO2JyZWFrfWlmKDY0Jmcpe3QubXNnPVwiaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlXCIsci5tb2RlPTMwO2JyZWFrfXIuZXh0cmE9MTUmZyxyLm1vZGU9MjI7Y2FzZSAyMjppZihyLmV4dHJhKXtmb3Ioej1yLmV4dHJhO2w8ejspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHUrPWlbcysrXTw8bCxsKz04fXIubGVuZ3RoKz11JigxPDxyLmV4dHJhKS0xLHU+Pj49ci5leHRyYSxsLT1yLmV4dHJhLHIuYmFjays9ci5leHRyYX1yLndhcz1yLmxlbmd0aCxyLm1vZGU9MjM7Y2FzZSAyMzpmb3IoO2c9KEM9ci5kaXN0Y29kZVt1JigxPDxyLmRpc3RiaXRzKS0xXSk+Pj4xNiYyNTUsYj02NTUzNSZDLCEoKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH1pZigwPT0oMjQwJmcpKXtmb3Iodj1fLHk9Zyx3PWI7Zz0oQz1yLmRpc3Rjb2RlW3crKCh1JigxPDx2K3kpLTEpPj52KV0pPj4+MTYmMjU1LGI9NjU1MzUmQywhKHYrKF89Qz4+PjI0KTw9bCk7KXtpZigwPT09bylicmVhayB0O28tLSx1Kz1pW3MrK108PGwsbCs9OH11Pj4+PXYsbC09dixyLmJhY2srPXZ9aWYodT4+Pj1fLGwtPV8sci5iYWNrKz1fLDY0Jmcpe3QubXNnPVwiaW52YWxpZCBkaXN0YW5jZSBjb2RlXCIsci5tb2RlPTMwO2JyZWFrfXIub2Zmc2V0PWIsci5leHRyYT0xNSZnLHIubW9kZT0yNDtjYXNlIDI0OmlmKHIuZXh0cmEpe2Zvcih6PXIuZXh0cmE7bDx6Oyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9ci5vZmZzZXQrPXUmKDE8PHIuZXh0cmEpLTEsdT4+Pj1yLmV4dHJhLGwtPXIuZXh0cmEsci5iYWNrKz1yLmV4dHJhfWlmKHIub2Zmc2V0PnIuZG1heCl7dC5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLHIubW9kZT0zMDticmVha31yLm1vZGU9MjU7Y2FzZSAyNTppZigwPT09aClicmVhayB0O2lmKGM9ZC1oLHIub2Zmc2V0PmMpe2lmKChjPXIub2Zmc2V0LWMpPnIud2hhdmUmJnIuc2FuZSl7dC5tc2c9XCJpbnZhbGlkIGRpc3RhbmNlIHRvbyBmYXIgYmFja1wiLHIubW9kZT0zMDticmVha31wPWM+ci53bmV4dD8oYy09ci53bmV4dCxyLndzaXplLWMpOnIud25leHQtYyxjPnIubGVuZ3RoJiYoYz1yLmxlbmd0aCksbT1yLndpbmRvd31lbHNlIG09bixwPWEtci5vZmZzZXQsYz1yLmxlbmd0aDtmb3IoaDxjJiYoYz1oKSxoLT1jLHIubGVuZ3RoLT1jO25bYSsrXT1tW3ArK10sLS1jOyk7MD09PXIubGVuZ3RoJiYoci5tb2RlPTIxKTticmVhaztjYXNlIDI2OmlmKDA9PT1oKWJyZWFrIHQ7blthKytdPXIubGVuZ3RoLGgtLSxyLm1vZGU9MjE7YnJlYWs7Y2FzZSAyNzppZihyLndyYXApe2Zvcig7bDwzMjspe2lmKDA9PT1vKWJyZWFrIHQ7by0tLHV8PWlbcysrXTw8bCxsKz04fWlmKGQtPWgsdC50b3RhbF9vdXQrPWQsci50b3RhbCs9ZCxkJiYodC5hZGxlcj1yLmNoZWNrPXIuZmxhZ3M/QihyLmNoZWNrLG4sZCxhLWQpOk8oci5jaGVjayxuLGQsYS1kKSksZD1oLChyLmZsYWdzP3U6TCh1KSkhPT1yLmNoZWNrKXt0Lm1zZz1cImluY29ycmVjdCBkYXRhIGNoZWNrXCIsci5tb2RlPTMwO2JyZWFrfWw9dT0wfXIubW9kZT0yODtjYXNlIDI4OmlmKHIud3JhcCYmci5mbGFncyl7Zm9yKDtsPDMyOyl7aWYoMD09PW8pYnJlYWsgdDtvLS0sdSs9aVtzKytdPDxsLGwrPTh9aWYodSE9PSg0Mjk0OTY3Mjk1JnIudG90YWwpKXt0Lm1zZz1cImluY29ycmVjdCBsZW5ndGggY2hlY2tcIixyLm1vZGU9MzA7YnJlYWt9bD11PTB9ci5tb2RlPTI5O2Nhc2UgMjk6eD0xO2JyZWFrIHQ7Y2FzZSAzMDp4PS0zO2JyZWFrIHQ7Y2FzZSAzMTpyZXR1cm4tNDtjYXNlIDMyOmRlZmF1bHQ6cmV0dXJuIFV9cmV0dXJuIHQubmV4dF9vdXQ9YSx0LmF2YWlsX291dD1oLHQubmV4dF9pbj1zLHQuYXZhaWxfaW49byxyLmhvbGQ9dSxyLmJpdHM9bCwoci53c2l6ZXx8ZCE9PXQuYXZhaWxfb3V0JiZyLm1vZGU8MzAmJihyLm1vZGU8Mjd8fDQhPT1lKSkmJloodCx0Lm91dHB1dCx0Lm5leHRfb3V0LGQtdC5hdmFpbF9vdXQpPyhyLm1vZGU9MzEsLTQpOihmLT10LmF2YWlsX2luLGQtPXQuYXZhaWxfb3V0LHQudG90YWxfaW4rPWYsdC50b3RhbF9vdXQrPWQsci50b3RhbCs9ZCxyLndyYXAmJmQmJih0LmFkbGVyPXIuY2hlY2s9ci5mbGFncz9CKHIuY2hlY2ssbixkLHQubmV4dF9vdXQtZCk6TyhyLmNoZWNrLG4sZCx0Lm5leHRfb3V0LWQpKSx0LmRhdGFfdHlwZT1yLmJpdHMrKHIubGFzdD82NDowKSsoMTI9PT1yLm1vZGU/MTI4OjApKygyMD09PXIubW9kZXx8MTU9PT1yLm1vZGU/MjU2OjApLCgwPT1mJiYwPT09ZHx8ND09PWUpJiZ4PT09TiYmKHg9LTUpLHgpfSxyLmluZmxhdGVFbmQ9ZnVuY3Rpb24odCl7aWYoIXR8fCF0LnN0YXRlKXJldHVybiBVO3ZhciBlPXQuc3RhdGU7cmV0dXJuIGUud2luZG93JiYoZS53aW5kb3c9bnVsbCksdC5zdGF0ZT1udWxsLE59LHIuaW5mbGF0ZUdldEhlYWRlcj1mdW5jdGlvbih0LGUpe3ZhciByO3JldHVybiB0JiZ0LnN0YXRlPzA9PSgyJihyPXQuc3RhdGUpLndyYXApP1U6KChyLmhlYWQ9ZSkuZG9uZT0hMSxOKTpVfSxyLmluZmxhdGVTZXREaWN0aW9uYXJ5PWZ1bmN0aW9uKHQsZSl7dmFyIHIsaT1lLmxlbmd0aDtyZXR1cm4gdCYmdC5zdGF0ZT8wIT09KHI9dC5zdGF0ZSkud3JhcCYmMTEhPT1yLm1vZGU/VToxMT09PXIubW9kZSYmTygxLGUsaSwwKSE9PXIuY2hlY2s/LTM6Wih0LGUsaSxpKT8oci5tb2RlPTMxLC00KTooci5oYXZlZGljdD0xLE4pOlV9LHIuaW5mbGF0ZUluZm89XCJwYWtvIGluZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpXCJ9LHtcIi4uL3V0aWxzL2NvbW1vblwiOjQxLFwiLi9hZGxlcjMyXCI6NDMsXCIuL2NyYzMyXCI6NDUsXCIuL2luZmZhc3RcIjo0OCxcIi4vaW5mdHJlZXNcIjo1MH1dLDUwOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7dmFyIEQ9dChcIi4uL3V0aWxzL2NvbW1vblwiKSxGPVszLDQsNSw2LDcsOCw5LDEwLDExLDEzLDE1LDE3LDE5LDIzLDI3LDMxLDM1LDQzLDUxLDU5LDY3LDgzLDk5LDExNSwxMzEsMTYzLDE5NSwyMjcsMjU4LDAsMF0sTj1bMTYsMTYsMTYsMTYsMTYsMTYsMTYsMTYsMTcsMTcsMTcsMTcsMTgsMTgsMTgsMTgsMTksMTksMTksMTksMjAsMjAsMjAsMjAsMjEsMjEsMjEsMjEsMTYsNzIsNzhdLFU9WzEsMiwzLDQsNSw3LDksMTMsMTcsMjUsMzMsNDksNjUsOTcsMTI5LDE5MywyNTcsMzg1LDUxMyw3NjksMTAyNSwxNTM3LDIwNDksMzA3Myw0MDk3LDYxNDUsODE5MywxMjI4OSwxNjM4NSwyNDU3NywwLDBdLFA9WzE2LDE2LDE2LDE2LDE3LDE3LDE4LDE4LDE5LDE5LDIwLDIwLDIxLDIxLDIyLDIyLDIzLDIzLDI0LDI0LDI1LDI1LDI2LDI2LDI3LDI3LDI4LDI4LDI5LDI5LDY0LDY0XTtlLmV4cG9ydHM9ZnVuY3Rpb24odCxlLHIsaSxuLHMsYSxvKXt2YXIgaCx1LGwsZixkLGMscCxtLF8sZz1vLmJpdHMsYj0wLHY9MCx5PTAsdz0wLGs9MCx4PTAsUz0wLHo9MCxDPTAsRT0wLEE9bnVsbCxJPTAsTz1uZXcgRC5CdWYxNigxNiksQj1uZXcgRC5CdWYxNigxNiksUj1udWxsLFQ9MDtmb3IoYj0wO2I8PTE1O2IrKylPW2JdPTA7Zm9yKHY9MDt2PGk7disrKU9bZVtyK3ZdXSsrO2ZvcihrPWcsdz0xNTsxPD13JiYwPT09T1t3XTt3LS0pO2lmKHc8ayYmKGs9dyksMD09PXcpcmV0dXJuIG5bcysrXT0yMDk3MTUyMCxuW3MrK109MjA5NzE1MjAsby5iaXRzPTEsMDtmb3IoeT0xO3k8dyYmMD09PU9beV07eSsrKTtmb3Ioazx5JiYoaz15KSxiPXo9MTtiPD0xNTtiKyspaWYoejw8PTEsKHotPU9bYl0pPDApcmV0dXJuLTE7aWYoMDx6JiYoMD09PXR8fDEhPT13KSlyZXR1cm4tMTtmb3IoQlsxXT0wLGI9MTtiPDE1O2IrKylCW2IrMV09QltiXStPW2JdO2Zvcih2PTA7djxpO3YrKykwIT09ZVtyK3ZdJiYoYVtCW2Vbcit2XV0rK109dik7aWYoYz0wPT09dD8oQT1SPWEsMTkpOjE9PT10PyhBPUYsSS09MjU3LFI9TixULT0yNTcsMjU2KTooQT1VLFI9UCwtMSksYj15LGQ9cyxTPXY9RT0wLGw9LTEsZj0oQz0xPDwoeD1rKSktMSwxPT09dCYmODUyPEN8fDI9PT10JiY1OTI8QylyZXR1cm4gMTtmb3IoOzspe2ZvcihwPWItUyxfPWFbdl08Yz8obT0wLGFbdl0pOmFbdl0+Yz8obT1SW1QrYVt2XV0sQVtJK2Fbdl1dKToobT05NiwwKSxoPTE8PGItUyx5PXU9MTw8eDtuW2QrKEU+PlMpKyh1LT1oKV09cDw8MjR8bTw8MTZ8X3wwLDAhPT11Oyk7Zm9yKGg9MTw8Yi0xO0UmaDspaD4+PTE7aWYoMCE9PWg/KEUmPWgtMSxFKz1oKTpFPTAsdisrLDA9PS0tT1tiXSl7aWYoYj09PXcpYnJlYWs7Yj1lW3IrYVt2XV19aWYoazxiJiYoRSZmKSE9PWwpe2ZvcigwPT09UyYmKFM9ayksZCs9eSx6PTE8PCh4PWItUyk7eCtTPHcmJiEoKHotPU9beCtTXSk8PTApOyl4Kyssejw8PTE7aWYoQys9MTw8eCwxPT09dCYmODUyPEN8fDI9PT10JiY1OTI8QylyZXR1cm4gMTtuW2w9RSZmXT1rPDwyNHx4PDwxNnxkLXN8MH19cmV0dXJuIDAhPT1FJiYobltkK0VdPWItUzw8MjR8NjQ8PDE2fDApLG8uYml0cz1rLDB9fSx7XCIuLi91dGlscy9jb21tb25cIjo0MX1dLDUxOltmdW5jdGlvbih0LGUscil7XCJ1c2Ugc3RyaWN0XCI7ZS5leHBvcnRzPXsyOlwibmVlZCBkaWN0aW9uYXJ5XCIsMTpcInN0cmVhbSBlbmRcIiwwOlwiXCIsXCItMVwiOlwiZmlsZSBlcnJvclwiLFwiLTJcIjpcInN0cmVhbSBlcnJvclwiLFwiLTNcIjpcImRhdGEgZXJyb3JcIixcIi00XCI6XCJpbnN1ZmZpY2llbnQgbWVtb3J5XCIsXCItNVwiOlwiYnVmZmVyIGVycm9yXCIsXCItNlwiOlwiaW5jb21wYXRpYmxlIHZlcnNpb25cIn19LHt9XSw1MjpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO3ZhciBuPXQoXCIuLi91dGlscy9jb21tb25cIiksbz0wLGg9MTtmdW5jdGlvbiBpKHQpe2Zvcih2YXIgZT10Lmxlbmd0aDswPD0tLWU7KXRbZV09MH12YXIgcz0wLGE9MjksdT0yNTYsbD11KzErYSxmPTMwLGQ9MTksXz0yKmwrMSxnPTE1LGM9MTYscD03LG09MjU2LGI9MTYsdj0xNyx5PTE4LHc9WzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF0saz1bMCwwLDAsMCwxLDEsMiwyLDMsMyw0LDQsNSw1LDYsNiw3LDcsOCw4LDksOSwxMCwxMCwxMSwxMSwxMiwxMiwxMywxM10seD1bMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN10sUz1bMTYsMTcsMTgsMCw4LDcsOSw2LDEwLDUsMTEsNCwxMiwzLDEzLDIsMTQsMSwxNV0sej1uZXcgQXJyYXkoMioobCsyKSk7aSh6KTt2YXIgQz1uZXcgQXJyYXkoMipmKTtpKEMpO3ZhciBFPW5ldyBBcnJheSg1MTIpO2koRSk7dmFyIEE9bmV3IEFycmF5KDI1Nik7aShBKTt2YXIgST1uZXcgQXJyYXkoYSk7aShJKTt2YXIgTyxCLFIsVD1uZXcgQXJyYXkoZik7ZnVuY3Rpb24gRCh0LGUscixpLG4pe3RoaXMuc3RhdGljX3RyZWU9dCx0aGlzLmV4dHJhX2JpdHM9ZSx0aGlzLmV4dHJhX2Jhc2U9cix0aGlzLmVsZW1zPWksdGhpcy5tYXhfbGVuZ3RoPW4sdGhpcy5oYXNfc3RyZWU9dCYmdC5sZW5ndGh9ZnVuY3Rpb24gRih0LGUpe3RoaXMuZHluX3RyZWU9dCx0aGlzLm1heF9jb2RlPTAsdGhpcy5zdGF0X2Rlc2M9ZX1mdW5jdGlvbiBOKHQpe3JldHVybiB0PDI1Nj9FW3RdOkVbMjU2Kyh0Pj4+NyldfWZ1bmN0aW9uIFUodCxlKXt0LnBlbmRpbmdfYnVmW3QucGVuZGluZysrXT0yNTUmZSx0LnBlbmRpbmdfYnVmW3QucGVuZGluZysrXT1lPj4+OCYyNTV9ZnVuY3Rpb24gUCh0LGUscil7dC5iaV92YWxpZD5jLXI/KHQuYmlfYnVmfD1lPDx0LmJpX3ZhbGlkJjY1NTM1LFUodCx0LmJpX2J1ZiksdC5iaV9idWY9ZT4+Yy10LmJpX3ZhbGlkLHQuYmlfdmFsaWQrPXItYyk6KHQuYmlfYnVmfD1lPDx0LmJpX3ZhbGlkJjY1NTM1LHQuYmlfdmFsaWQrPXIpfWZ1bmN0aW9uIEwodCxlLHIpe1AodCxyWzIqZV0sclsyKmUrMV0pfWZ1bmN0aW9uIGoodCxlKXtmb3IodmFyIHI9MDtyfD0xJnQsdD4+Pj0xLHI8PD0xLDA8LS1lOyk7cmV0dXJuIHI+Pj4xfWZ1bmN0aW9uIFoodCxlLHIpe3ZhciBpLG4scz1uZXcgQXJyYXkoZysxKSxhPTA7Zm9yKGk9MTtpPD1nO2krKylzW2ldPWE9YStyW2ktMV08PDE7Zm9yKG49MDtuPD1lO24rKyl7dmFyIG89dFsyKm4rMV07MCE9PW8mJih0WzIqbl09aihzW29dKyssbykpfX1mdW5jdGlvbiBXKHQpe3ZhciBlO2ZvcihlPTA7ZTxsO2UrKyl0LmR5bl9sdHJlZVsyKmVdPTA7Zm9yKGU9MDtlPGY7ZSsrKXQuZHluX2R0cmVlWzIqZV09MDtmb3IoZT0wO2U8ZDtlKyspdC5ibF90cmVlWzIqZV09MDt0LmR5bl9sdHJlZVsyKm1dPTEsdC5vcHRfbGVuPXQuc3RhdGljX2xlbj0wLHQubGFzdF9saXQ9dC5tYXRjaGVzPTB9ZnVuY3Rpb24gTSh0KXs4PHQuYmlfdmFsaWQ/VSh0LHQuYmlfYnVmKTowPHQuYmlfdmFsaWQmJih0LnBlbmRpbmdfYnVmW3QucGVuZGluZysrXT10LmJpX2J1ZiksdC5iaV9idWY9MCx0LmJpX3ZhbGlkPTB9ZnVuY3Rpb24gSCh0LGUscixpKXt2YXIgbj0yKmUscz0yKnI7cmV0dXJuIHRbbl08dFtzXXx8dFtuXT09PXRbc10mJmlbZV08PWlbcl19ZnVuY3Rpb24gRyh0LGUscil7Zm9yKHZhciBpPXQuaGVhcFtyXSxuPXI8PDE7bjw9dC5oZWFwX2xlbiYmKG48dC5oZWFwX2xlbiYmSChlLHQuaGVhcFtuKzFdLHQuaGVhcFtuXSx0LmRlcHRoKSYmbisrLCFIKGUsaSx0LmhlYXBbbl0sdC5kZXB0aCkpOyl0LmhlYXBbcl09dC5oZWFwW25dLHI9bixuPDw9MTt0LmhlYXBbcl09aX1mdW5jdGlvbiBLKHQsZSxyKXt2YXIgaSxuLHMsYSxvPTA7aWYoMCE9PXQubGFzdF9saXQpZm9yKDtpPXQucGVuZGluZ19idWZbdC5kX2J1ZisyKm9dPDw4fHQucGVuZGluZ19idWZbdC5kX2J1ZisyKm8rMV0sbj10LnBlbmRpbmdfYnVmW3QubF9idWYrb10sbysrLDA9PT1pP0wodCxuLGUpOihMKHQsKHM9QVtuXSkrdSsxLGUpLDAhPT0oYT13W3NdKSYmUCh0LG4tPUlbc10sYSksTCh0LHM9TigtLWkpLHIpLDAhPT0oYT1rW3NdKSYmUCh0LGktPVRbc10sYSkpLG88dC5sYXN0X2xpdDspO0wodCxtLGUpfWZ1bmN0aW9uIFkodCxlKXt2YXIgcixpLG4scz1lLmR5bl90cmVlLGE9ZS5zdGF0X2Rlc2Muc3RhdGljX3RyZWUsbz1lLnN0YXRfZGVzYy5oYXNfc3RyZWUsaD1lLnN0YXRfZGVzYy5lbGVtcyx1PS0xO2Zvcih0LmhlYXBfbGVuPTAsdC5oZWFwX21heD1fLHI9MDtyPGg7cisrKTAhPT1zWzIqcl0/KHQuaGVhcFsrK3QuaGVhcF9sZW5dPXU9cix0LmRlcHRoW3JdPTApOnNbMipyKzFdPTA7Zm9yKDt0LmhlYXBfbGVuPDI7KXNbMioobj10LmhlYXBbKyt0LmhlYXBfbGVuXT11PDI/Kyt1OjApXT0xLHQuZGVwdGhbbl09MCx0Lm9wdF9sZW4tLSxvJiYodC5zdGF0aWNfbGVuLT1hWzIqbisxXSk7Zm9yKGUubWF4X2NvZGU9dSxyPXQuaGVhcF9sZW4+PjE7MTw9cjtyLS0pRyh0LHMscik7Zm9yKG49aDtyPXQuaGVhcFsxXSx0LmhlYXBbMV09dC5oZWFwW3QuaGVhcF9sZW4tLV0sRyh0LHMsMSksaT10LmhlYXBbMV0sdC5oZWFwWy0tdC5oZWFwX21heF09cix0LmhlYXBbLS10LmhlYXBfbWF4XT1pLHNbMipuXT1zWzIqcl0rc1syKmldLHQuZGVwdGhbbl09KHQuZGVwdGhbcl0+PXQuZGVwdGhbaV0/dC5kZXB0aFtyXTp0LmRlcHRoW2ldKSsxLHNbMipyKzFdPXNbMippKzFdPW4sdC5oZWFwWzFdPW4rKyxHKHQscywxKSwyPD10LmhlYXBfbGVuOyk7dC5oZWFwWy0tdC5oZWFwX21heF09dC5oZWFwWzFdLGZ1bmN0aW9uKHQsZSl7dmFyIHIsaSxuLHMsYSxvLGg9ZS5keW5fdHJlZSx1PWUubWF4X2NvZGUsbD1lLnN0YXRfZGVzYy5zdGF0aWNfdHJlZSxmPWUuc3RhdF9kZXNjLmhhc19zdHJlZSxkPWUuc3RhdF9kZXNjLmV4dHJhX2JpdHMsYz1lLnN0YXRfZGVzYy5leHRyYV9iYXNlLHA9ZS5zdGF0X2Rlc2MubWF4X2xlbmd0aCxtPTA7Zm9yKHM9MDtzPD1nO3MrKyl0LmJsX2NvdW50W3NdPTA7Zm9yKGhbMip0LmhlYXBbdC5oZWFwX21heF0rMV09MCxyPXQuaGVhcF9tYXgrMTtyPF87cisrKXA8KHM9aFsyKmhbMiooaT10LmhlYXBbcl0pKzFdKzFdKzEpJiYocz1wLG0rKyksaFsyKmkrMV09cyx1PGl8fCh0LmJsX2NvdW50W3NdKyssYT0wLGM8PWkmJihhPWRbaS1jXSksbz1oWzIqaV0sdC5vcHRfbGVuKz1vKihzK2EpLGYmJih0LnN0YXRpY19sZW4rPW8qKGxbMippKzFdK2EpKSk7aWYoMCE9PW0pe2Rve2ZvcihzPXAtMTswPT09dC5ibF9jb3VudFtzXTspcy0tO3QuYmxfY291bnRbc10tLSx0LmJsX2NvdW50W3MrMV0rPTIsdC5ibF9jb3VudFtwXS0tLG0tPTJ9d2hpbGUoMDxtKTtmb3Iocz1wOzAhPT1zO3MtLSlmb3IoaT10LmJsX2NvdW50W3NdOzAhPT1pOyl1PChuPXQuaGVhcFstLXJdKXx8KGhbMipuKzFdIT09cyYmKHQub3B0X2xlbis9KHMtaFsyKm4rMV0pKmhbMipuXSxoWzIqbisxXT1zKSxpLS0pfX0odCxlKSxaKHMsdSx0LmJsX2NvdW50KX1mdW5jdGlvbiBYKHQsZSxyKXt2YXIgaSxuLHM9LTEsYT1lWzFdLG89MCxoPTcsdT00O2ZvcigwPT09YSYmKGg9MTM4LHU9MyksZVsyKihyKzEpKzFdPTY1NTM1LGk9MDtpPD1yO2krKyluPWEsYT1lWzIqKGkrMSkrMV0sKytvPGgmJm49PT1hfHwobzx1P3QuYmxfdHJlZVsyKm5dKz1vOjAhPT1uPyhuIT09cyYmdC5ibF90cmVlWzIqbl0rKyx0LmJsX3RyZWVbMipiXSsrKTpvPD0xMD90LmJsX3RyZWVbMip2XSsrOnQuYmxfdHJlZVsyKnldKysscz1uLHU9KG89MCk9PT1hPyhoPTEzOCwzKTpuPT09YT8oaD02LDMpOihoPTcsNCkpfWZ1bmN0aW9uIFYodCxlLHIpe3ZhciBpLG4scz0tMSxhPWVbMV0sbz0wLGg9Nyx1PTQ7Zm9yKDA9PT1hJiYoaD0xMzgsdT0zKSxpPTA7aTw9cjtpKyspaWYobj1hLGE9ZVsyKihpKzEpKzFdLCEoKytvPGgmJm49PT1hKSl7aWYobzx1KWZvcig7TCh0LG4sdC5ibF90cmVlKSwwIT0tLW87KTtlbHNlIDAhPT1uPyhuIT09cyYmKEwodCxuLHQuYmxfdHJlZSksby0tKSxMKHQsYix0LmJsX3RyZWUpLFAodCxvLTMsMikpOm88PTEwPyhMKHQsdix0LmJsX3RyZWUpLFAodCxvLTMsMykpOihMKHQseSx0LmJsX3RyZWUpLFAodCxvLTExLDcpKTtzPW4sdT0obz0wKT09PWE/KGg9MTM4LDMpOm49PT1hPyhoPTYsMyk6KGg9Nyw0KX19aShUKTt2YXIgcT0hMTtmdW5jdGlvbiBKKHQsZSxyLGkpe1AodCwoczw8MSkrKGk/MTowKSwzKSxmdW5jdGlvbih0LGUscixpKXtNKHQpLGkmJihVKHQsciksVSh0LH5yKSksbi5hcnJheVNldCh0LnBlbmRpbmdfYnVmLHQud2luZG93LGUscix0LnBlbmRpbmcpLHQucGVuZGluZys9cn0odCxlLHIsITApfXIuX3RyX2luaXQ9ZnVuY3Rpb24odCl7cXx8KGZ1bmN0aW9uKCl7dmFyIHQsZSxyLGksbixzPW5ldyBBcnJheShnKzEpO2ZvcihpPXI9MDtpPGEtMTtpKyspZm9yKElbaV09cix0PTA7dDwxPDx3W2ldO3QrKylBW3IrK109aTtmb3IoQVtyLTFdPWksaT1uPTA7aTwxNjtpKyspZm9yKFRbaV09bix0PTA7dDwxPDxrW2ldO3QrKylFW24rK109aTtmb3Iobj4+PTc7aTxmO2krKylmb3IoVFtpXT1uPDw3LHQ9MDt0PDE8PGtbaV0tNzt0KyspRVsyNTYrbisrXT1pO2ZvcihlPTA7ZTw9ZztlKyspc1tlXT0wO2Zvcih0PTA7dDw9MTQzOyl6WzIqdCsxXT04LHQrKyxzWzhdKys7Zm9yKDt0PD0yNTU7KXpbMip0KzFdPTksdCsrLHNbOV0rKztmb3IoO3Q8PTI3OTspelsyKnQrMV09Nyx0Kyssc1s3XSsrO2Zvcig7dDw9Mjg3Oyl6WzIqdCsxXT04LHQrKyxzWzhdKys7Zm9yKFooeixsKzEscyksdD0wO3Q8Zjt0KyspQ1syKnQrMV09NSxDWzIqdF09aih0LDUpO089bmV3IEQoeix3LHUrMSxsLGcpLEI9bmV3IEQoQyxrLDAsZixnKSxSPW5ldyBEKG5ldyBBcnJheSgwKSx4LDAsZCxwKX0oKSxxPSEwKSx0LmxfZGVzYz1uZXcgRih0LmR5bl9sdHJlZSxPKSx0LmRfZGVzYz1uZXcgRih0LmR5bl9kdHJlZSxCKSx0LmJsX2Rlc2M9bmV3IEYodC5ibF90cmVlLFIpLHQuYmlfYnVmPTAsdC5iaV92YWxpZD0wLFcodCl9LHIuX3RyX3N0b3JlZF9ibG9jaz1KLHIuX3RyX2ZsdXNoX2Jsb2NrPWZ1bmN0aW9uKHQsZSxyLGkpe3ZhciBuLHMsYT0wOzA8dC5sZXZlbD8oMj09PXQuc3RybS5kYXRhX3R5cGUmJih0LnN0cm0uZGF0YV90eXBlPWZ1bmN0aW9uKHQpe3ZhciBlLHI9NDA5MzYyNDQ0Nztmb3IoZT0wO2U8PTMxO2UrKyxyPj4+PTEpaWYoMSZyJiYwIT09dC5keW5fbHRyZWVbMiplXSlyZXR1cm4gbztpZigwIT09dC5keW5fbHRyZWVbMThdfHwwIT09dC5keW5fbHRyZWVbMjBdfHwwIT09dC5keW5fbHRyZWVbMjZdKXJldHVybiBoO2ZvcihlPTMyO2U8dTtlKyspaWYoMCE9PXQuZHluX2x0cmVlWzIqZV0pcmV0dXJuIGg7cmV0dXJuIG99KHQpKSxZKHQsdC5sX2Rlc2MpLFkodCx0LmRfZGVzYyksYT1mdW5jdGlvbih0KXt2YXIgZTtmb3IoWCh0LHQuZHluX2x0cmVlLHQubF9kZXNjLm1heF9jb2RlKSxYKHQsdC5keW5fZHRyZWUsdC5kX2Rlc2MubWF4X2NvZGUpLFkodCx0LmJsX2Rlc2MpLGU9ZC0xOzM8PWUmJjA9PT10LmJsX3RyZWVbMipTW2VdKzFdO2UtLSk7cmV0dXJuIHQub3B0X2xlbis9MyooZSsxKSs1KzUrNCxlfSh0KSxuPXQub3B0X2xlbiszKzc+Pj4zLChzPXQuc3RhdGljX2xlbiszKzc+Pj4zKTw9biYmKG49cykpOm49cz1yKzUscis0PD1uJiYtMSE9PWU/Sih0LGUscixpKTo0PT09dC5zdHJhdGVneXx8cz09PW4/KFAodCwyKyhpPzE6MCksMyksSyh0LHosQykpOihQKHQsNCsoaT8xOjApLDMpLGZ1bmN0aW9uKHQsZSxyLGkpe3ZhciBuO2ZvcihQKHQsZS0yNTcsNSksUCh0LHItMSw1KSxQKHQsaS00LDQpLG49MDtuPGk7bisrKVAodCx0LmJsX3RyZWVbMipTW25dKzFdLDMpO1YodCx0LmR5bl9sdHJlZSxlLTEpLFYodCx0LmR5bl9kdHJlZSxyLTEpfSh0LHQubF9kZXNjLm1heF9jb2RlKzEsdC5kX2Rlc2MubWF4X2NvZGUrMSxhKzEpLEsodCx0LmR5bl9sdHJlZSx0LmR5bl9kdHJlZSkpLFcodCksaSYmTSh0KX0sci5fdHJfdGFsbHk9ZnVuY3Rpb24odCxlLHIpe3JldHVybiB0LnBlbmRpbmdfYnVmW3QuZF9idWYrMip0Lmxhc3RfbGl0XT1lPj4+OCYyNTUsdC5wZW5kaW5nX2J1Zlt0LmRfYnVmKzIqdC5sYXN0X2xpdCsxXT0yNTUmZSx0LnBlbmRpbmdfYnVmW3QubF9idWYrdC5sYXN0X2xpdF09MjU1JnIsdC5sYXN0X2xpdCsrLDA9PT1lP3QuZHluX2x0cmVlWzIqcl0rKzoodC5tYXRjaGVzKyssZS0tLHQuZHluX2x0cmVlWzIqKEFbcl0rdSsxKV0rKyx0LmR5bl9kdHJlZVsyKk4oZSldKyspLHQubGFzdF9saXQ9PT10LmxpdF9idWZzaXplLTF9LHIuX3RyX2FsaWduPWZ1bmN0aW9uKHQpe1AodCwyLDMpLEwodCxtLHopLGZ1bmN0aW9uKHQpezE2PT09dC5iaV92YWxpZD8oVSh0LHQuYmlfYnVmKSx0LmJpX2J1Zj0wLHQuYmlfdmFsaWQ9MCk6ODw9dC5iaV92YWxpZCYmKHQucGVuZGluZ19idWZbdC5wZW5kaW5nKytdPTI1NSZ0LmJpX2J1Zix0LmJpX2J1Zj4+PTgsdC5iaV92YWxpZC09OCl9KHQpfX0se1wiLi4vdXRpbHMvY29tbW9uXCI6NDF9XSw1MzpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1mdW5jdGlvbigpe3RoaXMuaW5wdXQ9bnVsbCx0aGlzLm5leHRfaW49MCx0aGlzLmF2YWlsX2luPTAsdGhpcy50b3RhbF9pbj0wLHRoaXMub3V0cHV0PW51bGwsdGhpcy5uZXh0X291dD0wLHRoaXMuYXZhaWxfb3V0PTAsdGhpcy50b3RhbF9vdXQ9MCx0aGlzLm1zZz1cIlwiLHRoaXMuc3RhdGU9bnVsbCx0aGlzLmRhdGFfdHlwZT0yLHRoaXMuYWRsZXI9MH19LHt9XSw1NDpbZnVuY3Rpb24odCxlLHIpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1cImZ1bmN0aW9uXCI9PXR5cGVvZiBzZXRJbW1lZGlhdGU/c2V0SW1tZWRpYXRlOmZ1bmN0aW9uKCl7dmFyIHQ9W10uc2xpY2UuYXBwbHkoYXJndW1lbnRzKTt0LnNwbGljZSgxLDAsMCksc2V0VGltZW91dC5hcHBseShudWxsLHQpfX0se31dfSx7fSxbMTBdKSgxMCl9KTsiLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aCkpKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCIvKiEgaWVlZTc1NC4gQlNELTMtQ2xhdXNlIExpY2Vuc2UuIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZy9vcGVuc291cmNlPiAqL1xuZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCB1bmRlZmluZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIGlmIChnbG9iYWwuc2V0SW1tZWRpYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dEhhbmRsZSA9IDE7IC8vIFNwZWMgc2F5cyBncmVhdGVyIHRoYW4gemVyb1xuICAgIHZhciB0YXNrc0J5SGFuZGxlID0ge307XG4gICAgdmFyIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgIHZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG4gICAgdmFyIHJlZ2lzdGVySW1tZWRpYXRlO1xuXG4gICAgZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGNhbGxiYWNrKSB7XG4gICAgICAvLyBDYWxsYmFjayBjYW4gZWl0aGVyIGJlIGEgZnVuY3Rpb24gb3IgYSBzdHJpbmdcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjayA9IG5ldyBGdW5jdGlvbihcIlwiICsgY2FsbGJhY2spO1xuICAgICAgfVxuICAgICAgLy8gQ29weSBmdW5jdGlvbiBhcmd1bWVudHNcbiAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDFdO1xuICAgICAgfVxuICAgICAgLy8gU3RvcmUgYW5kIHJlZ2lzdGVyIHRoZSB0YXNrXG4gICAgICB2YXIgdGFzayA9IHsgY2FsbGJhY2s6IGNhbGxiYWNrLCBhcmdzOiBhcmdzIH07XG4gICAgICB0YXNrc0J5SGFuZGxlW25leHRIYW5kbGVdID0gdGFzaztcbiAgICAgIHJlZ2lzdGVySW1tZWRpYXRlKG5leHRIYW5kbGUpO1xuICAgICAgcmV0dXJuIG5leHRIYW5kbGUrKztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShoYW5kbGUpIHtcbiAgICAgICAgZGVsZXRlIHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW4odGFzaykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSB0YXNrLmNhbGxiYWNrO1xuICAgICAgICB2YXIgYXJncyA9IHRhc2suYXJncztcbiAgICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIGNhbGxiYWNrKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjYWxsYmFjay5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBydW5JZlByZXNlbnQoaGFuZGxlKSB7XG4gICAgICAgIC8vIEZyb20gdGhlIHNwZWM6IFwiV2FpdCB1bnRpbCBhbnkgaW52b2NhdGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gc3RhcnRlZCBiZWZvcmUgdGhpcyBvbmUgaGF2ZSBjb21wbGV0ZWQuXCJcbiAgICAgICAgLy8gU28gaWYgd2UncmUgY3VycmVudGx5IHJ1bm5pbmcgYSB0YXNrLCB3ZSdsbCBuZWVkIHRvIGRlbGF5IHRoaXMgaW52b2NhdGlvbi5cbiAgICAgICAgaWYgKGN1cnJlbnRseVJ1bm5pbmdBVGFzaykge1xuICAgICAgICAgICAgLy8gRGVsYXkgYnkgZG9pbmcgYSBzZXRUaW1lb3V0LiBzZXRJbW1lZGlhdGUgd2FzIHRyaWVkIGluc3RlYWQsIGJ1dCBpbiBGaXJlZm94IDcgaXQgZ2VuZXJhdGVkIGFcbiAgICAgICAgICAgIC8vIFwidG9vIG11Y2ggcmVjdXJzaW9uXCIgZXJyb3IuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0YXNrID0gdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgICAgICAgICAgaWYgKHRhc2spIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bih0YXNrKTtcbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBjbGVhckltbWVkaWF0ZShoYW5kbGUpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24gKCkgeyBydW5JZlByZXNlbnQoaGFuZGxlKTsgfSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FuVXNlUG9zdE1lc3NhZ2UoKSB7XG4gICAgICAgIC8vIFRoZSB0ZXN0IGFnYWluc3QgYGltcG9ydFNjcmlwdHNgIHByZXZlbnRzIHRoaXMgaW1wbGVtZW50YXRpb24gZnJvbSBiZWluZyBpbnN0YWxsZWQgaW5zaWRlIGEgd2ViIHdvcmtlcixcbiAgICAgICAgLy8gd2hlcmUgYGdsb2JhbC5wb3N0TWVzc2FnZWAgbWVhbnMgc29tZXRoaW5nIGNvbXBsZXRlbHkgZGlmZmVyZW50IGFuZCBjYW4ndCBiZSB1c2VkIGZvciB0aGlzIHB1cnBvc2UuXG4gICAgICAgIGlmIChnbG9iYWwucG9zdE1lc3NhZ2UgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgICAgICAgICB2YXIgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgb2xkT25NZXNzYWdlID0gZ2xvYmFsLm9ubWVzc2FnZTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKFwiXCIsIFwiKlwiKTtcbiAgICAgICAgICAgIGdsb2JhbC5vbm1lc3NhZ2UgPSBvbGRPbk1lc3NhZ2U7XG4gICAgICAgICAgICByZXR1cm4gcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICAvLyBJbnN0YWxscyBhbiBldmVudCBoYW5kbGVyIG9uIGBnbG9iYWxgIGZvciB0aGUgYG1lc3NhZ2VgIGV2ZW50OiBzZWVcbiAgICAgICAgLy8gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9ET00vd2luZG93LnBvc3RNZXNzYWdlXG4gICAgICAgIC8vICogaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2UvY29tbXMuaHRtbCNjcm9zc0RvY3VtZW50TWVzc2FnZXNcblxuICAgICAgICB2YXIgbWVzc2FnZVByZWZpeCA9IFwic2V0SW1tZWRpYXRlJFwiICsgTWF0aC5yYW5kb20oKSArIFwiJFwiO1xuICAgICAgICB2YXIgb25HbG9iYWxNZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGdsb2JhbCAmJlxuICAgICAgICAgICAgICAgIHR5cGVvZiBldmVudC5kYXRhID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleE9mKG1lc3NhZ2VQcmVmaXgpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KCtldmVudC5kYXRhLnNsaWNlKG1lc3NhZ2VQcmVmaXgubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgICAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlLCBmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbG9iYWwuYXR0YWNoRXZlbnQoXCJvbm1lc3NhZ2VcIiwgb25HbG9iYWxNZXNzYWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UobWVzc2FnZVByZWZpeCArIGhhbmRsZSwgXCIqXCIpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgICAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBjaGFubmVsLnBvcnQyLnBvc3RNZXNzYWdlKGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGh0bWwgPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgPHNjcmlwdD4gZWxlbWVudDsgaXRzIHJlYWR5c3RhdGVjaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCBhc3luY2hyb25vdXNseSBvbmNlIGl0IGlzIGluc2VydGVkXG4gICAgICAgICAgICAvLyBpbnRvIHRoZSBkb2N1bWVudC4gRG8gc28sIHRodXMgcXVldWluZyB1cCB0aGUgdGFzay4gUmVtZW1iZXIgdG8gY2xlYW4gdXAgb25jZSBpdCdzIGJlZW4gY2FsbGVkLlxuICAgICAgICAgICAgdmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG4gICAgICAgICAgICAgICAgc2NyaXB0ID0gbnVsbDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBodG1sLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIElmIHN1cHBvcnRlZCwgd2Ugc2hvdWxkIGF0dGFjaCB0byB0aGUgcHJvdG90eXBlIG9mIGdsb2JhbCwgc2luY2UgdGhhdCBpcyB3aGVyZSBzZXRUaW1lb3V0IGV0IGFsLiBsaXZlLlxuICAgIHZhciBhdHRhY2hUbyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiAmJiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZ2xvYmFsKTtcbiAgICBhdHRhY2hUbyA9IGF0dGFjaFRvICYmIGF0dGFjaFRvLnNldFRpbWVvdXQgPyBhdHRhY2hUbyA6IGdsb2JhbDtcblxuICAgIC8vIERvbid0IGdldCBmb29sZWQgYnkgZS5nLiBicm93c2VyaWZ5IGVudmlyb25tZW50cy5cbiAgICBpZiAoe30udG9TdHJpbmcuY2FsbChnbG9iYWwucHJvY2VzcykgPT09IFwiW29iamVjdCBwcm9jZXNzXVwiKSB7XG4gICAgICAgIC8vIEZvciBOb2RlLmpzIGJlZm9yZSAwLjlcbiAgICAgICAgaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoY2FuVXNlUG9zdE1lc3NhZ2UoKSkge1xuICAgICAgICAvLyBGb3Igbm9uLUlFMTAgbW9kZXJuIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxQb3N0TWVzc2FnZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGdsb2JhbC5NZXNzYWdlQ2hhbm5lbCkge1xuICAgICAgICAvLyBGb3Igd2ViIHdvcmtlcnMsIHdoZXJlIHN1cHBvcnRlZFxuICAgICAgICBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChkb2MgJiYgXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiBpbiBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSkge1xuICAgICAgICAvLyBGb3IgSUUgNuKAkzhcbiAgICAgICAgaW5zdGFsbFJlYWR5U3RhdGVDaGFuZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRm9yIG9sZGVyIGJyb3dzZXJzXG4gICAgICAgIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKTtcbiAgICB9XG5cbiAgICBhdHRhY2hUby5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG4gICAgYXR0YWNoVG8uY2xlYXJJbW1lZGlhdGUgPSBjbGVhckltbWVkaWF0ZTtcbn0odHlwZW9mIHNlbGYgPT09IFwidW5kZWZpbmVkXCIgPyB0eXBlb2YgZ2xvYmFsID09PSBcInVuZGVmaW5lZFwiID8gdGhpcyA6IGdsb2JhbCA6IHNlbGYpKTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbmNsYXNzIENvbnRlbnRYbWwge1xuICAgIHByaXZhdGUgJGdhbWVSb3VuZHNOYXY6IEpRdWVyeTtcbiAgICBwcml2YXRlICRnYW1lUm91bmRzOiBKUXVlcnk7XG4gICAgcHJpdmF0ZSAkZ2FtZVF1ZXN0aW9uOiBKUXVlcnk7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgb3B0aW9uczogeyBnZXRfZGF0YTogYW55IH0pIHtcbiAgICAgICAgdGhpcy4kZ2FtZVJvdW5kc05hdiA9ICQoJyNqc0dhbWVSb3VuZHNOYXYnKTtcbiAgICAgICAgdGhpcy4kZ2FtZVJvdW5kcyA9ICQoJyNqc0dhbWVSb3VuZHMnKTtcbiAgICAgICAgdGhpcy4kZ2FtZVF1ZXN0aW9uID0gJCgnI2pzR2FtZVF1ZXN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2UgY29udGVudC54bWwgZmlsZVxuICAgICAqIEBwYXJhbSB0eHRcbiAgICAgKi9cbiAgICBwYXJzZSh0eHQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLiRnYW1lUm91bmRzTmF2Lmh0bWwoJycpLmNzcygnZGlzcGxheScsICdmbGV4Jyk7XG4gICAgICAgIHRoaXMuJGdhbWVSb3VuZHMuaHRtbCgnJyk7XG4gICAgICAgIHRoaXMuJGdhbWVRdWVzdGlvbi5odG1sKCcnKTtcblxuICAgICAgICBjb25zdCAkcGFja2FnZTogYW55ID0gJCgkLnBhcnNlWE1MKHR4dC50cmltKCkpKS5maW5kKCdwYWNrYWdlJyk7XG5cbiAgICAgICAgLy8gaW5mb1xuICAgICAgICAkKCcjanNHYW1lSGVhZGVyJykuY3NzKCdkaXNwbGF5JywgJ2ZsZXgnKTtcbiAgICAgICAgJCgnI2pzR2FtZU5hbWUnKS5odG1sKCRwYWNrYWdlLmF0dHIoJ25hbWUnKSk7XG4gICAgICAgICQoJyNqc0dhbWVEYXRlJykuaHRtbCgkcGFja2FnZS5hdHRyKCdkYXRlJykpO1xuICAgICAgICAkKCcjanNHYW1lVmVyc2lvbicpLmh0bWwoJHBhY2thZ2UuYXR0cigndmVyc2lvbicpKTtcbiAgICAgICAgJCgnI2pzR2FtZUlkJykuaHRtbCgkcGFja2FnZS5hdHRyKCdpZCcpKTtcblxuICAgICAgICAvLyByb3VuZHNcbiAgICAgICAgdGhpcy5wYXJzZVJvdW5kcygkcGFja2FnZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtICRwYWNrYWdlXG4gICAgICovXG4gICAgcHJpdmF0ZSBwYXJzZVJvdW5kcygkcGFja2FnZTogYW55KSB7XG4gICAgICAgIGNvbnN0IF90aGlzID0gdGhpcztcblxuICAgICAgICAkcGFja2FnZS5maW5kKCdyb3VuZCcpLmVhY2goZnVuY3Rpb24gKGk6IG51bWJlcikge1xuICAgICAgICAgICAgLy8gdGFiXG4gICAgICAgICAgICBjb25zdCAkcm91bmQgPSAkKHRoaXMpO1xuICAgICAgICAgICAgJCgnPGE+Jywge1xuICAgICAgICAgICAgICAgICdjbGFzcyc6ICduYXYtbGluaycgKyAoaSA9PT0gMCA/ICcgYWN0aXZlJyA6ICcnKSxcbiAgICAgICAgICAgICAgICAnaHRtbCc6ICRyb3VuZC5hdHRyKCduYW1lJyksXG4gICAgICAgICAgICAgICAgJ2RhdGEtdG9nZ2xlJzogJ3RhYicsXG4gICAgICAgICAgICAgICAgJ2hyZWYnOiAnI3JvdW5kJyArIGksXG4gICAgICAgICAgICB9KS5hcHBlbmRUbygkKCc8bGk+Jywge1xuICAgICAgICAgICAgICAgICdjbGFzcyc6ICduYXYtaXRlbScsXG4gICAgICAgICAgICB9KS5hcHBlbmRUbyhfdGhpcy4kZ2FtZVJvdW5kc05hdikpO1xuXG4gICAgICAgICAgICAvLyBjb250ZW50XG4gICAgICAgICAgICBjb25zdCAkcm91bmRFbCA9ICQoJzxkaXY+Jywge1xuICAgICAgICAgICAgICAgICdjbGFzcyc6ICd0YWItcGFuZSBmYWRlJyArIChpID09PSAwID8gJyBhY3RpdmUgc2hvdycgOiAnJyksXG4gICAgICAgICAgICAgICAgJ2lkJzogJ3JvdW5kJyArIGksXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgJHRhYmxlID0gJCgnPHRhYmxlPicsIHtcbiAgICAgICAgICAgICAgICAnY2xhc3MnOiAndGFibGUgdGFibGUtaG92ZXInLFxuICAgICAgICAgICAgfSkuYXBwZW5kVG8oJHJvdW5kRWwpO1xuXG4gICAgICAgICAgICAvLyB0aGVtZXNcbiAgICAgICAgICAgIF90aGlzLnBhcnNlVGhlbWVzKCRyb3VuZCwgJHRhYmxlKTtcblxuICAgICAgICAgICAgJHJvdW5kRWwuYXBwZW5kVG8oX3RoaXMuJGdhbWVSb3VuZHMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gJHJvdW5kXG4gICAgICogQHBhcmFtICR0YWJsZVxuICAgICAqL1xuICAgIHByaXZhdGUgcGFyc2VUaGVtZXMoJHJvdW5kOiBKUXVlcnksICR0YWJsZTogSlF1ZXJ5KSB7XG4gICAgICAgIGNvbnN0IF90aGlzID0gdGhpcztcblxuICAgICAgICAkcm91bmQuZmluZCgndGhlbWVzJykuZmluZCgndGhlbWUnKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnN0ICR0ciA9ICQoJzx0cj4nLCB7fSk7XG4gICAgICAgICAgICBjb25zdCAkdGhlbWUgPSAkKHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgdGhlbWVOYW1lID0gJHRoZW1lLmF0dHIoJ25hbWUnKTtcblxuICAgICAgICAgICAgLy8g0L3QsNC30LLQsNC90LjQtSDRgtC10LzRi1xuICAgICAgICAgICAgJCgnPHRkPicsIHtcbiAgICAgICAgICAgICAgICAnaHRtbCc6IHRoZW1lTmFtZSxcbiAgICAgICAgICAgIH0pLmFwcGVuZFRvKCR0cik7XG5cbiAgICAgICAgICAgIC8vIHF1ZXN0aW9uc1xuICAgICAgICAgICAgX3RoaXMucGFyc2VRdWVzdGlvbnMoJHRoZW1lLCB0aGVtZU5hbWUsICR0cik7XG5cbiAgICAgICAgICAgICR0ci5hcHBlbmRUbygkdGFibGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSAkdGhlbWVcbiAgICAgKiBAcGFyYW0gdGhlbWVOYW1lXG4gICAgICogQHBhcmFtICR0clxuICAgICAqL1xuICAgIHByaXZhdGUgcGFyc2VRdWVzdGlvbnMoJHRoZW1lOiBKUXVlcnksIHRoZW1lTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkLCAkdHI6IEpRdWVyeSkge1xuICAgICAgICBjb25zdCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgJHRoZW1lLmZpbmQoJ3F1ZXN0aW9ucycpLmZpbmQoJ3F1ZXN0aW9uJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zdCAkcXVlc3Rpb24gPSAkKHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgcXVlc3Rpb25QcmljZSA9ICQodGhpcykuYXR0cigncHJpY2UnKTtcblxuICAgICAgICAgICAgY29uc3QgJHR5cGUgPSAkcXVlc3Rpb24uZmluZCgndHlwZScpO1xuXG4gICAgICAgICAgICAkKCc8dGQ+Jywge1xuICAgICAgICAgICAgICAgICdjbGFzcyc6ICdxdWVzdGlvbi1jZWxsJyArICgkdHlwZS5sZW5ndGggPyAnIHF1ZXN0aW9uLWNlbGxfc3RhcicgOiAnJyksXG4gICAgICAgICAgICAgICAgJ2h0bWwnOiBxdWVzdGlvblByaWNlLFxuICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLiRnYW1lUXVlc3Rpb24uaHRtbCgnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g0YLQtdC80LAsINGB0YLQvtC40LzQvtGB0YLRjFxuICAgICAgICAgICAgICAgICAgICAkKCc8aDQ+Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2h0bWwnOiB0aGVtZU5hbWUgKyAnLCAnICsgcXVlc3Rpb25QcmljZSxcbiAgICAgICAgICAgICAgICAgICAgfSkuYXBwZW5kVG8oX3RoaXMuJGdhbWVRdWVzdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g0YLQuNC/INCy0L7Qv9GA0L7RgdCwINC4INC/0LDRgNCw0LzQtdGC0YDRi1xuICAgICAgICAgICAgICAgICAgICBpZiAoJHR5cGUubGVuZ3RoID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0ICRxdWVzdGlvblR5cGUgPSAkKCc8ZGl2PicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAncXVlc3Rpb24tdHlwZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2h0bWwnOiAn0KLQuNC/INCy0L7Qv9GA0L7RgdCwOiAnICsgJHR5cGUuYXR0cignbmFtZScpLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuYXBwZW5kVG8oX3RoaXMuJGdhbWVRdWVzdGlvbik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0ICRwYXJhbXMgPSAkKCc8ZGl2PicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHRtbCc6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuYXBwZW5kVG8oJHF1ZXN0aW9uVHlwZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICR0eXBlLmZpbmQoJ3BhcmFtJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnPHNwYW4+Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHRtbCc6ICQodGhpcykuYXR0cignbmFtZScpICsgJzonICsgJCh0aGlzKS5odG1sKCkgKyAnICcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuYXBwZW5kVG8oJHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8g0LLRi9Cy0L7QtCDQstC+0L/RgNC+0YHQsFxuICAgICAgICAgICAgICAgICAgICAkcXVlc3Rpb24uZmluZCgnc2NlbmFyaW8nKS5maW5kKCdhdG9tJykuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCAkYXRvbSA9ICQodGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBodG1sID0gJGF0b20uaHRtbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHlwZSA9ICRhdG9tLmF0dHIoJ3R5cGUnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g0L7QsdGA0LDQsdCw0YLRi9Cy0LDRgtGMINC60LDRgNGC0LjQvdC60Lgg0Lgg0LfQstGD0LpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgnaW1hZ2UnID09PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgnPGltZz4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcmMnOiAnZGF0YTppbWFnZS9qcGVnO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCAnICsgX3RoaXMub3B0aW9ucy5nZXRfZGF0YSgnSW1hZ2VzLycgKyBlbmNvZGVVUkkoaHRtbCkuc3Vic3RyKDEpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FsdCc6IGh0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6IGh0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6ICcxMDAlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5hcHBlbmRUbyhfdGhpcy4kZ2FtZVF1ZXN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJ3ZvaWNlJyA9PT0gdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJzxhdWRpbz4nLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcmMnOiAnZGF0YTphdWRpby9tcDM7Y2hhcnNldD11dGYtODtiYXNlNjQsICcgKyBfdGhpcy5vcHRpb25zLmdldF9kYXRhKCdBdWRpby8nICsgZW5jb2RlVVJJKGh0bWwpLnN1YnN0cigxKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb250cm9scyc6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuYXBwZW5kVG8oX3RoaXMuJGdhbWVRdWVzdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJzxkaXY+Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHRtbCc6IGh0bWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuYXBwZW5kVG8oX3RoaXMuJGdhbWVRdWVzdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vINC+0YLQstC10YJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgJGFuc3dlciA9ICQoJzxkaXY+Jywge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogJ2Fuc3dlcicsXG4gICAgICAgICAgICAgICAgICAgICAgICAnaHRtbCc6ICc8aDU+0J7RgtCy0LXRgjxoNT4nLFxuICAgICAgICAgICAgICAgICAgICB9KS5hcHBlbmRUbyhfdGhpcy4kZ2FtZVF1ZXN0aW9uKTtcblxuICAgICAgICAgICAgICAgICAgICAkKCc8ZGl2PicsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICdzcG9pbGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdodG1sJzogJHF1ZXN0aW9uLmZpbmQoJ3JpZ2h0JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmluZCgnYW5zd2VyJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaHRtbCgpLFxuICAgICAgICAgICAgICAgICAgICB9KS5hcHBlbmRUbygkYW5zd2VyKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSkuYXBwZW5kVG8oJHRyKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250ZW50WG1sO1xuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS01LTMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYXBwLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07Il0sInNvdXJjZVJvb3QiOiIifQ==